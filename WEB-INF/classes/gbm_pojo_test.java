package Demo;
/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-02-05T08:00:26.967-08:00
  3.10.3.4
  
  Standalone prediction code with sample test data for GBMModel named gbm_pojo_test

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://172.16.1.155:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://172.16.1.155:54321/3/Models.java/gbm-pojo-test > gbm_pojo_test.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_pojo_test.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_pojo_test", algorithm="gbm")
public class gbm_pojo_test extends GenModel {
  public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Binomial; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 7; }
  public int nclasses() { return 2; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_pojo_test.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 2;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* DayofMonth */ gbm_pojo_test_ColInfo_0.VALUES,
    /* DayOfWeek */ gbm_pojo_test_ColInfo_1.VALUES,
    /* UniqueCarrier */ gbm_pojo_test_ColInfo_2.VALUES,
    /* FlightNum */ gbm_pojo_test_ColInfo_3.VALUES,
    /* TailNum */ gbm_pojo_test_ColInfo_4.VALUES,
    /* Origin */ gbm_pojo_test_ColInfo_5.VALUES,
    /* Dest */ gbm_pojo_test_ColInfo_6.VALUES,
    /* IsDepDelayed */ gbm_pojo_test_ColInfo_7.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.4740502421110786,0.5259497578889214};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {0.4740502421110786,0.5259497578889214};

  public gbm_pojo_test() { super(NAMES,DOMAINS); }
  public String getUUID() { return Long.toString(-8344473139124467814L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_pojo_test_Forest_0.score0(data,preds);
    gbm_pojo_test_Forest_1.score0(data,preds);
    gbm_pojo_test_Forest_2.score0(data,preds);
    gbm_pojo_test_Forest_3.score0(data,preds);
    gbm_pojo_test_Forest_4.score0(data,preds);
    gbm_pojo_test_Forest_5.score0(data,preds);
    gbm_pojo_test_Forest_6.score0(data,preds);
    gbm_pojo_test_Forest_7.score0(data,preds);
    gbm_pojo_test_Forest_8.score0(data,preds);
    gbm_pojo_test_Forest_9.score0(data,preds);
    gbm_pojo_test_Forest_10.score0(data,preds);
    gbm_pojo_test_Forest_11.score0(data,preds);
    gbm_pojo_test_Forest_12.score0(data,preds);
    gbm_pojo_test_Forest_13.score0(data,preds);
    gbm_pojo_test_Forest_14.score0(data,preds);
    gbm_pojo_test_Forest_15.score0(data,preds);
    gbm_pojo_test_Forest_16.score0(data,preds);
    gbm_pojo_test_Forest_17.score0(data,preds);
    gbm_pojo_test_Forest_18.score0(data,preds);
    gbm_pojo_test_Forest_19.score0(data,preds);
    gbm_pojo_test_Forest_20.score0(data,preds);
    gbm_pojo_test_Forest_21.score0(data,preds);
    gbm_pojo_test_Forest_22.score0(data,preds);
    gbm_pojo_test_Forest_23.score0(data,preds);
    gbm_pojo_test_Forest_24.score0(data,preds);
    gbm_pojo_test_Forest_25.score0(data,preds);
    gbm_pojo_test_Forest_26.score0(data,preds);
    gbm_pojo_test_Forest_27.score0(data,preds);
    gbm_pojo_test_Forest_28.score0(data,preds);
    gbm_pojo_test_Forest_29.score0(data,preds);
    gbm_pojo_test_Forest_30.score0(data,preds);
    gbm_pojo_test_Forest_31.score0(data,preds);
    gbm_pojo_test_Forest_32.score0(data,preds);
    gbm_pojo_test_Forest_33.score0(data,preds);
    gbm_pojo_test_Forest_34.score0(data,preds);
    gbm_pojo_test_Forest_35.score0(data,preds);
    gbm_pojo_test_Forest_36.score0(data,preds);
    gbm_pojo_test_Forest_37.score0(data,preds);
    gbm_pojo_test_Forest_38.score0(data,preds);
    gbm_pojo_test_Forest_39.score0(data,preds);
    gbm_pojo_test_Forest_40.score0(data,preds);
    gbm_pojo_test_Forest_41.score0(data,preds);
    gbm_pojo_test_Forest_42.score0(data,preds);
    gbm_pojo_test_Forest_43.score0(data,preds);
    gbm_pojo_test_Forest_44.score0(data,preds);
    gbm_pojo_test_Forest_45.score0(data,preds);
    gbm_pojo_test_Forest_46.score0(data,preds);
    gbm_pojo_test_Forest_47.score0(data,preds);
    gbm_pojo_test_Forest_48.score0(data,preds);
    gbm_pojo_test_Forest_49.score0(data,preds);
    preds[2] = preds[1] + 0.10389237876136811;
    preds[2] = 1./(1. + Math.min(1e19, Math.exp(-(preds[2]))));
    preds[1] = 1.0-preds[2];
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.36111085727960435);
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_pojo_test implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    NamesHolder_gbm_pojo_test_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_pojo_test_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "DayofMonth";
      sa[1] = "DayOfWeek";
      sa[2] = "UniqueCarrier";
      sa[3] = "FlightNum";
      sa[4] = "TailNum";
      sa[5] = "Origin";
      sa[6] = "Dest";
    }
  }
}
// The class representing column DayofMonth
class gbm_pojo_test_ColInfo_0 implements java.io.Serializable {
  public static final String[] VALUES = new String[31];
  static {
    gbm_pojo_test_ColInfo_0_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_0_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "10";
      sa[2] = "11";
      sa[3] = "12";
      sa[4] = "13";
      sa[5] = "14";
      sa[6] = "15";
      sa[7] = "16";
      sa[8] = "17";
      sa[9] = "18";
      sa[10] = "19";
      sa[11] = "2";
      sa[12] = "20";
      sa[13] = "21";
      sa[14] = "22";
      sa[15] = "23";
      sa[16] = "24";
      sa[17] = "25";
      sa[18] = "26";
      sa[19] = "27";
      sa[20] = "28";
      sa[21] = "29";
      sa[22] = "3";
      sa[23] = "30";
      sa[24] = "31";
      sa[25] = "4";
      sa[26] = "5";
      sa[27] = "6";
      sa[28] = "7";
      sa[29] = "8";
      sa[30] = "9";
    }
  }
}
// The class representing column DayOfWeek
class gbm_pojo_test_ColInfo_1 implements java.io.Serializable {
  public static final String[] VALUES = new String[7];
  static {
    gbm_pojo_test_ColInfo_1_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_1_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "2";
      sa[2] = "3";
      sa[3] = "4";
      sa[4] = "5";
      sa[5] = "6";
      sa[6] = "7";
    }
  }
}
// The class representing column UniqueCarrier
class gbm_pojo_test_ColInfo_2 implements java.io.Serializable {
  public static final String[] VALUES = new String[10];
  static {
    gbm_pojo_test_ColInfo_2_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_2_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "AA";
      sa[1] = "CO";
      sa[2] = "DL";
      sa[3] = "HP";
      sa[4] = "PI";
      sa[5] = "PS";
      sa[6] = "TW";
      sa[7] = "UA";
      sa[8] = "US";
      sa[9] = "WN";
    }
  }
}
// The class representing column FlightNum
class gbm_pojo_test_ColInfo_3 implements java.io.Serializable {
  public static final String[] VALUES = new String[2439];
  static {
    gbm_pojo_test_ColInfo_3_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_3_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "1";
      sa[1] = "10";
      sa[2] = "100";
      sa[3] = "1001";
      sa[4] = "1002";
      sa[5] = "1004";
      sa[6] = "1006";
      sa[7] = "1007";
      sa[8] = "1008";
      sa[9] = "1009";
      sa[10] = "101";
      sa[11] = "1010";
      sa[12] = "1011";
      sa[13] = "1012";
      sa[14] = "1014";
      sa[15] = "1015";
      sa[16] = "1016";
      sa[17] = "1017";
      sa[18] = "1018";
      sa[19] = "102";
      sa[20] = "1020";
      sa[21] = "1021";
      sa[22] = "1022";
      sa[23] = "1023";
      sa[24] = "1024";
      sa[25] = "1025";
      sa[26] = "1026";
      sa[27] = "1027";
      sa[28] = "1028";
      sa[29] = "1029";
      sa[30] = "103";
      sa[31] = "1030";
      sa[32] = "1031";
      sa[33] = "1032";
      sa[34] = "1033";
      sa[35] = "1034";
      sa[36] = "1035";
      sa[37] = "1036";
      sa[38] = "1037";
      sa[39] = "1038";
      sa[40] = "1039";
      sa[41] = "104";
      sa[42] = "1040";
      sa[43] = "1041";
      sa[44] = "1042";
      sa[45] = "1043";
      sa[46] = "1044";
      sa[47] = "1046";
      sa[48] = "1047";
      sa[49] = "1048";
      sa[50] = "1049";
      sa[51] = "105";
      sa[52] = "1050";
      sa[53] = "1051";
      sa[54] = "1052";
      sa[55] = "1053";
      sa[56] = "1054";
      sa[57] = "1056";
      sa[58] = "1057";
      sa[59] = "1058";
      sa[60] = "1059";
      sa[61] = "106";
      sa[62] = "1060";
      sa[63] = "1061";
      sa[64] = "1062";
      sa[65] = "1063";
      sa[66] = "1064";
      sa[67] = "1065";
      sa[68] = "1066";
      sa[69] = "1067";
      sa[70] = "1068";
      sa[71] = "1069";
      sa[72] = "107";
      sa[73] = "1070";
      sa[74] = "1071";
      sa[75] = "1072";
      sa[76] = "1073";
      sa[77] = "1074";
      sa[78] = "1075";
      sa[79] = "1076";
      sa[80] = "1077";
      sa[81] = "1078";
      sa[82] = "1079";
      sa[83] = "108";
      sa[84] = "1080";
      sa[85] = "1081";
      sa[86] = "1082";
      sa[87] = "1083";
      sa[88] = "1084";
      sa[89] = "1085";
      sa[90] = "1086";
      sa[91] = "1087";
      sa[92] = "1088";
      sa[93] = "1089";
      sa[94] = "109";
      sa[95] = "1090";
      sa[96] = "1092";
      sa[97] = "1093";
      sa[98] = "1094";
      sa[99] = "1095";
      sa[100] = "1096";
      sa[101] = "1097";
      sa[102] = "1098";
      sa[103] = "11";
      sa[104] = "110";
      sa[105] = "1103";
      sa[106] = "1104";
      sa[107] = "1105";
      sa[108] = "1106";
      sa[109] = "1107";
      sa[110] = "1109";
      sa[111] = "111";
      sa[112] = "1110";
      sa[113] = "1111";
      sa[114] = "1112";
      sa[115] = "1113";
      sa[116] = "1114";
      sa[117] = "1115";
      sa[118] = "1116";
      sa[119] = "1117";
      sa[120] = "1118";
      sa[121] = "1119";
      sa[122] = "112";
      sa[123] = "1120";
      sa[124] = "1121";
      sa[125] = "1123";
      sa[126] = "1124";
      sa[127] = "1125";
      sa[128] = "1126";
      sa[129] = "113";
      sa[130] = "1130";
      sa[131] = "1131";
      sa[132] = "1133";
      sa[133] = "1134";
      sa[134] = "1135";
      sa[135] = "1136";
      sa[136] = "1137";
      sa[137] = "114";
      sa[138] = "1141";
      sa[139] = "1142";
      sa[140] = "1143";
      sa[141] = "1144";
      sa[142] = "1145";
      sa[143] = "1146";
      sa[144] = "1147";
      sa[145] = "1148";
      sa[146] = "1149";
      sa[147] = "115";
      sa[148] = "1150";
      sa[149] = "1151";
      sa[150] = "1153";
      sa[151] = "1154";
      sa[152] = "1155";
      sa[153] = "1156";
      sa[154] = "1157";
      sa[155] = "1158";
      sa[156] = "1159";
      sa[157] = "116";
      sa[158] = "1161";
      sa[159] = "1162";
      sa[160] = "1163";
      sa[161] = "1164";
      sa[162] = "1165";
      sa[163] = "1166";
      sa[164] = "1167";
      sa[165] = "1168";
      sa[166] = "1169";
      sa[167] = "117";
      sa[168] = "1170";
      sa[169] = "1171";
      sa[170] = "1172";
      sa[171] = "1174";
      sa[172] = "1175";
      sa[173] = "1176";
      sa[174] = "1177";
      sa[175] = "1178";
      sa[176] = "1179";
      sa[177] = "118";
      sa[178] = "1181";
      sa[179] = "1182";
      sa[180] = "1183";
      sa[181] = "1184";
      sa[182] = "1186";
      sa[183] = "1187";
      sa[184] = "1188";
      sa[185] = "1189";
      sa[186] = "119";
      sa[187] = "1192";
      sa[188] = "1193";
      sa[189] = "1194";
      sa[190] = "1195";
      sa[191] = "1198";
      sa[192] = "1199";
      sa[193] = "12";
      sa[194] = "120";
      sa[195] = "1201";
      sa[196] = "1202";
      sa[197] = "1204";
      sa[198] = "1205";
      sa[199] = "1206";
      sa[200] = "1208";
      sa[201] = "1209";
      sa[202] = "121";
      sa[203] = "1210";
      sa[204] = "1211";
      sa[205] = "1212";
      sa[206] = "1213";
      sa[207] = "1214";
      sa[208] = "1215";
      sa[209] = "1216";
      sa[210] = "1217";
      sa[211] = "1218";
      sa[212] = "1219";
      sa[213] = "122";
      sa[214] = "1220";
      sa[215] = "1221";
      sa[216] = "1222";
      sa[217] = "1223";
      sa[218] = "1224";
      sa[219] = "1226";
      sa[220] = "1228";
      sa[221] = "1229";
      sa[222] = "123";
      sa[223] = "1230";
      sa[224] = "1231";
      sa[225] = "1232";
      sa[226] = "1233";
      sa[227] = "1234";
      sa[228] = "1235";
      sa[229] = "1236";
      sa[230] = "1237";
      sa[231] = "1238";
      sa[232] = "1239";
      sa[233] = "124";
      sa[234] = "1240";
      sa[235] = "1241";
      sa[236] = "1242";
      sa[237] = "1243";
      sa[238] = "1244";
      sa[239] = "1245";
      sa[240] = "1247";
      sa[241] = "1249";
      sa[242] = "125";
      sa[243] = "1250";
      sa[244] = "1253";
      sa[245] = "1254";
      sa[246] = "1255";
      sa[247] = "1256";
      sa[248] = "1257";
      sa[249] = "1258";
      sa[250] = "126";
      sa[251] = "1261";
      sa[252] = "1262";
      sa[253] = "1264";
      sa[254] = "1265";
      sa[255] = "1266";
      sa[256] = "1267";
      sa[257] = "1268";
      sa[258] = "1269";
      sa[259] = "127";
      sa[260] = "1270";
      sa[261] = "1271";
      sa[262] = "1272";
      sa[263] = "1275";
      sa[264] = "1276";
      sa[265] = "1277";
      sa[266] = "1278";
      sa[267] = "1279";
      sa[268] = "128";
      sa[269] = "1280";
      sa[270] = "1282";
      sa[271] = "1285";
      sa[272] = "1286";
      sa[273] = "1287";
      sa[274] = "1288";
      sa[275] = "1289";
      sa[276] = "129";
      sa[277] = "1290";
      sa[278] = "1291";
      sa[279] = "1292";
      sa[280] = "1293";
      sa[281] = "1295";
      sa[282] = "1296";
      sa[283] = "1297";
      sa[284] = "1298";
      sa[285] = "130";
      sa[286] = "1300";
      sa[287] = "1303";
      sa[288] = "1304";
      sa[289] = "1305";
      sa[290] = "1306";
      sa[291] = "1307";
      sa[292] = "1308";
      sa[293] = "1309";
      sa[294] = "131";
      sa[295] = "1311";
      sa[296] = "1312";
      sa[297] = "1314";
      sa[298] = "1315";
      sa[299] = "1317";
      sa[300] = "1318";
      sa[301] = "1319";
      sa[302] = "132";
      sa[303] = "1320";
      sa[304] = "1322";
      sa[305] = "1324";
      sa[306] = "1326";
      sa[307] = "1327";
      sa[308] = "1328";
      sa[309] = "1329";
      sa[310] = "133";
      sa[311] = "1330";
      sa[312] = "1331";
      sa[313] = "1332";
      sa[314] = "1333";
      sa[315] = "1337";
      sa[316] = "1338";
      sa[317] = "1339";
      sa[318] = "134";
      sa[319] = "1340";
      sa[320] = "1341";
      sa[321] = "1342";
      sa[322] = "1343";
      sa[323] = "1348";
      sa[324] = "135";
      sa[325] = "1350";
      sa[326] = "1353";
      sa[327] = "1355";
      sa[328] = "1359";
      sa[329] = "136";
      sa[330] = "1361";
      sa[331] = "1362";
      sa[332] = "1364";
      sa[333] = "1369";
      sa[334] = "137";
      sa[335] = "1371";
      sa[336] = "1372";
      sa[337] = "1376";
      sa[338] = "1377";
      sa[339] = "138";
      sa[340] = "1383";
      sa[341] = "1384";
      sa[342] = "1385";
      sa[343] = "1389";
      sa[344] = "139";
      sa[345] = "1390";
      sa[346] = "1393";
      sa[347] = "1394";
      sa[348] = "1395";
      sa[349] = "1396";
      sa[350] = "1397";
      sa[351] = "1398";
      sa[352] = "1399";
      sa[353] = "14";
      sa[354] = "140";
      sa[355] = "1400";
      sa[356] = "1401";
      sa[357] = "1402";
      sa[358] = "1403";
      sa[359] = "1404";
      sa[360] = "1405";
      sa[361] = "1406";
      sa[362] = "1407";
      sa[363] = "1408";
      sa[364] = "1409";
      sa[365] = "141";
      sa[366] = "1410";
      sa[367] = "1411";
      sa[368] = "1412";
      sa[369] = "1413";
      sa[370] = "1414";
      sa[371] = "1415";
      sa[372] = "1416";
      sa[373] = "1417";
      sa[374] = "1418";
      sa[375] = "142";
      sa[376] = "1420";
      sa[377] = "1421";
      sa[378] = "1422";
      sa[379] = "1423";
      sa[380] = "1424";
      sa[381] = "1425";
      sa[382] = "1426";
      sa[383] = "1427";
      sa[384] = "1428";
      sa[385] = "1429";
      sa[386] = "143";
      sa[387] = "1430";
      sa[388] = "1431";
      sa[389] = "1432";
      sa[390] = "1433";
      sa[391] = "1434";
      sa[392] = "1435";
      sa[393] = "1436";
      sa[394] = "1438";
      sa[395] = "1439";
      sa[396] = "144";
      sa[397] = "1440";
      sa[398] = "1441";
      sa[399] = "1442";
      sa[400] = "1443";
      sa[401] = "1445";
      sa[402] = "1446";
      sa[403] = "1447";
      sa[404] = "1448";
      sa[405] = "1449";
      sa[406] = "145";
      sa[407] = "1450";
      sa[408] = "1451";
      sa[409] = "1453";
      sa[410] = "1454";
      sa[411] = "1455";
      sa[412] = "1456";
      sa[413] = "1457";
      sa[414] = "1458";
      sa[415] = "1459";
      sa[416] = "146";
      sa[417] = "1460";
      sa[418] = "1461";
      sa[419] = "1462";
      sa[420] = "1463";
      sa[421] = "1464";
      sa[422] = "1465";
      sa[423] = "1466";
      sa[424] = "1467";
      sa[425] = "1468";
      sa[426] = "147";
      sa[427] = "1470";
      sa[428] = "1471";
      sa[429] = "1472";
      sa[430] = "1473";
      sa[431] = "1474";
      sa[432] = "1475";
      sa[433] = "1476";
      sa[434] = "1477";
      sa[435] = "1478";
      sa[436] = "1479";
      sa[437] = "148";
      sa[438] = "1480";
      sa[439] = "1481";
      sa[440] = "1482";
      sa[441] = "1483";
      sa[442] = "1484";
      sa[443] = "1485";
      sa[444] = "1486";
      sa[445] = "1487";
      sa[446] = "1488";
      sa[447] = "1489";
      sa[448] = "149";
      sa[449] = "1490";
      sa[450] = "1491";
      sa[451] = "1492";
      sa[452] = "1493";
      sa[453] = "1494";
      sa[454] = "1496";
      sa[455] = "1497";
      sa[456] = "1498";
      sa[457] = "15";
      sa[458] = "150";
      sa[459] = "1500";
      sa[460] = "1502";
      sa[461] = "1503";
      sa[462] = "1504";
      sa[463] = "1505";
      sa[464] = "1506";
      sa[465] = "1507";
      sa[466] = "1508";
      sa[467] = "1509";
      sa[468] = "151";
      sa[469] = "1510";
      sa[470] = "1511";
      sa[471] = "1512";
      sa[472] = "1513";
      sa[473] = "1514";
      sa[474] = "1515";
      sa[475] = "1516";
      sa[476] = "1517";
      sa[477] = "1518";
      sa[478] = "1519";
      sa[479] = "152";
      sa[480] = "1521";
      sa[481] = "1522";
      sa[482] = "1524";
      sa[483] = "1525";
      sa[484] = "1526";
      sa[485] = "1527";
      sa[486] = "1528";
      sa[487] = "1529";
      sa[488] = "153";
      sa[489] = "1530";
      sa[490] = "1531";
      sa[491] = "1532";
      sa[492] = "1534";
      sa[493] = "1536";
      sa[494] = "1538";
      sa[495] = "154";
      sa[496] = "1540";
      sa[497] = "1541";
      sa[498] = "1542";
      sa[499] = "1543";
      sa[500] = "1545";
      sa[501] = "1546";
      sa[502] = "1547";
      sa[503] = "1548";
      sa[504] = "1549";
      sa[505] = "155";
      sa[506] = "1550";
      sa[507] = "1551";
      sa[508] = "1552";
      sa[509] = "1553";
      sa[510] = "1554";
      sa[511] = "1556";
      sa[512] = "1558";
      sa[513] = "156";
      sa[514] = "1560";
      sa[515] = "1561";
      sa[516] = "1565";
      sa[517] = "1566";
      sa[518] = "1567";
      sa[519] = "1568";
      sa[520] = "157";
      sa[521] = "1570";
      sa[522] = "1573";
      sa[523] = "1574";
      sa[524] = "1575";
      sa[525] = "1576";
      sa[526] = "1577";
      sa[527] = "1578";
      sa[528] = "1579";
      sa[529] = "158";
      sa[530] = "1580";
      sa[531] = "1582";
      sa[532] = "1583";
      sa[533] = "1585";
      sa[534] = "1586";
      sa[535] = "1587";
      sa[536] = "1589";
      sa[537] = "159";
      sa[538] = "1590";
      sa[539] = "1593";
      sa[540] = "1594";
      sa[541] = "1596";
      sa[542] = "1597";
      sa[543] = "1598";
      sa[544] = "1599";
      sa[545] = "16";
      sa[546] = "160";
      sa[547] = "1600";
      sa[548] = "1601";
      sa[549] = "1602";
      sa[550] = "1603";
      sa[551] = "1604";
      sa[552] = "1605";
      sa[553] = "1606";
      sa[554] = "1607";
      sa[555] = "1608";
      sa[556] = "1609";
      sa[557] = "161";
      sa[558] = "1610";
      sa[559] = "1611";
      sa[560] = "1613";
      sa[561] = "1614";
      sa[562] = "1616";
      sa[563] = "1617";
      sa[564] = "1618";
      sa[565] = "162";
      sa[566] = "1621";
      sa[567] = "1622";
      sa[568] = "1623";
      sa[569] = "1624";
      sa[570] = "1625";
      sa[571] = "1626";
      sa[572] = "1628";
      sa[573] = "1629";
      sa[574] = "163";
      sa[575] = "1630";
      sa[576] = "1631";
      sa[577] = "1632";
      sa[578] = "1633";
      sa[579] = "1635";
      sa[580] = "1636";
      sa[581] = "1637";
      sa[582] = "1638";
      sa[583] = "1639";
      sa[584] = "164";
      sa[585] = "1640";
      sa[586] = "1642";
      sa[587] = "1646";
      sa[588] = "1647";
      sa[589] = "1648";
      sa[590] = "1649";
      sa[591] = "165";
      sa[592] = "1650";
      sa[593] = "1651";
      sa[594] = "1653";
      sa[595] = "1654";
      sa[596] = "1655";
      sa[597] = "1656";
      sa[598] = "1658";
      sa[599] = "1659";
      sa[600] = "166";
      sa[601] = "1660";
      sa[602] = "1661";
      sa[603] = "1662";
      sa[604] = "1663";
      sa[605] = "1665";
      sa[606] = "1666";
      sa[607] = "1667";
      sa[608] = "1668";
      sa[609] = "1669";
      sa[610] = "167";
      sa[611] = "1670";
      sa[612] = "1671";
      sa[613] = "1673";
      sa[614] = "1674";
      sa[615] = "1675";
      sa[616] = "1677";
      sa[617] = "1678";
      sa[618] = "1679";
      sa[619] = "168";
      sa[620] = "1680";
      sa[621] = "1681";
      sa[622] = "1682";
      sa[623] = "1683";
      sa[624] = "1684";
      sa[625] = "1685";
      sa[626] = "1686";
      sa[627] = "1687";
      sa[628] = "1688";
      sa[629] = "1689";
      sa[630] = "169";
      sa[631] = "1690";
      sa[632] = "1691";
      sa[633] = "1693";
      sa[634] = "1695";
      sa[635] = "1696";
      sa[636] = "1697";
      sa[637] = "1698";
      sa[638] = "17";
      sa[639] = "170";
      sa[640] = "1700";
      sa[641] = "1701";
      sa[642] = "1702";
      sa[643] = "1704";
      sa[644] = "1705";
      sa[645] = "1706";
      sa[646] = "1708";
      sa[647] = "1709";
      sa[648] = "171";
      sa[649] = "1710";
      sa[650] = "1712";
      sa[651] = "172";
      sa[652] = "1720";
      sa[653] = "1721";
      sa[654] = "1722";
      sa[655] = "1729";
      sa[656] = "173";
      sa[657] = "1731";
      sa[658] = "1733";
      sa[659] = "1735";
      sa[660] = "1737";
      sa[661] = "1739";
      sa[662] = "174";
      sa[663] = "1743";
      sa[664] = "1744";
      sa[665] = "1745";
      sa[666] = "1746";
      sa[667] = "1747";
      sa[668] = "175";
      sa[669] = "1752";
      sa[670] = "1754";
      sa[671] = "1756";
      sa[672] = "1758";
      sa[673] = "1759";
      sa[674] = "176";
      sa[675] = "1760";
      sa[676] = "1763";
      sa[677] = "1764";
      sa[678] = "1765";
      sa[679] = "1766";
      sa[680] = "1768";
      sa[681] = "1769";
      sa[682] = "177";
      sa[683] = "1772";
      sa[684] = "1773";
      sa[685] = "1774";
      sa[686] = "1776";
      sa[687] = "1779";
      sa[688] = "178";
      sa[689] = "1781";
      sa[690] = "1783";
      sa[691] = "1784";
      sa[692] = "1785";
      sa[693] = "1787";
      sa[694] = "1789";
      sa[695] = "179";
      sa[696] = "1792";
      sa[697] = "18";
      sa[698] = "180";
      sa[699] = "1800";
      sa[700] = "1802";
      sa[701] = "1803";
      sa[702] = "1804";
      sa[703] = "1806";
      sa[704] = "1809";
      sa[705] = "181";
      sa[706] = "1810";
      sa[707] = "1811";
      sa[708] = "1812";
      sa[709] = "1813";
      sa[710] = "1815";
      sa[711] = "1817";
      sa[712] = "1819";
      sa[713] = "182";
      sa[714] = "1827";
      sa[715] = "1828";
      sa[716] = "183";
      sa[717] = "1830";
      sa[718] = "1835";
      sa[719] = "1837";
      sa[720] = "1838";
      sa[721] = "184";
      sa[722] = "1842";
      sa[723] = "1843";
      sa[724] = "1844";
      sa[725] = "1845";
      sa[726] = "1847";
      sa[727] = "1849";
      sa[728] = "185";
      sa[729] = "1850";
      sa[730] = "1852";
      sa[731] = "1853";
      sa[732] = "1854";
      sa[733] = "1855";
      sa[734] = "1856";
      sa[735] = "1858";
      sa[736] = "1859";
      sa[737] = "186";
      sa[738] = "1860";
      sa[739] = "1862";
      sa[740] = "1863";
      sa[741] = "1865";
      sa[742] = "1866";
      sa[743] = "1867";
      sa[744] = "187";
      sa[745] = "1870";
      sa[746] = "1873";
      sa[747] = "1876";
      sa[748] = "188";
      sa[749] = "1880";
      sa[750] = "1881";
      sa[751] = "1884";
      sa[752] = "1885";
      sa[753] = "1886";
      sa[754] = "1887";
      sa[755] = "1890";
      sa[756] = "1897";
      sa[757] = "19";
      sa[758] = "190";
      sa[759] = "1904";
      sa[760] = "1907";
      sa[761] = "191";
      sa[762] = "1910";
      sa[763] = "1912";
      sa[764] = "1915";
      sa[765] = "1916";
      sa[766] = "1917";
      sa[767] = "1918";
      sa[768] = "1919";
      sa[769] = "192";
      sa[770] = "1921";
      sa[771] = "1922";
      sa[772] = "1924";
      sa[773] = "1925";
      sa[774] = "1926";
      sa[775] = "1927";
      sa[776] = "1928";
      sa[777] = "1929";
      sa[778] = "193";
      sa[779] = "1930";
      sa[780] = "1931";
      sa[781] = "1932";
      sa[782] = "1933";
      sa[783] = "1936";
      sa[784] = "1937";
      sa[785] = "1938";
      sa[786] = "1939";
      sa[787] = "194";
      sa[788] = "1940";
      sa[789] = "1942";
      sa[790] = "1943";
      sa[791] = "1944";
      sa[792] = "1945";
      sa[793] = "1947";
      sa[794] = "1948";
      sa[795] = "1949";
      sa[796] = "195";
      sa[797] = "1950";
      sa[798] = "1951";
      sa[799] = "1953";
      sa[800] = "1956";
      sa[801] = "1957";
      sa[802] = "1959";
      sa[803] = "196";
      sa[804] = "1960";
      sa[805] = "1961";
      sa[806] = "1965";
      sa[807] = "1968";
      sa[808] = "1969";
      sa[809] = "197";
      sa[810] = "1972";
      sa[811] = "1973";
      sa[812] = "1975";
      sa[813] = "1976";
      sa[814] = "1977";
      sa[815] = "1978";
      sa[816] = "198";
      sa[817] = "1980";
      sa[818] = "1981";
      sa[819] = "1984";
      sa[820] = "1986";
      sa[821] = "1987";
      sa[822] = "1988";
      sa[823] = "199";
      sa[824] = "1997";
      sa[825] = "1999";
      sa[826] = "2";
      sa[827] = "20";
      sa[828] = "200";
      sa[829] = "2004";
      sa[830] = "2005";
      sa[831] = "2006";
      sa[832] = "2007";
      sa[833] = "2009";
      sa[834] = "201";
      sa[835] = "2010";
      sa[836] = "2011";
      sa[837] = "2013";
      sa[838] = "2014";
      sa[839] = "2015";
      sa[840] = "2018";
      sa[841] = "2019";
      sa[842] = "202";
      sa[843] = "2020";
      sa[844] = "2021";
      sa[845] = "2022";
      sa[846] = "2023";
      sa[847] = "2024";
      sa[848] = "2025";
      sa[849] = "2026";
      sa[850] = "2027";
      sa[851] = "2028";
      sa[852] = "2029";
      sa[853] = "203";
      sa[854] = "2030";
      sa[855] = "2031";
      sa[856] = "2032";
      sa[857] = "2033";
      sa[858] = "2034";
      sa[859] = "2035";
      sa[860] = "2036";
      sa[861] = "2037";
      sa[862] = "2038";
      sa[863] = "2039";
      sa[864] = "204";
      sa[865] = "2040";
      sa[866] = "2041";
      sa[867] = "2042";
      sa[868] = "2043";
      sa[869] = "2044";
      sa[870] = "2045";
      sa[871] = "2046";
      sa[872] = "2047";
      sa[873] = "2048";
      sa[874] = "2049";
      sa[875] = "205";
      sa[876] = "2050";
      sa[877] = "2051";
      sa[878] = "2054";
      sa[879] = "206";
      sa[880] = "2064";
      sa[881] = "2067";
      sa[882] = "207";
      sa[883] = "2071";
      sa[884] = "2072";
      sa[885] = "2073";
      sa[886] = "208";
      sa[887] = "2080";
      sa[888] = "2081";
      sa[889] = "2082";
      sa[890] = "2083";
      sa[891] = "2087";
      sa[892] = "2089";
      sa[893] = "209";
      sa[894] = "2091";
      sa[895] = "2092";
      sa[896] = "2093";
      sa[897] = "2094";
      sa[898] = "2095";
      sa[899] = "2096";
      sa[900] = "2097";
      sa[901] = "2099";
      sa[902] = "21";
      sa[903] = "210";
      sa[904] = "2101";
      sa[905] = "2103";
      sa[906] = "2104";
      sa[907] = "2105";
      sa[908] = "2108";
      sa[909] = "2109";
      sa[910] = "211";
      sa[911] = "2110";
      sa[912] = "2111";
      sa[913] = "2112";
      sa[914] = "2113";
      sa[915] = "2114";
      sa[916] = "2115";
      sa[917] = "2116";
      sa[918] = "2117";
      sa[919] = "2118";
      sa[920] = "2119";
      sa[921] = "212";
      sa[922] = "2120";
      sa[923] = "2121";
      sa[924] = "2122";
      sa[925] = "2123";
      sa[926] = "2124";
      sa[927] = "2125";
      sa[928] = "2126";
      sa[929] = "2127";
      sa[930] = "2128";
      sa[931] = "2129";
      sa[932] = "213";
      sa[933] = "2130";
      sa[934] = "2131";
      sa[935] = "2132";
      sa[936] = "2133";
      sa[937] = "2134";
      sa[938] = "2135";
      sa[939] = "2136";
      sa[940] = "2137";
      sa[941] = "2138";
      sa[942] = "2139";
      sa[943] = "214";
      sa[944] = "2140";
      sa[945] = "2141";
      sa[946] = "2142";
      sa[947] = "2143";
      sa[948] = "2144";
      sa[949] = "215";
      sa[950] = "2151";
      sa[951] = "2153";
      sa[952] = "2157";
      sa[953] = "2158";
      sa[954] = "216";
      sa[955] = "2160";
      sa[956] = "2161";
      sa[957] = "2162";
      sa[958] = "2163";
      sa[959] = "2164";
      sa[960] = "2165";
      sa[961] = "2166";
      sa[962] = "2167";
      sa[963] = "2168";
      sa[964] = "2169";
      sa[965] = "217";
      sa[966] = "2170";
      sa[967] = "2171";
      sa[968] = "2172";
      sa[969] = "2173";
      sa[970] = "2174";
      sa[971] = "2175";
      sa[972] = "2176";
      sa[973] = "2177";
      sa[974] = "2178";
      sa[975] = "2179";
      sa[976] = "218";
      sa[977] = "2180";
      sa[978] = "2181";
      sa[979] = "2182";
      sa[980] = "2183";
      sa[981] = "2184";
      sa[982] = "2185";
      sa[983] = "2186";
      sa[984] = "2187";
      sa[985] = "2188";
      sa[986] = "2189";
      sa[987] = "219";
      sa[988] = "2191";
      sa[989] = "2192";
      sa[990] = "2193";
      sa[991] = "2194";
      sa[992] = "2195";
      sa[993] = "2196";
      sa[994] = "2197";
      sa[995] = "2199";
      sa[996] = "22";
      sa[997] = "220";
      sa[998] = "2200";
      sa[999] = "2201";
      sa[1000] = "2202";
      sa[1001] = "2203";
      sa[1002] = "2205";
      sa[1003] = "2206";
      sa[1004] = "2208";
      sa[1005] = "221";
      sa[1006] = "2210";
      sa[1007] = "2211";
      sa[1008] = "2213";
      sa[1009] = "2217";
      sa[1010] = "2218";
      sa[1011] = "2219";
      sa[1012] = "222";
      sa[1013] = "2222";
      sa[1014] = "2225";
      sa[1015] = "223";
      sa[1016] = "2230";
      sa[1017] = "2231";
      sa[1018] = "2232";
      sa[1019] = "2235";
      sa[1020] = "2238";
      sa[1021] = "224";
      sa[1022] = "2248";
      sa[1023] = "2249";
      sa[1024] = "225";
      sa[1025] = "2251";
      sa[1026] = "2253";
      sa[1027] = "226";
      sa[1028] = "2261";
      sa[1029] = "2262";
      sa[1030] = "2263";
      sa[1031] = "2264";
      sa[1032] = "2266";
      sa[1033] = "2268";
      sa[1034] = "2269";
      sa[1035] = "227";
      sa[1036] = "2271";
      sa[1037] = "2272";
      sa[1038] = "2273";
      sa[1039] = "2275";
      sa[1040] = "2278";
      sa[1041] = "2279";
      sa[1042] = "228";
      sa[1043] = "2280";
      sa[1044] = "2281";
      sa[1045] = "2282";
      sa[1046] = "2283";
      sa[1047] = "2284";
      sa[1048] = "2285";
      sa[1049] = "2286";
      sa[1050] = "229";
      sa[1051] = "2290";
      sa[1052] = "2291";
      sa[1053] = "2293";
      sa[1054] = "2294";
      sa[1055] = "2295";
      sa[1056] = "2296";
      sa[1057] = "2297";
      sa[1058] = "2298";
      sa[1059] = "2299";
      sa[1060] = "23";
      sa[1061] = "230";
      sa[1062] = "2300";
      sa[1063] = "2303";
      sa[1064] = "2304";
      sa[1065] = "2309";
      sa[1066] = "231";
      sa[1067] = "2310";
      sa[1068] = "2311";
      sa[1069] = "2312";
      sa[1070] = "2315";
      sa[1071] = "2317";
      sa[1072] = "2318";
      sa[1073] = "2319";
      sa[1074] = "232";
      sa[1075] = "2320";
      sa[1076] = "2323";
      sa[1077] = "233";
      sa[1078] = "2333";
      sa[1079] = "2334";
      sa[1080] = "2336";
      sa[1081] = "2337";
      sa[1082] = "234";
      sa[1083] = "2340";
      sa[1084] = "2344";
      sa[1085] = "2347";
      sa[1086] = "2349";
      sa[1087] = "235";
      sa[1088] = "2351";
      sa[1089] = "2353";
      sa[1090] = "2354";
      sa[1091] = "2357";
      sa[1092] = "2358";
      sa[1093] = "2359";
      sa[1094] = "236";
      sa[1095] = "2360";
      sa[1096] = "2361";
      sa[1097] = "2362";
      sa[1098] = "2363";
      sa[1099] = "2364";
      sa[1100] = "2366";
      sa[1101] = "2367";
      sa[1102] = "2368";
      sa[1103] = "2369";
      sa[1104] = "237";
      sa[1105] = "2370";
      sa[1106] = "2373";
      sa[1107] = "2374";
      sa[1108] = "2377";
      sa[1109] = "2378";
      sa[1110] = "2379";
      sa[1111] = "238";
      sa[1112] = "2381";
      sa[1113] = "2382";
      sa[1114] = "2383";
      sa[1115] = "2384";
      sa[1116] = "2385";
      sa[1117] = "2386";
      sa[1118] = "2387";
      sa[1119] = "2388";
      sa[1120] = "239";
      sa[1121] = "2393";
      sa[1122] = "2395";
      sa[1123] = "2398";
      sa[1124] = "2399";
      sa[1125] = "24";
      sa[1126] = "240";
      sa[1127] = "2400";
      sa[1128] = "2402";
      sa[1129] = "2403";
      sa[1130] = "2404";
      sa[1131] = "2405";
      sa[1132] = "2406";
      sa[1133] = "2409";
      sa[1134] = "241";
      sa[1135] = "2410";
      sa[1136] = "2412";
      sa[1137] = "2414";
      sa[1138] = "2416";
      sa[1139] = "2417";
      sa[1140] = "2418";
      sa[1141] = "242";
      sa[1142] = "2423";
      sa[1143] = "2425";
      sa[1144] = "243";
      sa[1145] = "2433";
      sa[1146] = "2434";
      sa[1147] = "2437";
      sa[1148] = "244";
      sa[1149] = "2440";
      sa[1150] = "2441";
      sa[1151] = "2442";
      sa[1152] = "2443";
      sa[1153] = "2444";
      sa[1154] = "2445";
      sa[1155] = "2449";
      sa[1156] = "245";
      sa[1157] = "2450";
      sa[1158] = "2451";
      sa[1159] = "2452";
      sa[1160] = "2453";
      sa[1161] = "2454";
      sa[1162] = "2456";
      sa[1163] = "2457";
      sa[1164] = "2458";
      sa[1165] = "2459";
      sa[1166] = "246";
      sa[1167] = "2460";
      sa[1168] = "2463";
      sa[1169] = "2465";
      sa[1170] = "2466";
      sa[1171] = "2467";
      sa[1172] = "2469";
      sa[1173] = "247";
      sa[1174] = "2470";
      sa[1175] = "2471";
      sa[1176] = "2472";
      sa[1177] = "2474";
      sa[1178] = "2476";
      sa[1179] = "2479";
      sa[1180] = "248";
      sa[1181] = "2480";
      sa[1182] = "2483";
      sa[1183] = "2485";
      sa[1184] = "2488";
      sa[1185] = "2489";
      sa[1186] = "249";
      sa[1187] = "2494";
      sa[1188] = "2496";
      sa[1189] = "2498";
      sa[1190] = "2499";
      sa[1191] = "25";
      sa[1192] = "250";
      sa[1193] = "2500";
      sa[1194] = "2503";
      sa[1195] = "2504";
      sa[1196] = "2506";
      sa[1197] = "2507";
      sa[1198] = "251";
      sa[1199] = "2510";
      sa[1200] = "2512";
      sa[1201] = "2515";
      sa[1202] = "2516";
      sa[1203] = "2519";
      sa[1204] = "252";
      sa[1205] = "2521";
      sa[1206] = "2523";
      sa[1207] = "2524";
      sa[1208] = "2525";
      sa[1209] = "2528";
      sa[1210] = "2529";
      sa[1211] = "253";
      sa[1212] = "2530";
      sa[1213] = "2532";
      sa[1214] = "2533";
      sa[1215] = "2535";
      sa[1216] = "2538";
      sa[1217] = "2539";
      sa[1218] = "254";
      sa[1219] = "2540";
      sa[1220] = "2541";
      sa[1221] = "2542";
      sa[1222] = "2543";
      sa[1223] = "2544";
      sa[1224] = "2545";
      sa[1225] = "2546";
      sa[1226] = "2548";
      sa[1227] = "2549";
      sa[1228] = "255";
      sa[1229] = "2550";
      sa[1230] = "2551";
      sa[1231] = "2553";
      sa[1232] = "2554";
      sa[1233] = "2555";
      sa[1234] = "2558";
      sa[1235] = "256";
      sa[1236] = "2560";
      sa[1237] = "2561";
      sa[1238] = "2566";
      sa[1239] = "2569";
      sa[1240] = "257";
      sa[1241] = "2571";
      sa[1242] = "2572";
      sa[1243] = "2574";
      sa[1244] = "2575";
      sa[1245] = "2576";
      sa[1246] = "2577";
      sa[1247] = "258";
      sa[1248] = "2581";
      sa[1249] = "2583";
      sa[1250] = "2584";
      sa[1251] = "2587";
      sa[1252] = "2588";
      sa[1253] = "259";
      sa[1254] = "2590";
      sa[1255] = "2593";
      sa[1256] = "2594";
      sa[1257] = "2596";
      sa[1258] = "2597";
      sa[1259] = "2598";
      sa[1260] = "26";
      sa[1261] = "260";
      sa[1262] = "2600";
      sa[1263] = "2601";
      sa[1264] = "2602";
      sa[1265] = "2606";
      sa[1266] = "2608";
      sa[1267] = "2609";
      sa[1268] = "261";
      sa[1269] = "2611";
      sa[1270] = "2612";
      sa[1271] = "2613";
      sa[1272] = "2614";
      sa[1273] = "2616";
      sa[1274] = "262";
      sa[1275] = "2620";
      sa[1276] = "2621";
      sa[1277] = "2622";
      sa[1278] = "2623";
      sa[1279] = "2624";
      sa[1280] = "2627";
      sa[1281] = "2628";
      sa[1282] = "263";
      sa[1283] = "2630";
      sa[1284] = "2631";
      sa[1285] = "2632";
      sa[1286] = "2633";
      sa[1287] = "2634";
      sa[1288] = "2635";
      sa[1289] = "2636";
      sa[1290] = "2637";
      sa[1291] = "2639";
      sa[1292] = "264";
      sa[1293] = "2640";
      sa[1294] = "2643";
      sa[1295] = "2644";
      sa[1296] = "2645";
      sa[1297] = "2646";
      sa[1298] = "2648";
      sa[1299] = "265";
      sa[1300] = "2656";
      sa[1301] = "2657";
      sa[1302] = "2658";
      sa[1303] = "2659";
      sa[1304] = "266";
      sa[1305] = "2660";
      sa[1306] = "2662";
      sa[1307] = "2663";
      sa[1308] = "2664";
      sa[1309] = "267";
      sa[1310] = "2673";
      sa[1311] = "268";
      sa[1312] = "2681";
      sa[1313] = "2683";
      sa[1314] = "2684";
      sa[1315] = "2686";
      sa[1316] = "269";
      sa[1317] = "2692";
      sa[1318] = "2693";
      sa[1319] = "2695";
      sa[1320] = "2699";
      sa[1321] = "27";
      sa[1322] = "270";
      sa[1323] = "2701";
      sa[1324] = "2702";
      sa[1325] = "2703";
      sa[1326] = "2704";
      sa[1327] = "2705";
      sa[1328] = "2707";
      sa[1329] = "2709";
      sa[1330] = "271";
      sa[1331] = "2710";
      sa[1332] = "2711";
      sa[1333] = "2712";
      sa[1334] = "2713";
      sa[1335] = "2714";
      sa[1336] = "2715";
      sa[1337] = "2716";
      sa[1338] = "2719";
      sa[1339] = "272";
      sa[1340] = "2720";
      sa[1341] = "2722";
      sa[1342] = "2724";
      sa[1343] = "2725";
      sa[1344] = "2726";
      sa[1345] = "2727";
      sa[1346] = "2729";
      sa[1347] = "273";
      sa[1348] = "2730";
      sa[1349] = "2731";
      sa[1350] = "2732";
      sa[1351] = "2733";
      sa[1352] = "2734";
      sa[1353] = "2739";
      sa[1354] = "274";
      sa[1355] = "2741";
      sa[1356] = "2742";
      sa[1357] = "2745";
      sa[1358] = "2747";
      sa[1359] = "2749";
      sa[1360] = "275";
      sa[1361] = "2750";
      sa[1362] = "2751";
      sa[1363] = "2752";
      sa[1364] = "2753";
      sa[1365] = "2755";
      sa[1366] = "2757";
      sa[1367] = "2758";
      sa[1368] = "2759";
      sa[1369] = "276";
      sa[1370] = "2761";
      sa[1371] = "2763";
      sa[1372] = "2765";
      sa[1373] = "2767";
      sa[1374] = "2768";
      sa[1375] = "2769";
      sa[1376] = "277";
      sa[1377] = "2771";
      sa[1378] = "2773";
      sa[1379] = "2774";
      sa[1380] = "2775";
      sa[1381] = "2776";
      sa[1382] = "2779";
      sa[1383] = "278";
      sa[1384] = "2780";
      sa[1385] = "2781";
      sa[1386] = "2782";
      sa[1387] = "2784";
      sa[1388] = "2786";
      sa[1389] = "2787";
      sa[1390] = "2788";
      sa[1391] = "2789";
      sa[1392] = "279";
      sa[1393] = "2790";
      sa[1394] = "2792";
      sa[1395] = "2794";
      sa[1396] = "2795";
      sa[1397] = "2796";
      sa[1398] = "28";
      sa[1399] = "280";
      sa[1400] = "2801";
      sa[1401] = "2803";
      sa[1402] = "2804";
      sa[1403] = "2806";
      sa[1404] = "2807";
      sa[1405] = "2808";
      sa[1406] = "2809";
      sa[1407] = "281";
      sa[1408] = "2810";
      sa[1409] = "2811";
      sa[1410] = "2812";
      sa[1411] = "2813";
      sa[1412] = "2814";
      sa[1413] = "2816";
      sa[1414] = "2817";
      sa[1415] = "2818";
      sa[1416] = "282";
      sa[1417] = "2820";
      sa[1418] = "2821";
      sa[1419] = "2825";
      sa[1420] = "2829";
      sa[1421] = "283";
      sa[1422] = "2834";
      sa[1423] = "2835";
      sa[1424] = "2836";
      sa[1425] = "2837";
      sa[1426] = "2839";
      sa[1427] = "284";
      sa[1428] = "2840";
      sa[1429] = "2844";
      sa[1430] = "2847";
      sa[1431] = "285";
      sa[1432] = "2850";
      sa[1433] = "2851";
      sa[1434] = "2852";
      sa[1435] = "2854";
      sa[1436] = "286";
      sa[1437] = "2860";
      sa[1438] = "2862";
      sa[1439] = "2864";
      sa[1440] = "287";
      sa[1441] = "2870";
      sa[1442] = "2871";
      sa[1443] = "2873";
      sa[1444] = "2874";
      sa[1445] = "2875";
      sa[1446] = "2876";
      sa[1447] = "2877";
      sa[1448] = "2878";
      sa[1449] = "2879";
      sa[1450] = "288";
      sa[1451] = "2880";
      sa[1452] = "2884";
      sa[1453] = "2886";
      sa[1454] = "2888";
      sa[1455] = "2889";
      sa[1456] = "289";
      sa[1457] = "2890";
      sa[1458] = "2891";
      sa[1459] = "2894";
      sa[1460] = "2896";
      sa[1461] = "2899";
      sa[1462] = "29";
      sa[1463] = "290";
      sa[1464] = "2900";
      sa[1465] = "2901";
      sa[1466] = "2902";
      sa[1467] = "2905";
      sa[1468] = "2906";
      sa[1469] = "2907";
      sa[1470] = "291";
      sa[1471] = "2917";
      sa[1472] = "292";
      sa[1473] = "2926";
      sa[1474] = "2927";
      sa[1475] = "293";
      sa[1476] = "2932";
      sa[1477] = "294";
      sa[1478] = "2948";
      sa[1479] = "295";
      sa[1480] = "2951";
      sa[1481] = "2956";
      sa[1482] = "296";
      sa[1483] = "2961";
      sa[1484] = "2963";
      sa[1485] = "2964";
      sa[1486] = "2965";
      sa[1487] = "2968";
      sa[1488] = "2969";
      sa[1489] = "297";
      sa[1490] = "2970";
      sa[1491] = "2971";
      sa[1492] = "2972";
      sa[1493] = "2974";
      sa[1494] = "2975";
      sa[1495] = "2976";
      sa[1496] = "2979";
      sa[1497] = "298";
      sa[1498] = "2980";
      sa[1499] = "2982";
      sa[1500] = "2984";
      sa[1501] = "2985";
      sa[1502] = "2987";
      sa[1503] = "2988";
      sa[1504] = "299";
      sa[1505] = "2991";
      sa[1506] = "2992";
      sa[1507] = "2995";
      sa[1508] = "2997";
      sa[1509] = "2999";
      sa[1510] = "3";
      sa[1511] = "30";
      sa[1512] = "300";
      sa[1513] = "3003";
      sa[1514] = "3009";
      sa[1515] = "301";
      sa[1516] = "302";
      sa[1517] = "3026";
      sa[1518] = "303";
      sa[1519] = "304";
      sa[1520] = "3046";
      sa[1521] = "3047";
      sa[1522] = "3048";
      sa[1523] = "305";
      sa[1524] = "3050";
      sa[1525] = "3053";
      sa[1526] = "3058";
      sa[1527] = "306";
      sa[1528] = "3061";
      sa[1529] = "3062";
      sa[1530] = "3063";
      sa[1531] = "3065";
      sa[1532] = "3067";
      sa[1533] = "3068";
      sa[1534] = "307";
      sa[1535] = "3070";
      sa[1536] = "3073";
      sa[1537] = "3075";
      sa[1538] = "3077";
      sa[1539] = "308";
      sa[1540] = "3082";
      sa[1541] = "309";
      sa[1542] = "3099";
      sa[1543] = "31";
      sa[1544] = "310";
      sa[1545] = "311";
      sa[1546] = "312";
      sa[1547] = "3120";
      sa[1548] = "313";
      sa[1549] = "3134";
      sa[1550] = "3135";
      sa[1551] = "3137";
      sa[1552] = "314";
      sa[1553] = "3140";
      sa[1554] = "3142";
      sa[1555] = "3144";
      sa[1556] = "3145";
      sa[1557] = "3147";
      sa[1558] = "3149";
      sa[1559] = "315";
      sa[1560] = "3150";
      sa[1561] = "3153";
      sa[1562] = "3154";
      sa[1563] = "3155";
      sa[1564] = "316";
      sa[1565] = "3168";
      sa[1566] = "317";
      sa[1567] = "3170";
      sa[1568] = "318";
      sa[1569] = "319";
      sa[1570] = "32";
      sa[1571] = "320";
      sa[1572] = "321";
      sa[1573] = "322";
      sa[1574] = "3220";
      sa[1575] = "3222";
      sa[1576] = "3226";
      sa[1577] = "3228";
      sa[1578] = "323";
      sa[1579] = "3231";
      sa[1580] = "3232";
      sa[1581] = "3233";
      sa[1582] = "3234";
      sa[1583] = "3235";
      sa[1584] = "3236";
      sa[1585] = "3237";
      sa[1586] = "3238";
      sa[1587] = "3239";
      sa[1588] = "324";
      sa[1589] = "3240";
      sa[1590] = "3241";
      sa[1591] = "3244";
      sa[1592] = "3245";
      sa[1593] = "3247";
      sa[1594] = "3249";
      sa[1595] = "325";
      sa[1596] = "3250";
      sa[1597] = "3256";
      sa[1598] = "326";
      sa[1599] = "3266";
      sa[1600] = "327";
      sa[1601] = "328";
      sa[1602] = "329";
      sa[1603] = "33";
      sa[1604] = "330";
      sa[1605] = "3307";
      sa[1606] = "331";
      sa[1607] = "3311";
      sa[1608] = "3312";
      sa[1609] = "3316";
      sa[1610] = "3317";
      sa[1611] = "3319";
      sa[1612] = "332";
      sa[1613] = "3320";
      sa[1614] = "3321";
      sa[1615] = "3323";
      sa[1616] = "3326";
      sa[1617] = "3327";
      sa[1618] = "333";
      sa[1619] = "3330";
      sa[1620] = "3332";
      sa[1621] = "3333";
      sa[1622] = "3334";
      sa[1623] = "3336";
      sa[1624] = "3338";
      sa[1625] = "334";
      sa[1626] = "3344";
      sa[1627] = "335";
      sa[1628] = "336";
      sa[1629] = "337";
      sa[1630] = "338";
      sa[1631] = "339";
      sa[1632] = "3394";
      sa[1633] = "3396";
      sa[1634] = "3398";
      sa[1635] = "34";
      sa[1636] = "340";
      sa[1637] = "3402";
      sa[1638] = "3403";
      sa[1639] = "3404";
      sa[1640] = "3405";
      sa[1641] = "3406";
      sa[1642] = "3408";
      sa[1643] = "3409";
      sa[1644] = "341";
      sa[1645] = "3411";
      sa[1646] = "3413";
      sa[1647] = "3414";
      sa[1648] = "3416";
      sa[1649] = "3419";
      sa[1650] = "342";
      sa[1651] = "3421";
      sa[1652] = "3422";
      sa[1653] = "3423";
      sa[1654] = "3425";
      sa[1655] = "3426";
      sa[1656] = "3428";
      sa[1657] = "3429";
      sa[1658] = "343";
      sa[1659] = "3430";
      sa[1660] = "3431";
      sa[1661] = "344";
      sa[1662] = "345";
      sa[1663] = "346";
      sa[1664] = "347";
      sa[1665] = "348";
      sa[1666] = "3480";
      sa[1667] = "3485";
      sa[1668] = "349";
      sa[1669] = "3491";
      sa[1670] = "3492";
      sa[1671] = "3493";
      sa[1672] = "3495";
      sa[1673] = "3499";
      sa[1674] = "35";
      sa[1675] = "350";
      sa[1676] = "3501";
      sa[1677] = "3502";
      sa[1678] = "3503";
      sa[1679] = "3504";
      sa[1680] = "3507";
      sa[1681] = "3508";
      sa[1682] = "3509";
      sa[1683] = "351";
      sa[1684] = "3510";
      sa[1685] = "3512";
      sa[1686] = "3513";
      sa[1687] = "3516";
      sa[1688] = "3517";
      sa[1689] = "354";
      sa[1690] = "355";
      sa[1691] = "356";
      sa[1692] = "3567";
      sa[1693] = "3568";
      sa[1694] = "3569";
      sa[1695] = "357";
      sa[1696] = "3572";
      sa[1697] = "3575";
      sa[1698] = "358";
      sa[1699] = "3580";
      sa[1700] = "3581";
      sa[1701] = "3584";
      sa[1702] = "3586";
      sa[1703] = "3587";
      sa[1704] = "3588";
      sa[1705] = "3589";
      sa[1706] = "359";
      sa[1707] = "3590";
      sa[1708] = "3591";
      sa[1709] = "3592";
      sa[1710] = "3598";
      sa[1711] = "3599";
      sa[1712] = "36";
      sa[1713] = "360";
      sa[1714] = "3600";
      sa[1715] = "3602";
      sa[1716] = "3604";
      sa[1717] = "361";
      sa[1718] = "362";
      sa[1719] = "363";
      sa[1720] = "364";
      sa[1721] = "365";
      sa[1722] = "3655";
      sa[1723] = "3657";
      sa[1724] = "3659";
      sa[1725] = "3660";
      sa[1726] = "3662";
      sa[1727] = "3667";
      sa[1728] = "3669";
      sa[1729] = "367";
      sa[1730] = "3673";
      sa[1731] = "3675";
      sa[1732] = "3676";
      sa[1733] = "3679";
      sa[1734] = "368";
      sa[1735] = "3680";
      sa[1736] = "3681";
      sa[1737] = "3685";
      sa[1738] = "3686";
      sa[1739] = "3691";
      sa[1740] = "37";
      sa[1741] = "370";
      sa[1742] = "372";
      sa[1743] = "374";
      sa[1744] = "3743";
      sa[1745] = "3746";
      sa[1746] = "3748";
      sa[1747] = "375";
      sa[1748] = "3754";
      sa[1749] = "3756";
      sa[1750] = "3757";
      sa[1751] = "3759";
      sa[1752] = "376";
      sa[1753] = "3760";
      sa[1754] = "3763";
      sa[1755] = "3765";
      sa[1756] = "3766";
      sa[1757] = "3767";
      sa[1758] = "377";
      sa[1759] = "3772";
      sa[1760] = "3774";
      sa[1761] = "3778";
      sa[1762] = "378";
      sa[1763] = "379";
      sa[1764] = "38";
      sa[1765] = "380";
      sa[1766] = "381";
      sa[1767] = "382";
      sa[1768] = "3828";
      sa[1769] = "3829";
      sa[1770] = "383";
      sa[1771] = "3831";
      sa[1772] = "3832";
      sa[1773] = "3833";
      sa[1774] = "3835";
      sa[1775] = "3839";
      sa[1776] = "384";
      sa[1777] = "3841";
      sa[1778] = "3843";
      sa[1779] = "3844";
      sa[1780] = "3846";
      sa[1781] = "3848";
      sa[1782] = "3849";
      sa[1783] = "385";
      sa[1784] = "3852";
      sa[1785] = "3854";
      sa[1786] = "3856";
      sa[1787] = "3858";
      sa[1788] = "386";
      sa[1789] = "3862";
      sa[1790] = "3864";
      sa[1791] = "387";
      sa[1792] = "388";
      sa[1793] = "389";
      sa[1794] = "39";
      sa[1795] = "390";
      sa[1796] = "391";
      sa[1797] = "3915";
      sa[1798] = "3917";
      sa[1799] = "3918";
      sa[1800] = "3919";
      sa[1801] = "392";
      sa[1802] = "3920";
      sa[1803] = "3924";
      sa[1804] = "3926";
      sa[1805] = "3927";
      sa[1806] = "3928";
      sa[1807] = "393";
      sa[1808] = "3934";
      sa[1809] = "3936";
      sa[1810] = "3938";
      sa[1811] = "3939";
      sa[1812] = "394";
      sa[1813] = "3940";
      sa[1814] = "3941";
      sa[1815] = "3943";
      sa[1816] = "3946";
      sa[1817] = "3947";
      sa[1818] = "3948";
      sa[1819] = "3949";
      sa[1820] = "395";
      sa[1821] = "396";
      sa[1822] = "397";
      sa[1823] = "398";
      sa[1824] = "399";
      sa[1825] = "4";
      sa[1826] = "40";
      sa[1827] = "400";
      sa[1828] = "401";
      sa[1829] = "402";
      sa[1830] = "403";
      sa[1831] = "404";
      sa[1832] = "405";
      sa[1833] = "406";
      sa[1834] = "407";
      sa[1835] = "408";
      sa[1836] = "409";
      sa[1837] = "41";
      sa[1838] = "410";
      sa[1839] = "411";
      sa[1840] = "412";
      sa[1841] = "413";
      sa[1842] = "414";
      sa[1843] = "415";
      sa[1844] = "416";
      sa[1845] = "417";
      sa[1846] = "418";
      sa[1847] = "419";
      sa[1848] = "42";
      sa[1849] = "420";
      sa[1850] = "421";
      sa[1851] = "422";
      sa[1852] = "423";
      sa[1853] = "424";
      sa[1854] = "425";
      sa[1855] = "426";
      sa[1856] = "427";
      sa[1857] = "428";
      sa[1858] = "429";
      sa[1859] = "43";
      sa[1860] = "430";
      sa[1861] = "431";
      sa[1862] = "432";
      sa[1863] = "433";
      sa[1864] = "434";
      sa[1865] = "435";
      sa[1866] = "436";
      sa[1867] = "437";
      sa[1868] = "438";
      sa[1869] = "439";
      sa[1870] = "44";
      sa[1871] = "440";
      sa[1872] = "441";
      sa[1873] = "442";
      sa[1874] = "443";
      sa[1875] = "444";
      sa[1876] = "445";
      sa[1877] = "446";
      sa[1878] = "447";
      sa[1879] = "448";
      sa[1880] = "449";
      sa[1881] = "45";
      sa[1882] = "450";
      sa[1883] = "451";
      sa[1884] = "453";
      sa[1885] = "454";
      sa[1886] = "455";
      sa[1887] = "456";
      sa[1888] = "457";
      sa[1889] = "458";
      sa[1890] = "46";
      sa[1891] = "460";
      sa[1892] = "461";
      sa[1893] = "462";
      sa[1894] = "463";
      sa[1895] = "464";
      sa[1896] = "465";
      sa[1897] = "466";
      sa[1898] = "467";
      sa[1899] = "468";
      sa[1900] = "469";
      sa[1901] = "47";
      sa[1902] = "470";
      sa[1903] = "471";
      sa[1904] = "472";
      sa[1905] = "473";
      sa[1906] = "474";
      sa[1907] = "475";
      sa[1908] = "476";
      sa[1909] = "477";
      sa[1910] = "478";
      sa[1911] = "479";
      sa[1912] = "48";
      sa[1913] = "480";
      sa[1914] = "481";
      sa[1915] = "482";
      sa[1916] = "483";
      sa[1917] = "484";
      sa[1918] = "485";
      sa[1919] = "486";
      sa[1920] = "487";
      sa[1921] = "488";
      sa[1922] = "489";
      sa[1923] = "49";
      sa[1924] = "490";
      sa[1925] = "491";
      sa[1926] = "492";
      sa[1927] = "493";
      sa[1928] = "494";
      sa[1929] = "495";
      sa[1930] = "496";
      sa[1931] = "497";
      sa[1932] = "498";
      sa[1933] = "499";
      sa[1934] = "5";
      sa[1935] = "50";
      sa[1936] = "500";
      sa[1937] = "501";
      sa[1938] = "502";
      sa[1939] = "503";
      sa[1940] = "504";
      sa[1941] = "505";
      sa[1942] = "506";
      sa[1943] = "507";
      sa[1944] = "508";
      sa[1945] = "509";
      sa[1946] = "51";
      sa[1947] = "510";
      sa[1948] = "511";
      sa[1949] = "512";
      sa[1950] = "513";
      sa[1951] = "514";
      sa[1952] = "515";
      sa[1953] = "516";
      sa[1954] = "518";
      sa[1955] = "519";
      sa[1956] = "52";
      sa[1957] = "520";
      sa[1958] = "521";
      sa[1959] = "522";
      sa[1960] = "523";
      sa[1961] = "524";
      sa[1962] = "525";
      sa[1963] = "526";
      sa[1964] = "527";
      sa[1965] = "528";
      sa[1966] = "529";
      sa[1967] = "53";
      sa[1968] = "530";
      sa[1969] = "531";
      sa[1970] = "532";
      sa[1971] = "533";
      sa[1972] = "534";
      sa[1973] = "535";
      sa[1974] = "536";
      sa[1975] = "538";
      sa[1976] = "539";
      sa[1977] = "54";
      sa[1978] = "540";
      sa[1979] = "541";
      sa[1980] = "542";
      sa[1981] = "543";
      sa[1982] = "544";
      sa[1983] = "545";
      sa[1984] = "546";
      sa[1985] = "547";
      sa[1986] = "548";
      sa[1987] = "549";
      sa[1988] = "55";
      sa[1989] = "550";
      sa[1990] = "551";
      sa[1991] = "552";
      sa[1992] = "553";
      sa[1993] = "554";
      sa[1994] = "555";
      sa[1995] = "556";
      sa[1996] = "557";
      sa[1997] = "558";
      sa[1998] = "559";
      sa[1999] = "56";
      sa[2000] = "560";
      sa[2001] = "561";
      sa[2002] = "562";
      sa[2003] = "563";
      sa[2004] = "564";
      sa[2005] = "565";
      sa[2006] = "566";
      sa[2007] = "567";
      sa[2008] = "568";
      sa[2009] = "569";
      sa[2010] = "57";
      sa[2011] = "570";
      sa[2012] = "571";
      sa[2013] = "572";
      sa[2014] = "573";
      sa[2015] = "574";
      sa[2016] = "575";
      sa[2017] = "576";
      sa[2018] = "577";
      sa[2019] = "578";
      sa[2020] = "579";
      sa[2021] = "58";
      sa[2022] = "580";
      sa[2023] = "581";
      sa[2024] = "582";
      sa[2025] = "583";
      sa[2026] = "584";
      sa[2027] = "585";
      sa[2028] = "586";
      sa[2029] = "587";
      sa[2030] = "588";
      sa[2031] = "589";
      sa[2032] = "59";
      sa[2033] = "590";
      sa[2034] = "591";
      sa[2035] = "592";
      sa[2036] = "593";
      sa[2037] = "594";
      sa[2038] = "595";
      sa[2039] = "596";
      sa[2040] = "597";
      sa[2041] = "598";
      sa[2042] = "599";
      sa[2043] = "6";
      sa[2044] = "60";
      sa[2045] = "600";
      sa[2046] = "601";
      sa[2047] = "602";
      sa[2048] = "603";
      sa[2049] = "604";
      sa[2050] = "605";
      sa[2051] = "606";
      sa[2052] = "607";
      sa[2053] = "608";
      sa[2054] = "609";
      sa[2055] = "61";
      sa[2056] = "610";
      sa[2057] = "611";
      sa[2058] = "612";
      sa[2059] = "613";
      sa[2060] = "614";
      sa[2061] = "615";
      sa[2062] = "616";
      sa[2063] = "617";
      sa[2064] = "618";
      sa[2065] = "619";
      sa[2066] = "62";
      sa[2067] = "621";
      sa[2068] = "622";
      sa[2069] = "623";
      sa[2070] = "624";
      sa[2071] = "625";
      sa[2072] = "627";
      sa[2073] = "628";
      sa[2074] = "629";
      sa[2075] = "63";
      sa[2076] = "630";
      sa[2077] = "631";
      sa[2078] = "632";
      sa[2079] = "633";
      sa[2080] = "634";
      sa[2081] = "635";
      sa[2082] = "636";
      sa[2083] = "637";
      sa[2084] = "638";
      sa[2085] = "639";
      sa[2086] = "64";
      sa[2087] = "640";
      sa[2088] = "641";
      sa[2089] = "642";
      sa[2090] = "643";
      sa[2091] = "644";
      sa[2092] = "645";
      sa[2093] = "646";
      sa[2094] = "647";
      sa[2095] = "648";
      sa[2096] = "65";
      sa[2097] = "651";
      sa[2098] = "652";
      sa[2099] = "653";
      sa[2100] = "654";
      sa[2101] = "655";
      sa[2102] = "656";
      sa[2103] = "658";
      sa[2104] = "659";
      sa[2105] = "66";
      sa[2106] = "660";
      sa[2107] = "661";
      sa[2108] = "662";
      sa[2109] = "663";
      sa[2110] = "664";
      sa[2111] = "667";
      sa[2112] = "668";
      sa[2113] = "669";
      sa[2114] = "67";
      sa[2115] = "670";
      sa[2116] = "671";
      sa[2117] = "673";
      sa[2118] = "674";
      sa[2119] = "675";
      sa[2120] = "677";
      sa[2121] = "678";
      sa[2122] = "679";
      sa[2123] = "68";
      sa[2124] = "680";
      sa[2125] = "681";
      sa[2126] = "682";
      sa[2127] = "683";
      sa[2128] = "684";
      sa[2129] = "685";
      sa[2130] = "686";
      sa[2131] = "687";
      sa[2132] = "688";
      sa[2133] = "689";
      sa[2134] = "69";
      sa[2135] = "690";
      sa[2136] = "691";
      sa[2137] = "692";
      sa[2138] = "693";
      sa[2139] = "694";
      sa[2140] = "695";
      sa[2141] = "696";
      sa[2142] = "697";
      sa[2143] = "698";
      sa[2144] = "7";
      sa[2145] = "70";
      sa[2146] = "700";
      sa[2147] = "701";
      sa[2148] = "702";
      sa[2149] = "704";
      sa[2150] = "706";
      sa[2151] = "707";
      sa[2152] = "708";
      sa[2153] = "709";
      sa[2154] = "71";
      sa[2155] = "710";
      sa[2156] = "711";
      sa[2157] = "712";
      sa[2158] = "713";
      sa[2159] = "714";
      sa[2160] = "715";
      sa[2161] = "716";
      sa[2162] = "717";
      sa[2163] = "718";
      sa[2164] = "719";
      sa[2165] = "72";
      sa[2166] = "720";
      sa[2167] = "721";
      sa[2168] = "722";
      sa[2169] = "723";
      sa[2170] = "724";
      sa[2171] = "725";
      sa[2172] = "726";
      sa[2173] = "727";
      sa[2174] = "728";
      sa[2175] = "729";
      sa[2176] = "73";
      sa[2177] = "730";
      sa[2178] = "731";
      sa[2179] = "732";
      sa[2180] = "733";
      sa[2181] = "734";
      sa[2182] = "735";
      sa[2183] = "736";
      sa[2184] = "738";
      sa[2185] = "739";
      sa[2186] = "74";
      sa[2187] = "740";
      sa[2188] = "741";
      sa[2189] = "742";
      sa[2190] = "743";
      sa[2191] = "744";
      sa[2192] = "745";
      sa[2193] = "746";
      sa[2194] = "747";
      sa[2195] = "748";
      sa[2196] = "749";
      sa[2197] = "75";
      sa[2198] = "750";
      sa[2199] = "751";
      sa[2200] = "752";
      sa[2201] = "753";
      sa[2202] = "754";
      sa[2203] = "755";
      sa[2204] = "756";
      sa[2205] = "757";
      sa[2206] = "758";
      sa[2207] = "759";
      sa[2208] = "76";
      sa[2209] = "760";
      sa[2210] = "761";
      sa[2211] = "762";
      sa[2212] = "763";
      sa[2213] = "764";
      sa[2214] = "765";
      sa[2215] = "766";
      sa[2216] = "767";
      sa[2217] = "768";
      sa[2218] = "769";
      sa[2219] = "77";
      sa[2220] = "770";
      sa[2221] = "771";
      sa[2222] = "772";
      sa[2223] = "773";
      sa[2224] = "774";
      sa[2225] = "775";
      sa[2226] = "776";
      sa[2227] = "777";
      sa[2228] = "778";
      sa[2229] = "779";
      sa[2230] = "78";
      sa[2231] = "780";
      sa[2232] = "781";
      sa[2233] = "782";
      sa[2234] = "783";
      sa[2235] = "784";
      sa[2236] = "785";
      sa[2237] = "786";
      sa[2238] = "788";
      sa[2239] = "789";
      sa[2240] = "79";
      sa[2241] = "790";
      sa[2242] = "791";
      sa[2243] = "792";
      sa[2244] = "793";
      sa[2245] = "794";
      sa[2246] = "795";
      sa[2247] = "796";
      sa[2248] = "797";
      sa[2249] = "798";
      sa[2250] = "799";
      sa[2251] = "8";
      sa[2252] = "80";
      sa[2253] = "801";
      sa[2254] = "802";
      sa[2255] = "803";
      sa[2256] = "804";
      sa[2257] = "805";
      sa[2258] = "806";
      sa[2259] = "807";
      sa[2260] = "808";
      sa[2261] = "809";
      sa[2262] = "81";
      sa[2263] = "810";
      sa[2264] = "811";
      sa[2265] = "812";
      sa[2266] = "813";
      sa[2267] = "814";
      sa[2268] = "815";
      sa[2269] = "818";
      sa[2270] = "82";
      sa[2271] = "820";
      sa[2272] = "822";
      sa[2273] = "823";
      sa[2274] = "824";
      sa[2275] = "825";
      sa[2276] = "826";
      sa[2277] = "827";
      sa[2278] = "828";
      sa[2279] = "829";
      sa[2280] = "83";
      sa[2281] = "830";
      sa[2282] = "831";
      sa[2283] = "832";
      sa[2284] = "834";
      sa[2285] = "835";
      sa[2286] = "836";
      sa[2287] = "837";
      sa[2288] = "838";
      sa[2289] = "84";
      sa[2290] = "840";
      sa[2291] = "841";
      sa[2292] = "843";
      sa[2293] = "844";
      sa[2294] = "845";
      sa[2295] = "846";
      sa[2296] = "847";
      sa[2297] = "848";
      sa[2298] = "849";
      sa[2299] = "85";
      sa[2300] = "851";
      sa[2301] = "852";
      sa[2302] = "854";
      sa[2303] = "855";
      sa[2304] = "856";
      sa[2305] = "859";
      sa[2306] = "86";
      sa[2307] = "860";
      sa[2308] = "862";
      sa[2309] = "863";
      sa[2310] = "864";
      sa[2311] = "865";
      sa[2312] = "866";
      sa[2313] = "867";
      sa[2314] = "868";
      sa[2315] = "869";
      sa[2316] = "87";
      sa[2317] = "871";
      sa[2318] = "872";
      sa[2319] = "873";
      sa[2320] = "874";
      sa[2321] = "875";
      sa[2322] = "876";
      sa[2323] = "877";
      sa[2324] = "878";
      sa[2325] = "879";
      sa[2326] = "88";
      sa[2327] = "880";
      sa[2328] = "881";
      sa[2329] = "882";
      sa[2330] = "883";
      sa[2331] = "884";
      sa[2332] = "885";
      sa[2333] = "887";
      sa[2334] = "888";
      sa[2335] = "889";
      sa[2336] = "89";
      sa[2337] = "890";
      sa[2338] = "891";
      sa[2339] = "892";
      sa[2340] = "894";
      sa[2341] = "895";
      sa[2342] = "896";
      sa[2343] = "897";
      sa[2344] = "898";
      sa[2345] = "899";
      sa[2346] = "9";
      sa[2347] = "90";
      sa[2348] = "900";
      sa[2349] = "902";
      sa[2350] = "903";
      sa[2351] = "904";
      sa[2352] = "905";
      sa[2353] = "906";
      sa[2354] = "907";
      sa[2355] = "908";
      sa[2356] = "91";
      sa[2357] = "914";
      sa[2358] = "915";
      sa[2359] = "916";
      sa[2360] = "917";
      sa[2361] = "918";
      sa[2362] = "919";
      sa[2363] = "92";
      sa[2364] = "920";
      sa[2365] = "921";
      sa[2366] = "923";
      sa[2367] = "924";
      sa[2368] = "925";
      sa[2369] = "926";
      sa[2370] = "928";
      sa[2371] = "929";
      sa[2372] = "93";
      sa[2373] = "930";
      sa[2374] = "931";
      sa[2375] = "932";
      sa[2376] = "933";
      sa[2377] = "934";
      sa[2378] = "935";
      sa[2379] = "936";
      sa[2380] = "939";
      sa[2381] = "94";
      sa[2382] = "940";
      sa[2383] = "941";
      sa[2384] = "942";
      sa[2385] = "943";
      sa[2386] = "944";
      sa[2387] = "945";
      sa[2388] = "947";
      sa[2389] = "948";
      sa[2390] = "949";
      sa[2391] = "95";
      sa[2392] = "950";
      sa[2393] = "951";
      sa[2394] = "952";
      sa[2395] = "953";
      sa[2396] = "954";
      sa[2397] = "955";
      sa[2398] = "956";
      sa[2399] = "957";
      sa[2400] = "958";
      sa[2401] = "959";
      sa[2402] = "96";
      sa[2403] = "960";
      sa[2404] = "961";
      sa[2405] = "962";
      sa[2406] = "963";
      sa[2407] = "964";
      sa[2408] = "966";
      sa[2409] = "967";
      sa[2410] = "968";
      sa[2411] = "969";
      sa[2412] = "97";
      sa[2413] = "970";
      sa[2414] = "971";
      sa[2415] = "972";
      sa[2416] = "973";
      sa[2417] = "974";
      sa[2418] = "975";
      sa[2419] = "976";
      sa[2420] = "977";
      sa[2421] = "979";
      sa[2422] = "98";
      sa[2423] = "980";
      sa[2424] = "982";
      sa[2425] = "983";
      sa[2426] = "984";
      sa[2427] = "985";
      sa[2428] = "986";
      sa[2429] = "987";
      sa[2430] = "988";
      sa[2431] = "989";
      sa[2432] = "99";
      sa[2433] = "991";
      sa[2434] = "992";
      sa[2435] = "995";
      sa[2436] = "997";
      sa[2437] = "998";
      sa[2438] = "999";
    }
  }
}
// The class representing column TailNum
class gbm_pojo_test_ColInfo_4 implements java.io.Serializable {
  public static final String[] VALUES = new String[3501];
  static {
    gbm_pojo_test_ColInfo_4_0.fill(VALUES);
    gbm_pojo_test_ColInfo_4_1.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_4_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "-N912<0xE5>";
      sa[1] = "-N913<0xE5>";
      sa[2] = "-N918<0xE5>";
      sa[3] = "-N919<0xE5>";
      sa[4] = "-N920<0xE5>";
      sa[5] = "-N922<0xE5>";
      sa[6] = "-N923<0xE5>";
      sa[7] = "-N924<0xE5>";
      sa[8] = "-N925<0xE5>";
      sa[9] = "-N926<0xE5>";
      sa[10] = "-N927<0xE5>";
      sa[11] = "-N928<0xE5>";
      sa[12] = "-N934<0xE5>";
      sa[13] = "-N936<0xE5>";
      sa[14] = "-N955<0xE5>";
      sa[15] = "-N958<0xE5>";
      sa[16] = "-N959<0xE5>";
      sa[17] = "-N965<0xE5>";
      sa[18] = "-N967<0xE5>";
      sa[19] = "-N970<0xE5>";
      sa[20] = "-N991<0xE5>";
      sa[21] = "0";
      sa[22] = "000000";
      sa[23] = "112";
      sa[24] = "<0xE4>NKNO<0xE6>";
      sa[25] = "EI-BWD";
      sa[26] = "N055AA";
      sa[27] = "N056AA";
      sa[28] = "N057AA";
      sa[29] = "N058AA";
      sa[30] = "N059AA";
      sa[31] = "N060AA";
      sa[32] = "N061AA";
      sa[33] = "N064AA";
      sa[34] = "N066AA";
      sa[35] = "N067AA";
      sa[36] = "N068AA";
      sa[37] = "N069AA";
      sa[38] = "N070AA";
      sa[39] = "N071AA";
      sa[40] = "N073AA";
      sa[41] = "N076AA";
      sa[42] = "N077AA";
      sa[43] = "N078AA";
      sa[44] = "N079AA";
      sa[45] = "N082AA";
      sa[46] = "N084AA";
      sa[47] = "N101<0xE4E6>";
      sa[48] = "N102";
      sa[49] = "N102UW";
      sa[50] = "N103";
      sa[51] = "N10323";
      sa[52] = "N103DA";
      sa[53] = "N103UW";
      sa[54] = "N104";
      sa[55] = "N104UW";
      sa[56] = "N105";
      sa[57] = "N105UW";
      sa[58] = "N106DA";
      sa[59] = "N106UW";
      sa[60] = "N107UW";
      sa[61] = "N108<0xE4E6>";
      sa[62] = "N108DL";
      sa[63] = "N108UW";
      sa[64] = "N109UW";
      sa[65] = "N110HM";
      sa[66] = "N110UW";
      sa[67] = "N111UW";
      sa[68] = "N112DL";
      sa[69] = "N112UW";
      sa[70] = "N113<0xE4E6>";
      sa[71] = "N113DA";
      sa[72] = "N113UW";
      sa[73] = "N114<0xE4E6>";
      sa[74] = "N114UW";
      sa[75] = "N115<0xE4E6>";
      sa[76] = "N116<0xE4E6>";
      sa[77] = "N116DL";
      sa[78] = "N117<0xE4E6>";
      sa[79] = "N117DL";
      sa[80] = "N118<0xE4E6>";
      sa[81] = "N118DL";
      sa[82] = "N118UW";
      sa[83] = "N119<0xE4E6>";
      sa[84] = "N119DL";
      sa[85] = "N119UW";
      sa[86] = "N120<0xE4E6>";
      sa[87] = "N120DL";
      sa[88] = "N121<0xE4E6>";
      sa[89] = "N121DE";
      sa[90] = "N121UW";
      sa[91] = "N122<0xE4E6>";
      sa[92] = "N122DL";
      sa[93] = "N122UW";
      sa[94] = "N12313";
      sa[95] = "N12318";
      sa[96] = "N12319";
      sa[97] = "N12322";
      sa[98] = "N12327";
      sa[99] = "N12349";
      sa[100] = "N123<0xE4E6>";
      sa[101] = "N123DN";
      sa[102] = "N123UW";
      sa[103] = "N124<0xE4E6>";
      sa[104] = "N124DE";
      sa[105] = "N124UW";
      sa[106] = "N125DL";
      sa[107] = "N126AW";
      sa[108] = "N126DL";
      sa[109] = "N127AW";
      sa[110] = "N127DL";
      sa[111] = "N128AW";
      sa[112] = "N128DL";
      sa[113] = "N129";
      sa[114] = "N130";
      sa[115] = "N130DL";
      sa[116] = "N131DN";
      sa[117] = "N132AA";
      sa[118] = "N132DN";
      sa[119] = "N13331";
      sa[120] = "N133DN";
      sa[121] = "N134DL";
      sa[122] = "N135DL";
      sa[123] = "N13624";
      sa[124] = "N136DL";
      sa[125] = "N13716";
      sa[126] = "N13718";
      sa[127] = "N13720";
      sa[128] = "N13750";
      sa[129] = "N137DL";
      sa[130] = "N138AW";
      sa[131] = "N138DL";
      sa[132] = "N139DL";
      sa[133] = "N1402A";
      sa[134] = "N140LL";
      sa[135] = "N141AW";
      sa[136] = "N14308";
      sa[137] = "N14320";
      sa[138] = "N14324";
      sa[139] = "N14335";
      sa[140] = "N14336";
      sa[141] = "N14337";
      sa[142] = "N14341";
      sa[143] = "N14342";
      sa[144] = "N14347";
      sa[145] = "N14383";
      sa[146] = "N145AW";
      sa[147] = "N14629";
      sa[148] = "N14639";
      sa[149] = "N14704";
      sa[150] = "N14731";
      sa[151] = "N14735";
      sa[152] = "N147AW";
      sa[153] = "N149AW";
      sa[154] = "N150AW";
      sa[155] = "N151AW";
      sa[156] = "N154AW";
      sa[157] = "N155AW";
      sa[158] = "N156AW";
      sa[159] = "N15710";
      sa[160] = "N15712";
      sa[161] = "N157AW";
      sa[162] = "N158AW";
      sa[163] = "N160AW";
      sa[164] = "N161<0xE4E6>";
      sa[165] = "N161UW";
      sa[166] = "N162UW";
      sa[167] = "N16301";
      sa[168] = "N16310";
      sa[169] = "N163UW";
      sa[170] = "N164AW";
      sa[171] = "N164UW";
      sa[172] = "N165AW";
      sa[173] = "N165UW";
      sa[174] = "N16618";
      sa[175] = "N16648";
      sa[176] = "N16649";
      sa[177] = "N16650";
      sa[178] = "N16651";
      sa[179] = "N166AW";
      sa[180] = "N166UW";
      sa[181] = "N16701";
      sa[182] = "N16703";
      sa[183] = "N16713";
      sa[184] = "N16732";
      sa[185] = "N167AW";
      sa[186] = "N167UW";
      sa[187] = "N168AW";
      sa[188] = "N168UW";
      sa[189] = "N169AW";
      sa[190] = "N169UW";
      sa[191] = "N170UW";
      sa[192] = "N171UW";
      sa[193] = "N172AW";
      sa[194] = "N172UW";
      sa[195] = "N17306";
      sa[196] = "N17309";
      sa[197] = "N17317";
      sa[198] = "N17321";
      sa[199] = "N17329";
      sa[200] = "N17344";
      sa[201] = "N17345";
      sa[202] = "N17386";
      sa[203] = "N173AW";
      sa[204] = "N173UW";
      sa[205] = "N174<0xE4E6>";
      sa[206] = "N174AW";
      sa[207] = "N174UW";
      sa[208] = "N175AW";
      sa[209] = "N175UW";
      sa[210] = "N17614";
      sa[211] = "N17619";
      sa[212] = "N17620";
      sa[213] = "N17627";
      sa[214] = "N17640";
      sa[215] = "N176UW";
      sa[216] = "N17719";
      sa[217] = "N17730";
      sa[218] = "N177UW";
      sa[219] = "N178AW";
      sa[220] = "N178UW";
      sa[221] = "N179AW";
      sa[222] = "N179UW";
      sa[223] = "N180<0xE4E6>";
      sa[224] = "N180AW";
      sa[225] = "N180UW";
      sa[226] = "N1810U";
      sa[227] = "N1811U";
      sa[228] = "N1812U";
      sa[229] = "N1813U";
      sa[230] = "N1814U";
      sa[231] = "N1815U";
      sa[232] = "N1816U";
      sa[233] = "N1817U";
      sa[234] = "N181AW";
      sa[235] = "N181UW";
      sa[236] = "N1823U";
      sa[237] = "N1824U";
      sa[238] = "N1825U";
      sa[239] = "N182AW";
      sa[240] = "N182UW";
      sa[241] = "N1830U";
      sa[242] = "N1831U";
      sa[243] = "N1832U";
      sa[244] = "N1838U";
      sa[245] = "N183<0xE4E6>";
      sa[246] = "N183AW";
      sa[247] = "N183UW";
      sa[248] = "N1841U";
      sa[249] = "N1842U";
      sa[250] = "N1844U";
      sa[251] = "N1846U";
      sa[252] = "N184AW";
      sa[253] = "N184UW";
      sa[254] = "N185AW";
      sa[255] = "N185UW";
      sa[256] = "N18611";
      sa[257] = "N18622";
      sa[258] = "N186AW";
      sa[259] = "N186UW";
      sa[260] = "N187AW";
      sa[261] = "N187UW";
      sa[262] = "N188AW";
      sa[263] = "N188UW";
      sa[264] = "N189AW";
      sa[265] = "N19357";
      sa[266] = "N19382";
      sa[267] = "N19621";
      sa[268] = "N19623";
      sa[269] = "N19634";
      sa[270] = "N197UA";
      sa[271] = "N20";
      sa[272] = "N200WN";
      sa[273] = "N201";
      sa[274] = "N201LV";
      sa[275] = "N202";
      sa[276] = "N202AA";
      sa[277] = "N202UA";
      sa[278] = "N202WN";
      sa[279] = "N203AU";
      sa[280] = "N203UA";
      sa[281] = "N203WN";
      sa[282] = "N204";
      sa[283] = "N204UA";
      sa[284] = "N204WN";
      sa[285] = "N205";
      sa[286] = "N205AA";
      sa[287] = "N205WN";
      sa[288] = "N206";
      sa[289] = "N20643";
      sa[290] = "N206UA";
      sa[291] = "N206WN";
      sa[292] = "N207";
      sa[293] = "N207AA";
      sa[294] = "N207WN";
      sa[295] = "N208";
      sa[296] = "N208AA";
      sa[297] = "N208WN";
      sa[298] = "N209";
      sa[299] = "N209WN";
      sa[300] = "N210";
      sa[301] = "N210AA";
      sa[302] = "N210WN";
      sa[303] = "N211";
      sa[304] = "N211WN";
      sa[305] = "N212";
      sa[306] = "N212WN";
      sa[307] = "N213";
      sa[308] = "N213UA";
      sa[309] = "N213WN";
      sa[310] = "N214";
      sa[311] = "N214WN";
      sa[312] = "N215";
      sa[313] = "N215AA";
      sa[314] = "N215WN";
      sa[315] = "N216";
      sa[316] = "N216AA";
      sa[317] = "N216UA";
      sa[318] = "N216WR";
      sa[319] = "N217";
      sa[320] = "N21723";
      sa[321] = "N217JC";
      sa[322] = "N218";
      sa[323] = "N218AA";
      sa[324] = "N218WN";
      sa[325] = "N219";
      sa[326] = "N219WN";
      sa[327] = "N220";
      sa[328] = "N220US";
      sa[329] = "N220WN";
      sa[330] = "N221";
      sa[331] = "N221WN";
      sa[332] = "N222";
      sa[333] = "N222WN";
      sa[334] = "N223";
      sa[335] = "N223AA";
      sa[336] = "N223US";
      sa[337] = "N223WN";
      sa[338] = "N224";
      sa[339] = "N224AA";
      sa[340] = "N224US";
      sa[341] = "N224WN";
      sa[342] = "N225";
      sa[343] = "N225AA";
      sa[344] = "N225US";
      sa[345] = "N225WN";
      sa[346] = "N226";
      sa[347] = "N226AA";
      sa[348] = "N226US";
      sa[349] = "N226WN";
      sa[350] = "N227";
      sa[351] = "N227AA";
      sa[352] = "N227AU";
      sa[353] = "N227UA";
      sa[354] = "N227WN";
      sa[355] = "N228";
      sa[356] = "N228AA";
      sa[357] = "N228US";
      sa[358] = "N228WN";
      sa[359] = "N229";
      sa[360] = "N229US";
      sa[361] = "N229WN";
      sa[362] = "N23";
      sa[363] = "N230";
      sa[364] = "N230AU";
      sa[365] = "N230WN";
      sa[366] = "N231";
      sa[367] = "N231US";
      sa[368] = "N231WN";
      sa[369] = "N232";
      sa[370] = "N232AA";
      sa[371] = "N232US";
      sa[372] = "N232WN";
      sa[373] = "N233";
      sa[374] = "N233AA";
      sa[375] = "N233LV";
      sa[376] = "N233US";
      sa[377] = "N234";
      sa[378] = "N234AA";
      sa[379] = "N234US";
      sa[380] = "N235";
      sa[381] = "N235US";
      sa[382] = "N235WN";
      sa[383] = "N236";
      sa[384] = "N236AA";
      sa[385] = "N236US";
      sa[386] = "N236WN";
      sa[387] = "N237";
      sa[388] = "N23707";
      sa[389] = "N23708";
      sa[390] = "N23721";
      sa[391] = "N237AA";
      sa[392] = "N237US";
      sa[393] = "N237WN";
      sa[394] = "N238";
      sa[395] = "N238US";
      sa[396] = "N238WN";
      sa[397] = "N239";
      sa[398] = "N239US";
      sa[399] = "N239WN";
      sa[400] = "N24";
      sa[401] = "N240";
      sa[402] = "N240AU";
      sa[403] = "N240WN";
      sa[404] = "N241";
      sa[405] = "N241AA";
      sa[406] = "N241US";
      sa[407] = "N241WN";
      sa[408] = "N242AA";
      sa[409] = "N242US";
      sa[410] = "N242WN";
      sa[411] = "N243";
      sa[412] = "N24343";
      sa[413] = "N243US";
      sa[414] = "N243WN";
      sa[415] = "N244";
      sa[416] = "N244AA";
      sa[417] = "N244US";
      sa[418] = "N244WN";
      sa[419] = "N245";
      sa[420] = "N245AA";
      sa[421] = "N245US";
      sa[422] = "N245WN";
      sa[423] = "N246";
      sa[424] = "N24633";
      sa[425] = "N246AA";
      sa[426] = "N246LV";
      sa[427] = "N246US";
      sa[428] = "N247";
      sa[429] = "N24702";
      sa[430] = "N24706";
      sa[431] = "N24715";
      sa[432] = "N24736";
      sa[433] = "N247US";
      sa[434] = "N247WN";
      sa[435] = "N248";
      sa[436] = "N248AA";
      sa[437] = "N248US";
      sa[438] = "N248WN";
      sa[439] = "N249";
      sa[440] = "N249AA";
      sa[441] = "N249US";
      sa[442] = "N249WN";
      sa[443] = "N250";
      sa[444] = "N250WN";
      sa[445] = "N251";
      sa[446] = "N251AA";
      sa[447] = "N251AU";
      sa[448] = "N251WN";
      sa[449] = "N252";
      sa[450] = "N252AU";
      sa[451] = "N252WN";
      sa[452] = "N253";
      sa[453] = "N253AA";
      sa[454] = "N253AU";
      sa[455] = "N253WN";
      sa[456] = "N254";
      sa[457] = "N254AU";
      sa[458] = "N254WN";
      sa[459] = "N255";
      sa[460] = "N255AA";
      sa[461] = "N255AU";
      sa[462] = "N255WN";
      sa[463] = "N256";
      sa[464] = "N256AU";
      sa[465] = "N256WN";
      sa[466] = "N257";
      sa[467] = "N25705";
      sa[468] = "N257AU";
      sa[469] = "N257WN";
      sa[470] = "N258";
      sa[471] = "N258AA";
      sa[472] = "N258WN";
      sa[473] = "N259";
      sa[474] = "N259AA";
      sa[475] = "N259AU";
      sa[476] = "N259WN";
      sa[477] = "N26";
      sa[478] = "N260";
      sa[479] = "N260AU";
      sa[480] = "N260WN";
      sa[481] = "N261";
      sa[482] = "N261AU";
      sa[483] = "N261WN";
      sa[484] = "N262";
      sa[485] = "N262AU";
      sa[486] = "N262WN";
      sa[487] = "N263AU";
      sa[488] = "N263WN";
      sa[489] = "N264AU";
      sa[490] = "N264LV";
      sa[491] = "N265AU";
      sa[492] = "N265WN";
      sa[493] = "N266AA";
      sa[494] = "N266AU";
      sa[495] = "N266WN";
      sa[496] = "N267AU";
      sa[497] = "N267WN";
      sa[498] = "N268AU";
      sa[499] = "N268WN";
      sa[500] = "N269AA";
      sa[501] = "N269AU";
      sa[502] = "N269WN";
      sa[503] = "N27";
      sa[504] = "N270";
      sa[505] = "N270AU";
      sa[506] = "N270WN";
      sa[507] = "N271";
      sa[508] = "N271AA";
      sa[509] = "N271AU";
      sa[510] = "N271WN";
      sa[511] = "N272AU";
      sa[512] = "N272WN";
      sa[513] = "N273AU";
      sa[514] = "N273WN";
      sa[515] = "N274AA";
      sa[516] = "N274US";
      sa[517] = "N274WN";
      sa[518] = "N275AU";
      sa[519] = "N275WN";
      sa[520] = "N27610";
      sa[521] = "N276AA";
      sa[522] = "N276AU";
      sa[523] = "N276WN";
      sa[524] = "N27722";
      sa[525] = "N27733";
      sa[526] = "N27734";
      sa[527] = "N277AU";
      sa[528] = "N277WN";
      sa[529] = "N278AA";
      sa[530] = "N278WN";
      sa[531] = "N279AA";
      sa[532] = "N279AU";
      sa[533] = "N279WN";
      sa[534] = "N28";
      sa[535] = "N2807W";
      sa[536] = "N2809W";
      sa[537] = "N280AU";
      sa[538] = "N280WN";
      sa[539] = "N2812W";
      sa[540] = "N2813W";
      sa[541] = "N2814W";
      sa[542] = "N2815W";
      sa[543] = "N2816W";
      sa[544] = "N2817W";
      sa[545] = "N2819W";
      sa[546] = "N281AU";
      sa[547] = "N281WN";
      sa[548] = "N2820W";
      sa[549] = "N2821W";
      sa[550] = "N2824W";
      sa[551] = "N2826W";
      sa[552] = "N2829W";
      sa[553] = "N282AU";
      sa[554] = "N282WA";
      sa[555] = "N282WN";
      sa[556] = "N283AA";
      sa[557] = "N283AU";
      sa[558] = "N283WA";
      sa[559] = "N283WN";
      sa[560] = "N284AU";
      sa[561] = "N284WN";
      sa[562] = "N285AA";
      sa[563] = "N285AU";
      sa[564] = "N285WN";
      sa[565] = "N286";
      sa[566] = "N286AA";
      sa[567] = "N286AU";
      sa[568] = "N286WN";
      sa[569] = "N287AA";
      sa[570] = "N287AU";
      sa[571] = "N287WN";
      sa[572] = "N288AA";
      sa[573] = "N288AU";
      sa[574] = "N288WN";
      sa[575] = "N289AA";
      sa[576] = "N289CT";
      sa[577] = "N29";
      sa[578] = "N290AA";
      sa[579] = "N290WA";
      sa[580] = "N290WN";
      sa[581] = "N291AA";
      sa[582] = "N291WA";
      sa[583] = "N291WN";
      sa[584] = "N292AA";
      sa[585] = "N292WA";
      sa[586] = "N292WN";
      sa[587] = "N293";
      sa[588] = "N293AA";
      sa[589] = "N293WA";
      sa[590] = "N294AA";
      sa[591] = "N294WA";
      sa[592] = "N294WN";
      sa[593] = "N295AA";
      sa[594] = "N295WA";
      sa[595] = "N295WN";
      sa[596] = "N296AA";
      sa[597] = "N296WA";
      sa[598] = "N296WN";
      sa[599] = "N29717";
      sa[600] = "N297AA";
      sa[601] = "N297WA";
      sa[602] = "N297WN";
      sa[603] = "N298AA";
      sa[604] = "N298WN";
      sa[605] = "N299WN";
      sa[606] = "N300";
      sa[607] = "N300A<0xE4>";
      sa[608] = "N300AU";
      sa[609] = "N300SW";
      sa[610] = "N301";
      sa[611] = "N301AU";
      sa[612] = "N301SW";
      sa[613] = "N301UA";
      sa[614] = "N302";
      sa[615] = "N302AU";
      sa[616] = "N302AW";
      sa[617] = "N302SW";
      sa[618] = "N302UA";
      sa[619] = "N303";
      sa[620] = "N303AW";
      sa[621] = "N303SW";
      sa[622] = "N303UA";
      sa[623] = "N304";
      sa[624] = "N304AW";
      sa[625] = "N304SW";
      sa[626] = "N304UA";
      sa[627] = "N305";
      sa[628] = "N305AW";
      sa[629] = "N305SW";
      sa[630] = "N305UA";
      sa[631] = "N306";
      sa[632] = "N306AW";
      sa[633] = "N306SW";
      sa[634] = "N306UA";
      sa[635] = "N307";
      sa[636] = "N307AW";
      sa[637] = "N307SW";
      sa[638] = "N307UA";
      sa[639] = "N308";
      sa[640] = "N308AW";
      sa[641] = "N308SA";
      sa[642] = "N308SW";
      sa[643] = "N308UA";
      sa[644] = "N309";
      sa[645] = "N309AW";
      sa[646] = "N309SW";
      sa[647] = "N309UA";
      sa[648] = "N310";
      sa[649] = "N310SW";
      sa[650] = "N310UA";
      sa[651] = "N311";
      sa[652] = "N311AW";
      sa[653] = "N311SW";
      sa[654] = "N311UA";
      sa[655] = "N312";
      sa[656] = "N312AW";
      sa[657] = "N312SW";
      sa[658] = "N312UA";
      sa[659] = "N313";
      sa[660] = "N313AW";
      sa[661] = "N313SW";
      sa[662] = "N313UA";
      sa[663] = "N314";
      sa[664] = "N314AW";
      sa[665] = "N314SW";
      sa[666] = "N314UA";
      sa[667] = "N315";
      sa[668] = "N315AW";
      sa[669] = "N315SW";
      sa[670] = "N315UA";
      sa[671] = "N316";
      sa[672] = "N316AW";
      sa[673] = "N316SW";
      sa[674] = "N316UA";
      sa[675] = "N317";
      sa[676] = "N317SW";
      sa[677] = "N317UA";
      sa[678] = "N318";
      sa[679] = "N318SW";
      sa[680] = "N318UA";
      sa[681] = "N319";
      sa[682] = "N319UA";
      sa[683] = "N320";
      sa[684] = "N320SW";
      sa[685] = "N320UA";
      sa[686] = "N321";
      sa[687] = "N321SW";
      sa[688] = "N321UA";
      sa[689] = "N322";
      sa[690] = "N322AW";
      sa[691] = "N322UA";
      sa[692] = "N323";
      sa[693] = "N323AW";
      sa[694] = "N323SW";
      sa[695] = "N323UA";
      sa[696] = "N324";
      sa[697] = "N324AW";
      sa[698] = "N324SW";
      sa[699] = "N324UA";
      sa[700] = "N325";
      sa[701] = "N325AW";
      sa[702] = "N325SW";
      sa[703] = "N325UA";
      sa[704] = "N326";
      sa[705] = "N326AW";
      sa[706] = "N326SW";
      sa[707] = "N326UA";
      sa[708] = "N327";
      sa[709] = "N327AW";
      sa[710] = "N327SW";
      sa[711] = "N327UA";
      sa[712] = "N327US";
      sa[713] = "N328";
      sa[714] = "N328AW";
      sa[715] = "N328SW";
      sa[716] = "N328UA";
      sa[717] = "N329";
      sa[718] = "N329AW";
      sa[719] = "N329SW";
      sa[720] = "N329UA";
      sa[721] = "N329US";
      sa[722] = "N330";
      sa[723] = "N330AW";
      sa[724] = "N330SW";
      sa[725] = "N330UA";
      sa[726] = "N331";
      sa[727] = "N331AW";
      sa[728] = "N331SW";
      sa[729] = "N331UA";
      sa[730] = "N332";
      sa[731] = "N332AW";
      sa[732] = "N332SW";
      sa[733] = "N332UA";
      sa[734] = "N333";
      sa[735] = "N333SW";
      sa[736] = "N333UA";
      sa[737] = "N334";
      sa[738] = "N334<0xE4E2>";
      sa[739] = "N334AW";
      sa[740] = "N334SW";
      sa[741] = "N334UA";
      sa[742] = "N334US";
      sa[743] = "N335";
      sa[744] = "N335<0xE4E2>";
      sa[745] = "N335AW";
      sa[746] = "N335SW";
      sa[747] = "N335UA";
      sa[748] = "N335US";
      sa[749] = "N336";
      sa[750] = "N33635";
      sa[751] = "N33637";
      sa[752] = "N336<0xE4E2>";
      sa[753] = "N336AW";
      sa[754] = "N336SW";
      sa[755] = "N336UA";
      sa[756] = "N336US";
      sa[757] = "N337";
      sa[758] = "N337<0xE4E2>";
      sa[759] = "N337SW";
      sa[760] = "N337UA";
      sa[761] = "N337US";
      sa[762] = "N338";
      sa[763] = "N338<0xE4E2>";
      sa[764] = "N338SW";
      sa[765] = "N338UA";
      sa[766] = "N338US";
      sa[767] = "N339";
      sa[768] = "N339<0xE4E2>";
      sa[769] = "N339SW";
      sa[770] = "N339UA";
      sa[771] = "N339US";
      sa[772] = "N340";
      sa[773] = "N340<0xE4E2>";
      sa[774] = "N340LV";
      sa[775] = "N340UA";
      sa[776] = "N340US";
      sa[777] = "N341";
      sa[778] = "N341<0xE4E2>";
      sa[779] = "N341SW";
      sa[780] = "N341UA";
      sa[781] = "N341US";
      sa[782] = "N342";
      sa[783] = "N342<0xE4E2>";
      sa[784] = "N342SW";
      sa[785] = "N342UA";
      sa[786] = "N342US";
      sa[787] = "N343";
      sa[788] = "N34315";
      sa[789] = "N343SW";
      sa[790] = "N343UA";
      sa[791] = "N344";
      sa[792] = "N344SW";
      sa[793] = "N344UA";
      sa[794] = "N345";
      sa[795] = "N345SA";
      sa[796] = "N345UA";
      sa[797] = "N346";
      sa[798] = "N346<0xE4E2>";
      sa[799] = "N346SW";
      sa[800] = "N346UA";
      sa[801] = "N346US";
      sa[802] = "N347";
      sa[803] = "N347SW";
      sa[804] = "N347UA";
      sa[805] = "N348";
      sa[806] = "N348SW";
      sa[807] = "N348UA";
      sa[808] = "N349";
      sa[809] = "N349<0xE4E2>";
      sa[810] = "N349UA";
      sa[811] = "N349US";
      sa[812] = "N350";
      sa[813] = "N350<0xE4E2>";
      sa[814] = "N350SW";
      sa[815] = "N350UA";
      sa[816] = "N350US";
      sa[817] = "N351";
      sa[818] = "N351<0xE4E2>";
      sa[819] = "N351SW";
      sa[820] = "N351UA";
      sa[821] = "N351US";
      sa[822] = "N352";
      sa[823] = "N352<0xE4E2>";
      sa[824] = "N352SW";
      sa[825] = "N352UA";
      sa[826] = "N352US";
      sa[827] = "N353";
      sa[828] = "N353<0xE4E2>";
      sa[829] = "N353SW";
      sa[830] = "N353UA";
      sa[831] = "N353US";
      sa[832] = "N354";
      sa[833] = "N354<0xE4E2>";
      sa[834] = "N354SW";
      sa[835] = "N354UA";
      sa[836] = "N354US";
      sa[837] = "N355";
      sa[838] = "N355<0xE4E2>";
      sa[839] = "N355SW";
      sa[840] = "N355UA";
      sa[841] = "N355US";
      sa[842] = "N356";
      sa[843] = "N356<0xE4E2>";
      sa[844] = "N356SW";
      sa[845] = "N356UA";
      sa[846] = "N356US";
      sa[847] = "N357";
      sa[848] = "N357SW";
      sa[849] = "N357UA";
      sa[850] = "N358";
      sa[851] = "N358SW";
      sa[852] = "N358UA";
      sa[853] = "N359";
      sa[854] = "N359SW";
      sa[855] = "N360";
      sa[856] = "N360SW";
      sa[857] = "N360UA";
      sa[858] = "N361";
      sa[859] = "N361SW";
      sa[860] = "N361UA";
      sa[861] = "N362";
      sa[862] = "N362SW";
      sa[863] = "N362UA";
      sa[864] = "N363";
      sa[865] = "N363SW";
      sa[866] = "N363UA";
      sa[867] = "N364";
      sa[868] = "N364SW";
      sa[869] = "N364UA";
      sa[870] = "N365";
      sa[871] = "N365SW";
      sa[872] = "N365UA";
      sa[873] = "N366";
      sa[874] = "N366SW";
      sa[875] = "N366UA";
      sa[876] = "N367";
      sa[877] = "N367SW";
      sa[878] = "N367UA";
      sa[879] = "N368";
      sa[880] = "N368SW";
      sa[881] = "N368UA";
      sa[882] = "N369";
      sa[883] = "N369SW";
      sa[884] = "N369UA";
      sa[885] = "N370";
      sa[886] = "N370SW";
      sa[887] = "N370UA";
      sa[888] = "N371";
      sa[889] = "N371<0xE4E2>";
      sa[890] = "N371SW";
      sa[891] = "N371UA";
      sa[892] = "N371US";
      sa[893] = "N372";
      sa[894] = "N372UA";
      sa[895] = "N372US";
      sa[896] = "N373";
      sa[897] = "N373<0xE4E2>";
      sa[898] = "N373UA";
      sa[899] = "N373US";
      sa[900] = "N374";
      sa[901] = "N374<0xE4E2>";
      sa[902] = "N374SW";
      sa[903] = "N374UA";
      sa[904] = "N374US";
      sa[905] = "N375";
      sa[906] = "N375<0xE4E2>";
      sa[907] = "N375UA";
      sa[908] = "N375US";
      sa[909] = "N376";
      sa[910] = "N376<0xE4E2>";
      sa[911] = "N376SW";
      sa[912] = "N376UA";
      sa[913] = "N376US";
      sa[914] = "N377UA";
      sa[915] = "N378";
      sa[916] = "N378SW";
      sa[917] = "N378UA";
      sa[918] = "N379";
      sa[919] = "N379SW";
      sa[920] = "N379UA";
      sa[921] = "N380";
      sa[922] = "N380SW";
      sa[923] = "N380UA";
      sa[924] = "N381UA";
      sa[925] = "N382";
      sa[926] = "N382SW";
      sa[927] = "N382UA";
      sa[928] = "N383";
      sa[929] = "N383<0xE4E2>";
      sa[930] = "N383SW";
      sa[931] = "N383UA";
      sa[932] = "N383US";
      sa[933] = "N384";
      sa[934] = "N384<0xE4E2>";
      sa[935] = "N384SW";
      sa[936] = "N384UA";
      sa[937] = "N384US";
      sa[938] = "N385";
      sa[939] = "N385<0xE4E2>";
      sa[940] = "N385SW";
      sa[941] = "N385UA";
      sa[942] = "N385US";
      sa[943] = "N386";
      sa[944] = "N386SW";
      sa[945] = "N386UA";
      sa[946] = "N387";
      sa[947] = "N38727";
      sa[948] = "N387<0xE4E2>";
      sa[949] = "N387SW";
      sa[950] = "N387UA";
      sa[951] = "N387US";
      sa[952] = "N388";
      sa[953] = "N388SW";
      sa[954] = "N388UA";
      sa[955] = "N389";
      sa[956] = "N389<0xE4E2>";
      sa[957] = "N389SW";
      sa[958] = "N389UA";
      sa[959] = "N389US";
      sa[960] = "N390";
      sa[961] = "N390<0xE4E2>";
      sa[962] = "N390SW";
      sa[963] = "N390UA";
      sa[964] = "N390US";
      sa[965] = "N391";
      sa[966] = "N391<0xE4E2>";
      sa[967] = "N391SW";
      sa[968] = "N391UA";
      sa[969] = "N391US";
      sa[970] = "N392";
      sa[971] = "N392<0xE4E2>";
      sa[972] = "N392SW";
      sa[973] = "N392UA";
      sa[974] = "N392US";
      sa[975] = "N39340";
      sa[976] = "N39343";
      sa[977] = "N393<0xE4E2>";
      sa[978] = "N393UA";
      sa[979] = "N393US";
      sa[980] = "N394";
      sa[981] = "N394<0xE4E2>";
      sa[982] = "N394SW";
      sa[983] = "N394UA";
      sa[984] = "N394US";
      sa[985] = "N395";
      sa[986] = "N395<0xE4E2>";
      sa[987] = "N395SW";
      sa[988] = "N395UA";
      sa[989] = "N395US";
      sa[990] = "N396";
      sa[991] = "N396<0xE4E2>";
      sa[992] = "N396SW";
      sa[993] = "N396UA";
      sa[994] = "N396US";
      sa[995] = "N397";
      sa[996] = "N39726";
      sa[997] = "N397<0xE4E2>";
      sa[998] = "N397SW";
      sa[999] = "N397UA";
      sa[1000] = "N397US";
      sa[1001] = "N398";
      sa[1002] = "N398SW";
      sa[1003] = "N398UA";
      sa[1004] = "N398US";
      sa[1005] = "N399";
      sa[1006] = "N399UA";
      sa[1007] = "N399WN";
      sa[1008] = "N400";
      sa[1009] = "N400AA";
      sa[1010] = "N400DA";
      sa[1011] = "N400WN";
      sa[1012] = "N401";
      sa[1013] = "N401AA";
      sa[1014] = "N401DA";
      sa[1015] = "N401UA";
      sa[1016] = "N401WN";
      sa[1017] = "N402";
      sa[1018] = "N402DA";
      sa[1019] = "N402UA";
      sa[1020] = "N402WN";
      sa[1021] = "N403";
      sa[1022] = "N403AA";
      sa[1023] = "N403DA";
      sa[1024] = "N403UA";
      sa[1025] = "N403WN";
      sa[1026] = "N404<0xE4E2>";
      sa[1027] = "N404AA";
      sa[1028] = "N404DA";
      sa[1029] = "N404UA";
      sa[1030] = "N404US";
      sa[1031] = "N404WN";
      sa[1032] = "N405";
      sa[1033] = "N405<0xE4E2>";
      sa[1034] = "N405AA";
      sa[1035] = "N405DA";
      sa[1036] = "N405EA";
      sa[1037] = "N405UA";
      sa[1038] = "N405US";
      sa[1039] = "N405WN";
      sa[1040] = "N406";
      sa[1041] = "N406<0xE4E2>";
      sa[1042] = "N406AA";
      sa[1043] = "N406DA";
      sa[1044] = "N406UA";
      sa[1045] = "N406US";
      sa[1046] = "N406WN";
      sa[1047] = "N407";
      sa[1048] = "N407<0xE4E2>";
      sa[1049] = "N407AA";
      sa[1050] = "N407DA";
      sa[1051] = "N407UA";
      sa[1052] = "N407US";
      sa[1053] = "N407WN";
      sa[1054] = "N408";
      sa[1055] = "N408<0xE4E2>";
      sa[1056] = "N408DA";
      sa[1057] = "N408EA";
      sa[1058] = "N408UA";
      sa[1059] = "N408US";
      sa[1060] = "N408WN";
      sa[1061] = "N409";
      sa[1062] = "N409<0xE4E2>";
      sa[1063] = "N409AA";
      sa[1064] = "N409DA";
      sa[1065] = "N409UA";
      sa[1066] = "N409US";
      sa[1067] = "N409WN";
      sa[1068] = "N410";
      sa[1069] = "N410AA";
      sa[1070] = "N410EA";
      sa[1071] = "N410UA";
      sa[1072] = "N410WN";
      sa[1073] = "N411";
      sa[1074] = "N411<0xE4E2>";
      sa[1075] = "N411EA";
      sa[1076] = "N411UA";
      sa[1077] = "N411US";
      sa[1078] = "N411WN";
      sa[1079] = "N412";
      sa[1080] = "N412<0xE4E2>";
      sa[1081] = "N412AA";
      sa[1082] = "N412EA";
      sa[1083] = "N412UA";
      sa[1084] = "N412US";
      sa[1085] = "N412WN";
      sa[1086] = "N413";
      sa[1087] = "N413<0xE4E2>";
      sa[1088] = "N413AA";
      sa[1089] = "N413UA";
      sa[1090] = "N413US";
      sa[1091] = "N413WN";
      sa[1092] = "N414";
      sa[1093] = "N414AA";
      sa[1094] = "N414UA";
      sa[1095] = "N414WN";
      sa[1096] = "N415";
      sa[1097] = "N415<0xE4E2>";
      sa[1098] = "N415AA";
      sa[1099] = "N415UA";
      sa[1100] = "N415US";
      sa[1101] = "N415WN";
      sa[1102] = "N416";
      sa[1103] = "N416AA";
      sa[1104] = "N416DA";
      sa[1105] = "N416EA";
      sa[1106] = "N416UA";
      sa[1107] = "N416WN";
      sa[1108] = "N417";
      sa[1109] = "N417<0xE4E2>";
      sa[1110] = "N417AA";
      sa[1111] = "N417EA";
      sa[1112] = "N417UA";
      sa[1113] = "N417US";
      sa[1114] = "N417WN";
      sa[1115] = "N418";
      sa[1116] = "N418<0xE4E2>";
      sa[1117] = "N418AA";
      sa[1118] = "N418DA";
      sa[1119] = "N418EA";
      sa[1120] = "N418UA";
      sa[1121] = "N418US";
      sa[1122] = "N418WN";
      sa[1123] = "N419";
      sa[1124] = "N419<0xE4E2>";
      sa[1125] = "N419AA";
      sa[1126] = "N419DA";
      sa[1127] = "N419UA";
      sa[1128] = "N419US";
      sa[1129] = "N419WN";
      sa[1130] = "N420";
      sa[1131] = "N420<0xE4E2>";
      sa[1132] = "N420AA";
      sa[1133] = "N420DA";
      sa[1134] = "N420UA";
      sa[1135] = "N420US";
      sa[1136] = "N420WN";
      sa[1137] = "N421";
      sa[1138] = "N421<0xE4E2>";
      sa[1139] = "N421AA";
      sa[1140] = "N421DA";
      sa[1141] = "N421LV";
      sa[1142] = "N421UA";
      sa[1143] = "N421US";
      sa[1144] = "N422";
      sa[1145] = "N422<0xE4E2>";
      sa[1146] = "N422AA";
      sa[1147] = "N422UA";
      sa[1148] = "N422US";
      sa[1149] = "N422WN";
      sa[1150] = "N423";
      sa[1151] = "N423<0xE4E2>";
      sa[1152] = "N423AA";
      sa[1153] = "N423UA";
      sa[1154] = "N423US";
      sa[1155] = "N423WN";
      sa[1156] = "N424";
      sa[1157] = "N424<0xE4E2>";
      sa[1158] = "N424UA";
      sa[1159] = "N424US";
      sa[1160] = "N424WN";
      sa[1161] = "N425";
      sa[1162] = "N425<0xE4E2>";
      sa[1163] = "N425AA";
      sa[1164] = "N425LV";
      sa[1165] = "N425UA";
      sa[1166] = "N425US";
      sa[1167] = "N426";
      sa[1168] = "N426<0xE4E2>";
      sa[1169] = "N426AA";
      sa[1170] = "N426UA";
      sa[1171] = "N426US";
      sa[1172] = "N426WN";
      sa[1173] = "N427";
      sa[1174] = "N427<0xE4E2>";
      sa[1175] = "N427UA";
      sa[1176] = "N427US";
      sa[1177] = "N427WN";
      sa[1178] = "N428";
      sa[1179] = "N428<0xE4E2>";
      sa[1180] = "N428AA";
      sa[1181] = "N428UA";
      sa[1182] = "N428US";
      sa[1183] = "N428WN";
      sa[1184] = "N429";
      sa[1185] = "N429<0xE4E2>";
      sa[1186] = "N429AA";
      sa[1187] = "N429UA";
      sa[1188] = "N429US";
      sa[1189] = "N429WN";
      sa[1190] = "N430";
      sa[1191] = "N430<0xE4E2>";
      sa[1192] = "N430AA";
      sa[1193] = "N430UA";
      sa[1194] = "N430US";
      sa[1195] = "N430WN";
      sa[1196] = "N431";
      sa[1197] = "N431<0xE4E2>";
      sa[1198] = "N431AA";
      sa[1199] = "N431UA";
      sa[1200] = "N431US";
      sa[1201] = "N431WN";
      sa[1202] = "N432";
      sa[1203] = "N432<0xE4E2>";
      sa[1204] = "N432UA";
      sa[1205] = "N432US";
      sa[1206] = "N432WN";
      sa[1207] = "N433";
      sa[1208] = "N433<0xE4E2>";
      sa[1209] = "N433LV";
      sa[1210] = "N433UA";
      sa[1211] = "N433US";
      sa[1212] = "N434";
      sa[1213] = "N434<0xE4E2>";
      sa[1214] = "N434AA";
      sa[1215] = "N434UA";
      sa[1216] = "N434US";
      sa[1217] = "N434WN";
      sa[1218] = "N435";
      sa[1219] = "N435<0xE4E2>";
      sa[1220] = "N435AA";
      sa[1221] = "N435UA";
      sa[1222] = "N435US";
      sa[1223] = "N435WN";
      sa[1224] = "N436";
      sa[1225] = "N436<0xE4E2>";
      sa[1226] = "N436UA";
      sa[1227] = "N436US";
      sa[1228] = "N436WN";
      sa[1229] = "N437";
      sa[1230] = "N437<0xE4E2>";
      sa[1231] = "N437UA";
      sa[1232] = "N437US";
      sa[1233] = "N437WN";
      sa[1234] = "N438";
      sa[1235] = "N438<0xE4E2>";
      sa[1236] = "N438UA";
      sa[1237] = "N438US";
      sa[1238] = "N438WN";
      sa[1239] = "N439";
      sa[1240] = "N439<0xE4E2>";
      sa[1241] = "N439UA";
      sa[1242] = "N439US";
      sa[1243] = "N439WN";
      sa[1244] = "N440";
      sa[1245] = "N440<0xE4E2>";
      sa[1246] = "N440AA";
      sa[1247] = "N440LV";
      sa[1248] = "N440UA";
      sa[1249] = "N440US";
      sa[1250] = "N441";
      sa[1251] = "N441<0xE4E2>";
      sa[1252] = "N441AA";
      sa[1253] = "N441UA";
      sa[1254] = "N441US";
      sa[1255] = "N441WN";
      sa[1256] = "N442";
      sa[1257] = "N442<0xE4E2>";
      sa[1258] = "N442UA";
      sa[1259] = "N442US";
      sa[1260] = "N442WN";
      sa[1261] = "N443";
      sa[1262] = "N443<0xE4E2>";
      sa[1263] = "N443AA";
      sa[1264] = "N443UA";
      sa[1265] = "N443US";
      sa[1266] = "N443WN";
      sa[1267] = "N444";
      sa[1268] = "N444<0xE4E2>";
      sa[1269] = "N444AA";
      sa[1270] = "N444UA";
      sa[1271] = "N444US";
      sa[1272] = "N444WN";
      sa[1273] = "N445";
      sa[1274] = "N445<0xE4E2>";
      sa[1275] = "N445AA";
      sa[1276] = "N445UA";
      sa[1277] = "N445US";
      sa[1278] = "N445WN";
      sa[1279] = "N446";
      sa[1280] = "N446<0xE4E2>";
      sa[1281] = "N446AA";
      sa[1282] = "N446UA";
      sa[1283] = "N446US";
      sa[1284] = "N446WN";
      sa[1285] = "N447";
      sa[1286] = "N447<0xE4E2>";
      sa[1287] = "N447AA";
      sa[1288] = "N447UA";
      sa[1289] = "N447US";
      sa[1290] = "N447WN";
      sa[1291] = "N448";
      sa[1292] = "N448<0xE4E2>";
      sa[1293] = "N448AA";
      sa[1294] = "N448UA";
      sa[1295] = "N448US";
      sa[1296] = "N448WN";
      sa[1297] = "N449";
      sa[1298] = "N449<0xE4E2>";
      sa[1299] = "N449AA";
      sa[1300] = "N449UA";
      sa[1301] = "N449US";
      sa[1302] = "N449WN";
      sa[1303] = "N450";
      sa[1304] = "N450AA";
      sa[1305] = "N450UA";
      sa[1306] = "N450WN";
      sa[1307] = "N451";
      sa[1308] = "N451AA";
      sa[1309] = "N451UA";
      sa[1310] = "N451WN";
      sa[1311] = "N452";
      sa[1312] = "N452AA";
      sa[1313] = "N452UA";
      sa[1314] = "N452WN";
      sa[1315] = "N453AA";
      sa[1316] = "N453UA";
      sa[1317] = "N453WN";
      sa[1318] = "N454";
      sa[1319] = "N454UA";
      sa[1320] = "N454WN";
      sa[1321] = "N455";
      sa[1322] = "N455AA";
      sa[1323] = "N455UA";
      sa[1324] = "N455WN";
      sa[1325] = "N456";
      sa[1326] = "N456AA";
      sa[1327] = "N456UA";
      sa[1328] = "N456WN";
      sa[1329] = "N457";
      sa[1330] = "N457AA";
      sa[1331] = "N457UA";
      sa[1332] = "N457WN";
      sa[1333] = "N458";
      sa[1334] = "N458AA";
      sa[1335] = "N458UA";
      sa[1336] = "N458WN";
      sa[1337] = "N459";
      sa[1338] = "N459AA";
      sa[1339] = "N459UA";
      sa[1340] = "N459WN";
      sa[1341] = "N460";
      sa[1342] = "N460AA";
      sa[1343] = "N460UA";
      sa[1344] = "N460WN";
      sa[1345] = "N461";
      sa[1346] = "N461AA";
      sa[1347] = "N461UA";
      sa[1348] = "N461WN";
      sa[1349] = "N462";
      sa[1350] = "N462AA";
      sa[1351] = "N462UA";
      sa[1352] = "N462WN";
      sa[1353] = "N463AA";
      sa[1354] = "N463UA";
      sa[1355] = "N463WN";
      sa[1356] = "N464";
      sa[1357] = "N464AA";
      sa[1358] = "N464UA";
      sa[1359] = "N464WN";
      sa[1360] = "N465";
      sa[1361] = "N465UA";
      sa[1362] = "N465WN";
      sa[1363] = "N466";
      sa[1364] = "N46625";
      sa[1365] = "N466UA";
      sa[1366] = "N466WN";
      sa[1367] = "N467";
      sa[1368] = "N467AA";
      sa[1369] = "N467UA";
      sa[1370] = "N467WN";
      sa[1371] = "N468";
      sa[1372] = "N468AA";
      sa[1373] = "N468DA";
      sa[1374] = "N468UA";
      sa[1375] = "N468WN";
      sa[1376] = "N469";
      sa[1377] = "N469AA";
      sa[1378] = "N469DA";
      sa[1379] = "N469UA";
      sa[1380] = "N469WN";
      sa[1381] = "N470";
      sa[1382] = "N470AA";
      sa[1383] = "N470DA";
      sa[1384] = "N470UA";
      sa[1385] = "N470WN";
      sa[1386] = "N471AA";
      sa[1387] = "N471UA";
      sa[1388] = "N472";
      sa[1389] = "N472AA";
      sa[1390] = "N472UA";
      sa[1391] = "N472WN";
      sa[1392] = "N473";
      sa[1393] = "N47332";
      sa[1394] = "N473AA";
      sa[1395] = "N473UA";
      sa[1396] = "N473WN";
      sa[1397] = "N474";
      sa[1398] = "N474AA";
      sa[1399] = "N474UA";
      sa[1400] = "N474WN";
      sa[1401] = "N475";
      sa[1402] = "N475AA";
      sa[1403] = "N475DA";
      sa[1404] = "N475UA";
      sa[1405] = "N475WN";
      sa[1406] = "N476";
      sa[1407] = "N476AA";
      sa[1408] = "N476DA";
      sa[1409] = "N476UA";
      sa[1410] = "N476WN";
      sa[1411] = "N477";
      sa[1412] = "N477AA";
      sa[1413] = "N477DA";
      sa[1414] = "N477UA";
      sa[1415] = "N477WN";
      sa[1416] = "N478";
      sa[1417] = "N478AA";
      sa[1418] = "N478DA";
      sa[1419] = "N478UA";
      sa[1420] = "N478WN";
      sa[1421] = "N479";
      sa[1422] = "N479AA";
      sa[1423] = "N479UA";
      sa[1424] = "N479WN";
      sa[1425] = "N480";
      sa[1426] = "N480AA";
      sa[1427] = "N480UA";
      sa[1428] = "N480WN";
      sa[1429] = "N481AA";
      sa[1430] = "N481UA";
      sa[1431] = "N481WN";
      sa[1432] = "N482";
      sa[1433] = "N482AA";
      sa[1434] = "N482DA";
      sa[1435] = "N482UA";
      sa[1436] = "N482WN";
      sa[1437] = "N483";
      sa[1438] = "N483AA";
      sa[1439] = "N483DA";
      sa[1440] = "N483UA";
      sa[1441] = "N483WN";
      sa[1442] = "N484";
      sa[1443] = "N484AA";
      sa[1444] = "N484DA";
      sa[1445] = "N484UA";
      sa[1446] = "N484WN";
      sa[1447] = "N485";
      sa[1448] = "N485AA";
      sa[1449] = "N485DA";
      sa[1450] = "N485UA";
      sa[1451] = "N485WN";
      sa[1452] = "N486";
      sa[1453] = "N486AA";
      sa[1454] = "N486UA";
      sa[1455] = "N486WN";
      sa[1456] = "N487";
      sa[1457] = "N487AA";
      sa[1458] = "N487UA";
      sa[1459] = "N487WN";
      sa[1460] = "N488";
      sa[1461] = "N488AA";
      sa[1462] = "N488UA";
      sa[1463] = "N488WN";
      sa[1464] = "N489";
      sa[1465] = "N489AA";
      sa[1466] = "N489DA";
      sa[1467] = "N489UA";
      sa[1468] = "N489WN";
      sa[1469] = "N490";
      sa[1470] = "N490DA";
      sa[1471] = "N490UA";
      sa[1472] = "N490WN";
      sa[1473] = "N491";
      sa[1474] = "N491AA";
      sa[1475] = "N491SA";
      sa[1476] = "N491UA";
      sa[1477] = "N491WN";
      sa[1478] = "N492";
      sa[1479] = "N492AA";
      sa[1480] = "N492DA";
      sa[1481] = "N492UA";
      sa[1482] = "N492WN";
      sa[1483] = "N493";
      sa[1484] = "N493DA";
      sa[1485] = "N493UA";
      sa[1486] = "N493WN";
      sa[1487] = "N494";
      sa[1488] = "N494AA";
      sa[1489] = "N494DA";
      sa[1490] = "N494UA";
      sa[1491] = "N494WN";
      sa[1492] = "N495";
      sa[1493] = "N495AA";
      sa[1494] = "N495DA";
      sa[1495] = "N495UA";
      sa[1496] = "N495WN";
      sa[1497] = "N496";
      sa[1498] = "N496AA";
      sa[1499] = "N496UA";
      sa[1500] = "N496WN";
      sa[1501] = "N497";
      sa[1502] = "N497AA";
      sa[1503] = "N497DA";
      sa[1504] = "N497UA";
      sa[1505] = "N497WN";
      sa[1506] = "N498";
      sa[1507] = "N498AA";
      sa[1508] = "N498DA";
      sa[1509] = "N498UA";
      sa[1510] = "N498WN";
      sa[1511] = "N499";
      sa[1512] = "N499AA";
      sa[1513] = "N499DA";
      sa[1514] = "N499WN";
      sa[1515] = "N50";
      sa[1516] = "N501";
      sa[1517] = "N501AA";
      sa[1518] = "N501AU";
      sa[1519] = "N501DA";
      sa[1520] = "N501SW";
      sa[1521] = "N501UA";
      sa[1522] = "N502";
      sa[1523] = "N502AU";
      sa[1524] = "N502SW";
      sa[1525] = "N502UA";
      sa[1526] = "N503";
      sa[1527] = "N503AA";
      sa[1528] = "N503AU";
      sa[1529] = "N503SW";
      sa[1530] = "N503UA";
      sa[1531] = "N504";
      sa[1532] = "N504A<0xE4>";
      sa[1533] = "N504AA";
      sa[1534] = "N504AU";
      sa[1535] = "N504DA";
      sa[1536] = "N504SW";
      sa[1537] = "N504UA";
      sa[1538] = "N505";
      sa[1539] = "N505A<0xE4>";
      sa[1540] = "N505AA";
      sa[1541] = "N505AU";
      sa[1542] = "N505DA";
      sa[1543] = "N505UA";
      sa[1544] = "N506";
      sa[1545] = "N506A<0xE4>";
      sa[1546] = "N506AA";
      sa[1547] = "N506AU";
      sa[1548] = "N506DA";
      sa[1549] = "N506SW";
      sa[1550] = "N506UA";
      sa[1551] = "N507";
      sa[1552] = "N507A<0xE4>";
      sa[1553] = "N507AA";
      sa[1554] = "N507AU";
      sa[1555] = "N507DA";
      sa[1556] = "N507SW";
      sa[1557] = "N507UA";
      sa[1558] = "N508";
      sa[1559] = "N508A<0xE4>";
      sa[1560] = "N508AA";
      sa[1561] = "N508AU";
      sa[1562] = "N508DA";
      sa[1563] = "N508UA";
      sa[1564] = "N509";
      sa[1565] = "N509AA";
      sa[1566] = "N509AU";
      sa[1567] = "N509DA";
      sa[1568] = "N509DC";
      sa[1569] = "N509SW";
      sa[1570] = "N509UA";
      sa[1571] = "N51";
      sa[1572] = "N510";
      sa[1573] = "N510A<0xE4>";
      sa[1574] = "N510AA";
      sa[1575] = "N510AU";
      sa[1576] = "N510DA";
      sa[1577] = "N510UA";
      sa[1578] = "N511";
      sa[1579] = "N511A<0xE4>";
      sa[1580] = "N511AA";
      sa[1581] = "N511AU";
      sa[1582] = "N511DA";
      sa[1583] = "N511SW";
      sa[1584] = "N511UA";
      sa[1585] = "N512";
      sa[1586] = "N512A<0xE4>";
      sa[1587] = "N512AU";
      sa[1588] = "N512DA";
      sa[1589] = "N512SW";
      sa[1590] = "N512UA";
      sa[1591] = "N513";
      sa[1592] = "N513DA";
      sa[1593] = "N513SW";
      sa[1594] = "N513UA";
      sa[1595] = "N514";
      sa[1596] = "N514A<0xE4>";
      sa[1597] = "N514AA";
      sa[1598] = "N514AU";
      sa[1599] = "N514DA";
      sa[1600] = "N514SW";
      sa[1601] = "N514UA";
      sa[1602] = "N515";
      sa[1603] = "N515A<0xE4>";
      sa[1604] = "N515AA";
      sa[1605] = "N515AU";
      sa[1606] = "N515DA";
      sa[1607] = "N515SW";
      sa[1608] = "N515UA";
      sa[1609] = "N516A<0xE4>";
      sa[1610] = "N516AA";
      sa[1611] = "N516AU";
      sa[1612] = "N516DA";
      sa[1613] = "N516UA";
      sa[1614] = "N517A<0xE4>";
      sa[1615] = "N517AA";
      sa[1616] = "N517AU";
      sa[1617] = "N517DA";
      sa[1618] = "N517UA";
      sa[1619] = "N518A<0xE4>";
      sa[1620] = "N518AU";
      sa[1621] = "N518DA";
      sa[1622] = "N518UA";
      sa[1623] = "N519";
      sa[1624] = "N519A<0xE4>";
      sa[1625] = "N519AA";
      sa[1626] = "N519AU";
      sa[1627] = "N519DA";
      sa[1628] = "N519SW";
      sa[1629] = "N519UA";
      sa[1630] = "N52";
      sa[1631] = "N520";
      sa[1632] = "N520A<0xE4>";
      sa[1633] = "N520AA";
      sa[1634] = "N520AU";
      sa[1635] = "N520DA";
      sa[1636] = "N520SW";
      sa[1637] = "N520UA";
      sa[1638] = "N521";
      sa[1639] = "N521A<0xE4>";
      sa[1640] = "N521AA";
      sa[1641] = "N521AU";
      sa[1642] = "N521DA";
      sa[1643] = "N521SW";
      sa[1644] = "N521UA";
      sa[1645] = "N522";
      sa[1646] = "N522A<0xE4>";
      sa[1647] = "N522AA";
      sa[1648] = "N522AU";
      sa[1649] = "N522DA";
      sa[1650] = "N522SW";
      sa[1651] = "N522UA";
      sa[1652] = "N523";
      sa[1653] = "N52312";
      sa[1654] = "N52313";
      sa[1655] = "N523A<0xE4>";
      sa[1656] = "N523AA";
      sa[1657] = "N523AU";
      sa[1658] = "N523DA";
      sa[1659] = "N523SW";
      sa[1660] = "N523UA";
      sa[1661] = "N524";
      sa[1662] = "N524A<0xE4>";
      sa[1663] = "N524AA";
      sa[1664] = "N524AU";
      sa[1665] = "N524UA";
      sa[1666] = "N525";
      sa[1667] = "N525A<0xE4>";
      sa[1668] = "N525AA";
      sa[1669] = "N525AU";
      sa[1670] = "N525DA";
      sa[1671] = "N525SW";
      sa[1672] = "N525UA";
      sa[1673] = "N526";
      sa[1674] = "N52616";
      sa[1675] = "N526A<0xE4>";
      sa[1676] = "N526AU";
      sa[1677] = "N526DA";
      sa[1678] = "N526UA";
      sa[1679] = "N527";
      sa[1680] = "N527A<0xE4>";
      sa[1681] = "N527AA";
      sa[1682] = "N527AU";
      sa[1683] = "N527DA";
      sa[1684] = "N527SW";
      sa[1685] = "N527UA";
      sa[1686] = "N528";
      sa[1687] = "N528A<0xE4>";
      sa[1688] = "N528AA";
      sa[1689] = "N528AU";
      sa[1690] = "N528DA";
      sa[1691] = "N528SW";
      sa[1692] = "N528UA";
      sa[1693] = "N529A<0xE4>";
      sa[1694] = "N529AA";
      sa[1695] = "N529AU";
      sa[1696] = "N529DA";
      sa[1697] = "N529UA";
      sa[1698] = "N53";
      sa[1699] = "N530A<0xE4>";
      sa[1700] = "N530AA";
      sa[1701] = "N530AU";
      sa[1702] = "N530UA";
      sa[1703] = "N531A<0xE4>";
      sa[1704] = "N531AA";
      sa[1705] = "N531AU";
      sa[1706] = "N531DA";
      sa[1707] = "N531UA";
      sa[1708] = "N532A<0xE4>";
      sa[1709] = "N532AA";
      sa[1710] = "N532AU";
      sa[1711] = "N532DA";
      sa[1712] = "N532UA";
      sa[1713] = "N533A<0xE4>";
      sa[1714] = "N533AA";
      sa[1715] = "N533AU";
      sa[1716] = "N533DA";
      sa[1717] = "N533UA";
      sa[1718] = "N534A<0xE4>";
      sa[1719] = "N534AA";
      sa[1720] = "N534AU";
      sa[1721] = "N534DA";
      sa[1722] = "N534UA";
      sa[1723] = "N535AA";
      sa[1724] = "N535DA";
      sa[1725] = "N535UA";
      sa[1726] = "N536AA";
      sa[1727] = "N536DA";
      sa[1728] = "N536UA";
      sa[1729] = "N537AA";
      sa[1730] = "N537DA";
      sa[1731] = "N537UA";
      sa[1732] = "N538AA";
      sa[1733] = "N538DA";
      sa[1734] = "N538UA";
      sa[1735] = "N539AA";
      sa[1736] = "N539DA";
      sa[1737] = "N539UA";
      sa[1738] = "N54";
      sa[1739] = "N540AA";
      sa[1740] = "N540DA";
      sa[1741] = "N540UA";
      sa[1742] = "N541AA";
      sa[1743] = "N541DA";
      sa[1744] = "N541UA";
      sa[1745] = "N542AA";
      sa[1746] = "N542DA";
      sa[1747] = "N542UA";
      sa[1748] = "N54325";
      sa[1749] = "N54326";
      sa[1750] = "N54327";
      sa[1751] = "N54329";
      sa[1752] = "N54333";
      sa[1753] = "N54334";
      sa[1754] = "N54335";
      sa[1755] = "N54336";
      sa[1756] = "N54338";
      sa[1757] = "N54340";
      sa[1758] = "N54341";
      sa[1759] = "N54342";
      sa[1760] = "N54344";
      sa[1761] = "N54348";
      sa[1762] = "N54349";
      sa[1763] = "N54350";
      sa[1764] = "N54351";
      sa[1765] = "N54353";
      sa[1766] = "N54354";
      sa[1767] = "N543AA";
      sa[1768] = "N543DA";
      sa[1769] = "N543UA";
      sa[1770] = "N544AA";
      sa[1771] = "N544DA";
      sa[1772] = "N545AA";
      sa[1773] = "N545DA";
      sa[1774] = "N545UA";
      sa[1775] = "N546AA";
      sa[1776] = "N546DA";
      sa[1777] = "N546UA";
      sa[1778] = "N54711";
      sa[1779] = "N547AA";
      sa[1780] = "N547UA";
      sa[1781] = "N548AA";
      sa[1782] = "N548UA";
      sa[1783] = "N549AA";
      sa[1784] = "N55";
      sa[1785] = "N550AA";
      sa[1786] = "N550UA";
      sa[1787] = "N550WN";
      sa[1788] = "N551AA";
      sa[1789] = "N551UA";
      sa[1790] = "N551WN";
      sa[1791] = "N552AA";
      sa[1792] = "N552UA";
      sa[1793] = "N553AA";
      sa[1794] = "N553UA";
      sa[1795] = "N554UA";
      sa[1796] = "N555AA";
      sa[1797] = "N555UA";
      sa[1798] = "N556AA";
      sa[1799] = "N556UA";
      sa[1800] = "N557AA";
      sa[1801] = "N557UA";
      sa[1802] = "N558A<0xE4>";
      sa[1803] = "N558AA";
      sa[1804] = "N558AU";
      sa[1805] = "N558UA";
      sa[1806] = "N559A<0xE4>";
      sa[1807] = "N559AA";
      sa[1808] = "N559AU";
      sa[1809] = "N559UA";
      sa[1810] = "N56";
      sa[1811] = "N560A<0xE4>";
      sa[1812] = "N560AU";
      sa[1813] = "N560UA";
      sa[1814] = "N561UA";
      sa[1815] = "N562A<0xE4>";
      sa[1816] = "N562AA";
      sa[1817] = "N562AU";
      sa[1818] = "N562UA";
      sa[1819] = "N563<0xE4E2>";
      sa[1820] = "N563UA";
      sa[1821] = "N563US";
      sa[1822] = "N564UA";
      sa[1823] = "N565UA";
      sa[1824] = "N566UA";
      sa[1825] = "N567AA";
      sa[1826] = "N567UA";
      sa[1827] = "N568AA";
      sa[1828] = "N568UA";
      sa[1829] = "N569AA";
      sa[1830] = "N569UA";
      sa[1831] = "N57";
      sa[1832] = "N570AA";
      sa[1833] = "N570UA";
      sa[1834] = "N571UA";
      sa[1835] = "N572UA";
      sa[1836] = "N573<0xE4E2>";
      sa[1837] = "N573AA";
      sa[1838] = "N573UA";
      sa[1839] = "N573US";
      sa[1840] = "N574<0xE4E2>";
      sa[1841] = "N574AA";
      sa[1842] = "N574UA";
      sa[1843] = "N574US";
      sa[1844] = "N575<0xE4E2>";
      sa[1845] = "N575UA";
      sa[1846] = "N575US";
      sa[1847] = "N576<0xE4E2>";
      sa[1848] = "N576AA";
      sa[1849] = "N576UA";
      sa[1850] = "N576US";
      sa[1851] = "N577<0xE4E2>";
      sa[1852] = "N577AA";
      sa[1853] = "N577UA";
      sa[1854] = "N577US";
      sa[1855] = "N578UA";
      sa[1856] = "N578US";
      sa[1857] = "N579AA";
      sa[1858] = "N579UA";
      sa[1859] = "N579US";
      sa[1860] = "N580AA";
      sa[1861] = "N580UA";
      sa[1862] = "N581AA";
      sa[1863] = "N581UA";
      sa[1864] = "N581US";
      sa[1865] = "N582AA";
      sa[1866] = "N582UA";
      sa[1867] = "N582US";
      sa[1868] = "N583UA";
      sa[1869] = "N583US";
      sa[1870] = "N584<0xE4E2>";
      sa[1871] = "N584AA";
      sa[1872] = "N584UA";
      sa[1873] = "N584US";
      sa[1874] = "N585<0xE4E2>";
      sa[1875] = "N585AA";
      sa[1876] = "N585UA";
      sa[1877] = "N585US";
      sa[1878] = "N586<0xE4E2>";
      sa[1879] = "N586AA";
      sa[1880] = "N586UA";
      sa[1881] = "N586US";
      sa[1882] = "N587<0xE4E2>";
      sa[1883] = "N587AA";
      sa[1884] = "N587UA";
      sa[1885] = "N587US";
      sa[1886] = "N588<0xE4E2>";
      sa[1887] = "N588UA";
      sa[1888] = "N588US";
      sa[1889] = "N589<0xE4E2>";
      sa[1890] = "N589UA";
      sa[1891] = "N589US";
      sa[1892] = "N59";
      sa[1893] = "N590<0xE4E2>";
      sa[1894] = "N590AA";
      sa[1895] = "N590UA";
      sa[1896] = "N590US";
      sa[1897] = "N591<0xE4E2>";
      sa[1898] = "N591US";
      sa[1899] = "N592<0xE4E2>";
      sa[1900] = "N592UA";
      sa[1901] = "N592US";
      sa[1902] = "N59338";
      sa[1903] = "N593AA";
      sa[1904] = "N593UA";
      sa[1905] = "N594AA";
      sa[1906] = "N594UA";
      sa[1907] = "N595AA";
      sa[1908] = "N595UA";
      sa[1909] = "N596AA";
      sa[1910] = "N596UA";
      sa[1911] = "N597AA";
      sa[1912] = "N599AA";
      sa[1913] = "N5BRAA";
      sa[1914] = "N5BSAA";
      sa[1915] = "N5BTAA";
      sa[1916] = "N5BVAA";
      sa[1917] = "N5BWAA";
      sa[1918] = "N5CAAA";
      sa[1919] = "N5CCAA";
      sa[1920] = "N5CDAA";
      sa[1921] = "N5CFAA";
      sa[1922] = "N5CGAA";
      sa[1923] = "N5CHAA";
      sa[1924] = "N5CKAA";
      sa[1925] = "N5CLAA";
      sa[1926] = "N5CMAA";
      sa[1927] = "N5CXAA";
      sa[1928] = "N5DEAA";
      sa[1929] = "N5DHAA";
      sa[1930] = "N5DJAA";
      sa[1931] = "N5DMAA";
      sa[1932] = "N5DNAA";
      sa[1933] = "N5DRAA";
      sa[1934] = "N5DSAA";
      sa[1935] = "N5DTAA";
      sa[1936] = "N5DVAA";
      sa[1937] = "N5DXAA";
      sa[1938] = "N5DYAA";
      sa[1939] = "N5EAAA";
      sa[1940] = "N5EDAA";
      sa[1941] = "N5EFAA";
      sa[1942] = "N5EGAA";
      sa[1943] = "N5EHAA";
      sa[1944] = "N5ELAA";
      sa[1945] = "N60";
      sa[1946] = "N600";
      sa[1947] = "N600A<0xE4>";
      sa[1948] = "N600AU";
      sa[1949] = "N600WN";
      sa[1950] = "N601";
      sa[1951] = "N601A<0xE4>";
      sa[1952] = "N601AU";
      sa[1953] = "N601AW";
      sa[1954] = "N601DL";
      sa[1955] = "N601WN";
      sa[1956] = "N602";
      sa[1957] = "N602A<0xE4>";
      sa[1958] = "N602AU";
      sa[1959] = "N602SW";
      sa[1960] = "N603";
      sa[1961] = "N60312";
      sa[1962] = "N603A<0xE4>";
      sa[1963] = "N603AU";
      sa[1964] = "N603AW";
      sa[1965] = "N603DL";
      sa[1966] = "N603SW";
      sa[1967] = "N604";
      sa[1968] = "N604A<0xE4>";
      sa[1969] = "N604AU";
      sa[1970] = "N604AW";
      sa[1971] = "N604DL";
      sa[1972] = "N604SW";
      sa[1973] = "N605";
      sa[1974] = "N605A<0xE4>";
      sa[1975] = "N605AU";
      sa[1976] = "N605AW";
      sa[1977] = "N605DL";
      sa[1978] = "N605SW";
      sa[1979] = "N606";
      sa[1980] = "N606A<0xE4>";
      sa[1981] = "N606AU";
      sa[1982] = "N606DL";
      sa[1983] = "N606SW";
      sa[1984] = "N607";
      sa[1985] = "N607A<0xE4>";
      sa[1986] = "N607AU";
      sa[1987] = "N607DL";
      sa[1988] = "N607SW";
      sa[1989] = "N608";
      sa[1990] = "N608A<0xE4>";
      sa[1991] = "N608AU";
      sa[1992] = "N608DA";
      sa[1993] = "N608SW";
      sa[1994] = "N609";
      sa[1995] = "N609A<0xE4>";
      sa[1996] = "N609AU";
      sa[1997] = "N609DL";
      sa[1998] = "N609SW";
      sa[1999] = "N61";
      sa[2000] = "N610";
      sa[2001] = "N610A<0xE4>";
      sa[2002] = "N610AU";
      sa[2003] = "N610DL";
      sa[2004] = "N610SW";
      sa[2005] = "N610WN";
      sa[2006] = "N611";
      sa[2007] = "N611A<0xE4>";
      sa[2008] = "N611AA";
      sa[2009] = "N611AU";
      sa[2010] = "N611DL";
      sa[2011] = "N611SW";
      sa[2012] = "N612";
      sa[2013] = "N612A<0xE4>";
      sa[2014] = "N612AU";
      sa[2015] = "N612DL";
      sa[2016] = "N612SW";
      sa[2017] = "N613";
      sa[2018] = "N613A<0xE4>";
      sa[2019] = "N613AA";
      sa[2020] = "N613AU";
      sa[2021] = "N613DL";
      sa[2022] = "N613SW";
      sa[2023] = "N613UA";
      sa[2024] = "N614";
      sa[2025] = "N614A<0xE4>";
      sa[2026] = "N614AA";
      sa[2027] = "N614AU";
      sa[2028] = "N614DL";
      sa[2029] = "N614SW";
      sa[2030] = "N615";
      sa[2031] = "N615A<0xE4>";
      sa[2032] = "N615AU";
      sa[2033] = "N615DL";
      sa[2034] = "N615SW";
      sa[2035] = "N616";
      sa[2036] = "N616A<0xE4>";
      sa[2037] = "N616AA";
      sa[2038] = "N616AU";
      sa[2039] = "N616AW";
      sa[2040] = "N616DL";
      sa[2041] = "N616SW";
      sa[2042] = "N617";
      sa[2043] = "N617A<0xE4>";
      sa[2044] = "N617AU";
      sa[2045] = "N617DL";
      sa[2046] = "N617SW";
      sa[2047] = "N618";
      sa[2048] = "N618A<0xE4>";
      sa[2049] = "N618AU";
      sa[2050] = "N618AW";
      sa[2051] = "N618DL";
      sa[2052] = "N618WN";
      sa[2053] = "N619";
      sa[2054] = "N619A<0xE4>";
      sa[2055] = "N619AU";
      sa[2056] = "N619AW";
      sa[2057] = "N619DL";
      sa[2058] = "N619SW";
      sa[2059] = "N62";
      sa[2060] = "N620";
      sa[2061] = "N620A<0xE4>";
      sa[2062] = "N620AU";
      sa[2063] = "N620AW";
      sa[2064] = "N620DL";
      sa[2065] = "N620SW";
      sa[2066] = "N621";
      sa[2067] = "N621A<0xE4>";
      sa[2068] = "N621AA";
      sa[2069] = "N621AU";
      sa[2070] = "N621AW";
      sa[2071] = "N621DL";
      sa[2072] = "N621SW";
      sa[2073] = "N622";
      sa[2074] = "N622A<0xE4>";
      sa[2075] = "N622AA";
      sa[2076] = "N622AU";
      sa[2077] = "N622AW";
      sa[2078] = "N622DL";
      sa[2079] = "N622SW";
      sa[2080] = "N623";
      sa[2081] = "N623A<0xE4>";
      sa[2082] = "N623AA";
      sa[2083] = "N623AU";
      sa[2084] = "N623DL";
      sa[2085] = "N623SW";
      sa[2086] = "N624";
      sa[2087] = "N624A<0xE4>";
      sa[2088] = "N624AU";
      sa[2089] = "N624AW";
      sa[2090] = "N624DL";
      sa[2091] = "N624SW";
      sa[2092] = "N625";
      sa[2093] = "N625A<0xE4>";
      sa[2094] = "N625AU";
      sa[2095] = "N625AW";
      sa[2096] = "N625DL";
      sa[2097] = "N625SW";
      sa[2098] = "N626";
      sa[2099] = "N626A<0xE4>";
      sa[2100] = "N626AU";
      sa[2101] = "N626AW";
      sa[2102] = "N626DL";
      sa[2103] = "N626SW";
      sa[2104] = "N627";
      sa[2105] = "N627A<0xE4>";
      sa[2106] = "N627AA";
      sa[2107] = "N627AU";
      sa[2108] = "N627AW";
      sa[2109] = "N627DL";
      sa[2110] = "N627SW";
      sa[2111] = "N628";
      sa[2112] = "N628A<0xE4>";
      sa[2113] = "N628AU";
      sa[2114] = "N628AW";
      sa[2115] = "N628DL";
      sa[2116] = "N628SW";
      sa[2117] = "N629";
      sa[2118] = "N629A<0xE4>";
      sa[2119] = "N629AU";
      sa[2120] = "N629AW";
      sa[2121] = "N629DL";
      sa[2122] = "N629SW";
      sa[2123] = "N63";
      sa[2124] = "N630";
      sa[2125] = "N630A<0xE4>";
      sa[2126] = "N630AA";
      sa[2127] = "N630AU";
      sa[2128] = "N630DL";
      sa[2129] = "N630WN";
      sa[2130] = "N631";
      sa[2131] = "N631A<0xE4>";
      sa[2132] = "N631AU";
      sa[2133] = "N631AW";
      sa[2134] = "N631DL";
      sa[2135] = "N631SW";
      sa[2136] = "N632";
      sa[2137] = "N632A<0xE4>";
      sa[2138] = "N632AU";
      sa[2139] = "N632AW";
      sa[2140] = "N632DL";
      sa[2141] = "N632SW";
      sa[2142] = "N633";
      sa[2143] = "N63305";
      sa[2144] = "N633A<0xE4>";
      sa[2145] = "N633AU";
      sa[2146] = "N633AW";
      sa[2147] = "N633DL";
      sa[2148] = "N633SW";
      sa[2149] = "N634";
      sa[2150] = "N634AW";
      sa[2151] = "N634DL";
      sa[2152] = "N634SW";
      sa[2153] = "N635";
      sa[2154] = "N635AW";
      sa[2155] = "N635DL";
      sa[2156] = "N635SW";
      sa[2157] = "N636";
      sa[2158] = "N636AW";
      sa[2159] = "N636DL";
      sa[2160] = "N636WN";
      sa[2161] = "N637";
      sa[2162] = "N637AW";
      sa[2163] = "N637DL";
      sa[2164] = "N637SW";
      sa[2165] = "N638";
      sa[2166] = "N638AW";
      sa[2167] = "N638DL";
      sa[2168] = "N638SW";
      sa[2169] = "N639";
      sa[2170] = "N639AW";
      sa[2171] = "N639DL";
      sa[2172] = "N639SW";
      sa[2173] = "N64";
      sa[2174] = "N640";
      sa[2175] = "N640AW";
      sa[2176] = "N640DL";
      sa[2177] = "N640SW";
      sa[2178] = "N641";
      sa[2179] = "N641AA";
      sa[2180] = "N641AW";
      sa[2181] = "N641DL";
      sa[2182] = "N641SW";
      sa[2183] = "N642";
      sa[2184] = "N642AW";
      sa[2185] = "N642DL";
      sa[2186] = "N642UA";
      sa[2187] = "N642WN";
      sa[2188] = "N643";
      sa[2189] = "N64315";
      sa[2190] = "N64319";
      sa[2191] = "N64320";
      sa[2192] = "N64322";
      sa[2193] = "N64347";
      sa[2194] = "N643AW";
      sa[2195] = "N643SW";
      sa[2196] = "N644";
      sa[2197] = "N644AW";
      sa[2198] = "N644DL";
      sa[2199] = "N645";
      sa[2200] = "N645AW";
      sa[2201] = "N645DL";
      sa[2202] = "N645SW";
      sa[2203] = "N645US";
      sa[2204] = "N646";
      sa[2205] = "N646AW";
      sa[2206] = "N646DL";
      sa[2207] = "N646SW";
      sa[2208] = "N646US";
      sa[2209] = "N647";
      sa[2210] = "N647AW";
      sa[2211] = "N647DL";
      sa[2212] = "N647SW";
      sa[2213] = "N648";
      sa[2214] = "N648AW";
      sa[2215] = "N648DL";
      sa[2216] = "N648SW";
      sa[2217] = "N648UA";
      sa[2218] = "N648US";
      sa[2219] = "N649";
      sa[2220] = "N649AW";
      sa[2221] = "N649DL";
      sa[2222] = "N649SW";
      sa[2223] = "N649US";
      sa[2224] = "N650";
      sa[2225] = "N650AW";
      sa[2226] = "N650DL";
      sa[2227] = "N650SW";
      sa[2228] = "N651";
      sa[2229] = "N651AW";
      sa[2230] = "N651DL";
      sa[2231] = "N651SW";
      sa[2232] = "N651US";
      sa[2233] = "N652";
      sa[2234] = "N652AW";
      sa[2235] = "N652DL";
      sa[2236] = "N652SW";
      sa[2237] = "N652US";
      sa[2238] = "N653";
      sa[2239] = "N653AW";
      sa[2240] = "N653DL";
      sa[2241] = "N653SW";
      sa[2242] = "N654";
      sa[2243] = "N654AW";
      sa[2244] = "N654DL";
      sa[2245] = "N654SW";
      sa[2246] = "N655";
      sa[2247] = "N655AW";
      sa[2248] = "N655DL";
      sa[2249] = "N655US";
      sa[2250] = "N655WN";
      sa[2251] = "N656AW";
      sa[2252] = "N656DL";
      sa[2253] = "N656SW";
      sa[2254] = "N656US";
      sa[2255] = "N657AW";
      sa[2256] = "N657DL";
      sa[2257] = "N657SW";
      sa[2258] = "N658";
      sa[2259] = "N658AW";
      sa[2260] = "N658DL";
      sa[2261] = "N658SW";
      sa[2262] = "N659";
      sa[2263] = "N659AW";
      sa[2264] = "N659DL";
      sa[2265] = "N659SW";
      sa[2266] = "N660";
      sa[2267] = "N660AW";
      sa[2268] = "N660DL";
      sa[2269] = "N660SW";
      sa[2270] = "N661";
      sa[2271] = "N661AW";
      sa[2272] = "N661SW";
      sa[2273] = "N662";
      sa[2274] = "N662AW";
      sa[2275] = "N662DN";
      sa[2276] = "N662SW";
      sa[2277] = "N662UA";
      sa[2278] = "N663";
      sa[2279] = "N663AW";
      sa[2280] = "N663DN";
      sa[2281] = "N663SW";
      sa[2282] = "N664";
      sa[2283] = "N664DN";
      sa[2284] = "N664UA";
      sa[2285] = "N664WN";
      sa[2286] = "N665";
      sa[2287] = "N665AW";
      sa[2288] = "N665DN";
      sa[2289] = "N665WN";
      sa[2290] = "N666DN";
      sa[2291] = "N667";
      sa[2292] = "N667AW";
      sa[2293] = "N667DN";
      sa[2294] = "N667SW";
      sa[2295] = "N668";
      sa[2296] = "N668AW";
      sa[2297] = "N668DN";
      sa[2298] = "N669";
      sa[2299] = "N669AW";
      sa[2300] = "N669DN";
      sa[2301] = "N669SW";
      sa[2302] = "N67";
      sa[2303] = "N670";
      sa[2304] = "N6700";
      sa[2305] = "N6702";
      sa[2306] = "N670DN";
      sa[2307] = "N670SW";
      sa[2308] = "N670UA";
      sa[2309] = "N671";
      sa[2310] = "N671DN";
      sa[2311] = "N671SW";
      sa[2312] = "N672";
      sa[2313] = "N672AW";
      sa[2314] = "N672DL";
      sa[2315] = "N672SW";
      sa[2316] = "N672UA";
      sa[2317] = "N673";
      sa[2318] = "N673AA";
      sa[2319] = "N673AW";
      sa[2320] = "N673DL";
      sa[2321] = "N673UA";
      sa[2322] = "N674";
      sa[2323] = "N674AA";
      sa[2324] = "N674AW";
      sa[2325] = "N674DL";
      sa[2326] = "N674UA";
      sa[2327] = "N675";
      sa[2328] = "N675AA";
      sa[2329] = "N675AW";
      sa[2330] = "N675DL";
      sa[2331] = "N676";
      sa[2332] = "N676AW";
      sa[2333] = "N676DL";
      sa[2334] = "N676SW";
      sa[2335] = "N677";
      sa[2336] = "N677AA";
      sa[2337] = "N677AW";
      sa[2338] = "N677DL";
      sa[2339] = "N678";
      sa[2340] = "N678AA";
      sa[2341] = "N678AW";
      sa[2342] = "N678DL";
      sa[2343] = "N679";
      sa[2344] = "N679AA";
      sa[2345] = "N679AW";
      sa[2346] = "N679DA";
      sa[2347] = "N68";
      sa[2348] = "N680";
      sa[2349] = "N680AA";
      sa[2350] = "N680AW";
      sa[2351] = "N680DA";
      sa[2352] = "N681DA";
      sa[2353] = "N682";
      sa[2354] = "N682DA";
      sa[2355] = "N682SW";
      sa[2356] = "N683";
      sa[2357] = "N683DA";
      sa[2358] = "N683SW";
      sa[2359] = "N684";
      sa[2360] = "N684DA";
      sa[2361] = "N684WN";
      sa[2362] = "N685";
      sa[2363] = "N685DA";
      sa[2364] = "N685SW";
      sa[2365] = "N686";
      sa[2366] = "N686DA";
      sa[2367] = "N686SW";
      sa[2368] = "N687";
      sa[2369] = "N687DL";
      sa[2370] = "N687SW";
      sa[2371] = "N688";
      sa[2372] = "N688DL";
      sa[2373] = "N688SW";
      sa[2374] = "N689";
      sa[2375] = "N689SW";
      sa[2376] = "N690";
      sa[2377] = "N690DL";
      sa[2378] = "N690SW";
      sa[2379] = "N691";
      sa[2380] = "N691WN";
      sa[2381] = "N692";
      sa[2382] = "N692DL";
      sa[2383] = "N692SW";
      sa[2384] = "N693";
      sa[2385] = "N69311";
      sa[2386] = "N693DL";
      sa[2387] = "N693SW";
      sa[2388] = "N694";
      sa[2389] = "N694DA";
      sa[2390] = "N694SW";
      sa[2391] = "N695";
      sa[2392] = "N695SW";
      sa[2393] = "N696";
      sa[2394] = "N696SW";
      sa[2395] = "N697";
      sa[2396] = "N697DL";
      sa[2397] = "N697SW";
      sa[2398] = "N698";
      sa[2399] = "N698DL";
      sa[2400] = "N698SW";
      sa[2401] = "N699";
      sa[2402] = "N699SW";
      sa[2403] = "N700";
      sa[2404] = "N700<0xE4E6>";
      sa[2405] = "N700GS";
      sa[2406] = "N700UW";
      sa[2407] = "N701";
      sa[2408] = "N701<0xE4E6>";
      sa[2409] = "N701AA";
      sa[2410] = "N701GS";
      sa[2411] = "N701UW";
      sa[2412] = "N702";
      sa[2413] = "N702<0xE4E6>";
      sa[2414] = "N702AA";
      sa[2415] = "N702UW";
      sa[2416] = "N703";
      sa[2417] = "N703<0xE4E6>";
      sa[2418] = "N703AA";
      sa[2419] = "N703SW";
      sa[2420] = "N703UW";
      sa[2421] = "N704";
      sa[2422] = "N704<0xE4E6>";
      sa[2423] = "N704SW";
      sa[2424] = "N704UW";
      sa[2425] = "N705";
      sa[2426] = "N705<0xE4E6>";
      sa[2427] = "N705AA";
      sa[2428] = "N705SW";
      sa[2429] = "N705UW";
      sa[2430] = "N706";
      sa[2431] = "N706<0xE4E6>";
      sa[2432] = "N706AA";
      sa[2433] = "N706SW";
      sa[2434] = "N706UW";
      sa[2435] = "N707";
      sa[2436] = "N707<0xE4E6>";
      sa[2437] = "N707AA";
      sa[2438] = "N707SA";
      sa[2439] = "N707UW";
      sa[2440] = "N708";
      sa[2441] = "N708<0xE4E6>";
      sa[2442] = "N708AA";
      sa[2443] = "N708SA";
      sa[2444] = "N708UW";
      sa[2445] = "N709";
      sa[2446] = "N709<0xE4E6>";
      sa[2447] = "N709AA";
      sa[2448] = "N709SW";
      sa[2449] = "N709UW";
      sa[2450] = "N71";
      sa[2451] = "N710";
      sa[2452] = "N710<0xE4E6>";
      sa[2453] = "N710AA";
      sa[2454] = "N710SW";
      sa[2455] = "N710UW";
      sa[2456] = "N711";
      sa[2457] = "N711<0xE4E6>";
      sa[2458] = "N711HK";
      sa[2459] = "N711UW";
      sa[2460] = "N712";
      sa[2461] = "N712<0xE4E6>";
      sa[2462] = "N712AA";
      sa[2463] = "N712SW";
      sa[2464] = "N712UW";
      sa[2465] = "N713";
      sa[2466] = "N713<0xE4E6>";
      sa[2467] = "N713AA";
      sa[2468] = "N713SW";
      sa[2469] = "N713UW";
      sa[2470] = "N714";
      sa[2471] = "N714<0xE4E6>";
      sa[2472] = "N714CB";
      sa[2473] = "N714UW";
      sa[2474] = "N715";
      sa[2475] = "N715<0xE4E6>";
      sa[2476] = "N715AA";
      sa[2477] = "N715SW";
      sa[2478] = "N715UW";
      sa[2479] = "N716";
      sa[2480] = "N716<0xE4E6>";
      sa[2481] = "N716SW";
      sa[2482] = "N716UW";
      sa[2483] = "N717";
      sa[2484] = "N717<0xE4E6>";
      sa[2485] = "N717SA";
      sa[2486] = "N717UW";
      sa[2487] = "N718";
      sa[2488] = "N718<0xE4E6>";
      sa[2489] = "N718SW";
      sa[2490] = "N718UW";
      sa[2491] = "N719";
      sa[2492] = "N719<0xE4E6>";
      sa[2493] = "N719SW";
      sa[2494] = "N719UW";
      sa[2495] = "N720";
      sa[2496] = "N720<0xE4E6>";
      sa[2497] = "N720WN";
      sa[2498] = "N721";
      sa[2499] = "N721<0xE4E6>";
      sa[2500] = "N721UW";
      sa[2501] = "N722";
      sa[2502] = "N722<0xE4E6>";
      sa[2503] = "N722UW";
      sa[2504] = "N723";
      sa[2505] = "N723<0xE4E6>";
      sa[2506] = "N723AA";
      sa[2507] = "N723SW";
      sa[2508] = "N723UW";
      sa[2509] = "N724";
      sa[2510] = "N724<0xE4E6>";
      sa[2511] = "N724SW";
      sa[2512] = "N724UW";
      sa[2513] = "N725";
      sa[2514] = "N7251U";
      sa[2515] = "N7252U";
      sa[2516] = "N7253U";
      sa[2517] = "N7254U";
      sa[2518] = "N7255U";
      sa[2519] = "N7256U";
      sa[2520] = "N7257U";
      sa[2521] = "N7258U";
      sa[2522] = "N7259U";
      sa[2523] = "N725<0xE4E6>";
      sa[2524] = "N725SW";
      sa[2525] = "N725UW";
      sa[2526] = "N726";
      sa[2527] = "N7260U";
      sa[2528] = "N7261U";
      sa[2529] = "N7262U";
      sa[2530] = "N7263U";
      sa[2531] = "N7264U";
      sa[2532] = "N7265U";
      sa[2533] = "N7266U";
      sa[2534] = "N7267U";
      sa[2535] = "N7268U";
      sa[2536] = "N7269U";
      sa[2537] = "N726<0xE4E6>";
      sa[2538] = "N726SW";
      sa[2539] = "N727";
      sa[2540] = "N7270U";
      sa[2541] = "N7271U";
      sa[2542] = "N7272U";
      sa[2543] = "N7273U";
      sa[2544] = "N7274U";
      sa[2545] = "N7275U";
      sa[2546] = "N7276U";
      sa[2547] = "N7277U";
      sa[2548] = "N7278U";
      sa[2549] = "N7279U";
      sa[2550] = "N727<0xE4E6>";
      sa[2551] = "N727SW";
      sa[2552] = "N728";
      sa[2553] = "N7280U";
      sa[2554] = "N7281U";
      sa[2555] = "N7282U";
      sa[2556] = "N7283U";
      sa[2557] = "N7284U";
      sa[2558] = "N7285U";
      sa[2559] = "N7286U";
      sa[2560] = "N7287U";
      sa[2561] = "N7288U";
      sa[2562] = "N7289U";
      sa[2563] = "N728<0xE4E6>";
      sa[2564] = "N728SW";
      sa[2565] = "N728UW";
      sa[2566] = "N729";
      sa[2567] = "N7290U";
      sa[2568] = "N7291U";
      sa[2569] = "N7292U";
      sa[2570] = "N7293U";
      sa[2571] = "N7294U";
      sa[2572] = "N7295U";
      sa[2573] = "N7297U";
      sa[2574] = "N7298U";
      sa[2575] = "N7299U";
      sa[2576] = "N729<0xE4E6>";
      sa[2577] = "N729SW";
      sa[2578] = "N73";
      sa[2579] = "N730";
      sa[2580] = "N730<0xE4E6>";
      sa[2581] = "N730AA";
      sa[2582] = "N730MA";
      sa[2583] = "N730SW";
      sa[2584] = "N730UW";
      sa[2585] = "N731";
      sa[2586] = "N731AA";
      sa[2587] = "N731SA";
      sa[2588] = "N732";
      sa[2589] = "N732<0xE4E6>";
      sa[2590] = "N732SW";
      sa[2591] = "N732UW";
      sa[2592] = "N733";
      sa[2593] = "N73380";
      sa[2594] = "N733<0xE4E6>";
      sa[2595] = "N733SA";
      sa[2596] = "N733SW";
      sa[2597] = "N733UW";
      sa[2598] = "N734";
      sa[2599] = "N734SA";
      sa[2600] = "N734SW";
      sa[2601] = "N735";
      sa[2602] = "N735SA";
      sa[2603] = "N736";
      sa[2604] = "N736<0xE4E6>";
      sa[2605] = "N736SA";
      sa[2606] = "N737";
      sa[2607] = "N737<0xE4E6>";
      sa[2608] = "N737JW";
      sa[2609] = "N737UW";
      sa[2610] = "N738";
      sa[2611] = "N738<0xE4E6>";
      sa[2612] = "N738CB";
      sa[2613] = "N738UW";
      sa[2614] = "N739";
      sa[2615] = "N739<0xE4E6>";
      sa[2616] = "N739GB";
      sa[2617] = "N74";
      sa[2618] = "N740";
      sa[2619] = "N740<0xE4E6>";
      sa[2620] = "N740SW";
      sa[2621] = "N740UW";
      sa[2622] = "N741";
      sa[2623] = "N741<0xE4E6>";
      sa[2624] = "N741SA";
      sa[2625] = "N741UW";
      sa[2626] = "N742";
      sa[2627] = "N742<0xE4E6>";
      sa[2628] = "N742SW";
      sa[2629] = "N742UW";
      sa[2630] = "N743";
      sa[2631] = "N743<0xE4E6>";
      sa[2632] = "N743SW";
      sa[2633] = "N744";
      sa[2634] = "N7441U";
      sa[2635] = "N7442U";
      sa[2636] = "N7443U";
      sa[2637] = "N7444U";
      sa[2638] = "N7445U";
      sa[2639] = "N7446U";
      sa[2640] = "N7447U";
      sa[2641] = "N7448U";
      sa[2642] = "N7449U";
      sa[2643] = "N744<0xE4E6>";
      sa[2644] = "N744SW";
      sa[2645] = "N744UW";
      sa[2646] = "N745";
      sa[2647] = "N7450U";
      sa[2648] = "N7451U";
      sa[2649] = "N7452U";
      sa[2650] = "N7453U";
      sa[2651] = "N7454U";
      sa[2652] = "N7455U";
      sa[2653] = "N7456U";
      sa[2654] = "N7458U";
      sa[2655] = "N7459U";
      sa[2656] = "N745<0xE4E6>";
      sa[2657] = "N745SW";
      sa[2658] = "N745UW";
      sa[2659] = "N746";
      sa[2660] = "N7460U";
      sa[2661] = "N7461U";
      sa[2662] = "N7462U";
      sa[2663] = "N7463U";
      sa[2664] = "N7464U";
      sa[2665] = "N7465U";
      sa[2666] = "N7466U";
      sa[2667] = "N7467U";
      sa[2668] = "N746<0xE4E6>";
      sa[2669] = "N746SW";
      sa[2670] = "N746UW";
      sa[2671] = "N747";
      sa[2672] = "N747<0xE4E6>";
      sa[2673] = "N747SA";
      sa[2674] = "N747UW";
      sa[2675] = "N748";
      sa[2676] = "N748<0xE4E6>";
      sa[2677] = "N748SW";
      sa[2678] = "N748UW";
      sa[2679] = "N749";
      sa[2680] = "N749<0xE4E6>";
      sa[2681] = "N749SW";
      sa[2682] = "N749UW";
      sa[2683] = "N750";
      sa[2684] = "N750AT";
      sa[2685] = "N750SA";
      sa[2686] = "N750UW";
      sa[2687] = "N751";
      sa[2688] = "N751AT";
      sa[2689] = "N751SW";
      sa[2690] = "N751UW";
      sa[2691] = "N752";
      sa[2692] = "N752SW";
      sa[2693] = "N752UW";
      sa[2694] = "N753";
      sa[2695] = "N753SW";
      sa[2696] = "N753UW";
      sa[2697] = "N754";
      sa[2698] = "N754SW";
      sa[2699] = "N754UW";
      sa[2700] = "N755";
      sa[2701] = "N755SA";
      sa[2702] = "N755UW";
      sa[2703] = "N756";
      sa[2704] = "N756SA";
      sa[2705] = "N756UW";
      sa[2706] = "N757";
      sa[2707] = "N757AT";
      sa[2708] = "N757LV";
      sa[2709] = "N757UW";
      sa[2710] = "N758";
      sa[2711] = "N758<0xE4E6>";
      sa[2712] = "N758SW";
      sa[2713] = "N758UW";
      sa[2714] = "N759";
      sa[2715] = "N759GS";
      sa[2716] = "N760";
      sa[2717] = "N760<0xE4E6>";
      sa[2718] = "N760UW";
      sa[2719] = "N761";
      sa[2720] = "N761RR";
      sa[2721] = "N762";
      sa[2722] = "N762<0xE4E6>";
      sa[2723] = "N762SW";
      sa[2724] = "N762UW";
      sa[2725] = "N763";
      sa[2726] = "N763<0xE4E6>";
      sa[2727] = "N763SW";
      sa[2728] = "N763UW";
      sa[2729] = "N764<0xE4E6>";
      sa[2730] = "N764SW";
      sa[2731] = "N764UW";
      sa[2732] = "N765";
      sa[2733] = "N765<0xE4E6>";
      sa[2734] = "N765SW";
      sa[2735] = "N765UW";
      sa[2736] = "N766";
      sa[2737] = "N766<0xE4E6>";
      sa[2738] = "N766SW";
      sa[2739] = "N766UW";
      sa[2740] = "N767";
      sa[2741] = "N767<0xE4E6>";
      sa[2742] = "N767SW";
      sa[2743] = "N767UW";
      sa[2744] = "N768";
      sa[2745] = "N768<0xE4E6>";
      sa[2746] = "N768SW";
      sa[2747] = "N768UW";
      sa[2748] = "N769";
      sa[2749] = "N769<0xE4E6>";
      sa[2750] = "N769SW";
      sa[2751] = "N769UW";
      sa[2752] = "N770";
      sa[2753] = "N770<0xE4E6>";
      sa[2754] = "N770SA";
      sa[2755] = "N770UW";
      sa[2756] = "N771";
      sa[2757] = "N771SA";
      sa[2758] = "N772";
      sa[2759] = "N772SW";
      sa[2760] = "N772UA";
      sa[2761] = "N773";
      sa[2762] = "N77303";
      sa[2763] = "N773SA";
      sa[2764] = "N774";
      sa[2765] = "N774SW";
      sa[2766] = "N774UA";
      sa[2767] = "N775";
      sa[2768] = "N775A<0xE4>";
      sa[2769] = "N775AU";
      sa[2770] = "N775SW";
      sa[2771] = "N776";
      sa[2772] = "N776A<0xE4>";
      sa[2773] = "N776AU";
      sa[2774] = "N776WN";
      sa[2775] = "N777";
      sa[2776] = "N777A<0xE4>";
      sa[2777] = "N777AU";
      sa[2778] = "N777QC";
      sa[2779] = "N778";
      sa[2780] = "N778A<0xE4>";
      sa[2781] = "N778AU";
      sa[2782] = "N778SW";
      sa[2783] = "N779";
      sa[2784] = "N779A<0xE4>";
      sa[2785] = "N779AU";
      sa[2786] = "N779SW";
      sa[2787] = "N780";
      sa[2788] = "N780A<0xE4>";
      sa[2789] = "N780AU";
      sa[2790] = "N780SW";
      sa[2791] = "N781";
      sa[2792] = "N781A<0xE4>";
      sa[2793] = "N781AU";
      sa[2794] = "N781WN";
      sa[2795] = "N782";
      sa[2796] = "N782A<0xE4>";
      sa[2797] = "N782AU";
      sa[2798] = "N782SA";
      sa[2799] = "N783";
      sa[2800] = "N783A<0xE4>";
      sa[2801] = "N783AU";
      sa[2802] = "N783SW";
      sa[2803] = "N784";
      sa[2804] = "N784A<0xE4>";
      sa[2805] = "N784AU";
      sa[2806] = "N784SW";
      sa[2807] = "N785";
      sa[2808] = "N785A<0xE4>";
      sa[2809] = "N785AU";
      sa[2810] = "N785SW";
      sa[2811] = "N786";
      sa[2812] = "N786SW";
      sa[2813] = "N787";
      sa[2814] = "N787SA";
      sa[2815] = "N787UA";
      sa[2816] = "N788";
      sa[2817] = "N788SA";
      sa[2818] = "N789";
      sa[2819] = "N789SW";
      sa[2820] = "N790";
      sa[2821] = "N790SW";
      sa[2822] = "N791SW";
      sa[2823] = "N792";
      sa[2824] = "N792SW";
      sa[2825] = "N792UA";
      sa[2826] = "N793";
      sa[2827] = "N793SA";
      sa[2828] = "N793UA";
      sa[2829] = "N794";
      sa[2830] = "N794SW";
      sa[2831] = "N795";
      sa[2832] = "N795SW";
      sa[2833] = "N796";
      sa[2834] = "N796SW";
      sa[2835] = "N797";
      sa[2836] = "N797MX";
      sa[2837] = "N798";
      sa[2838] = "N798SW";
      sa[2839] = "N799";
      sa[2840] = "N799SW";
      sa[2841] = "N80";
      sa[2842] = "N800<0xE4E2>";
      sa[2843] = "N800US";
      sa[2844] = "N801<0xE4E2>";
      sa[2845] = "N801AW";
      sa[2846] = "N801MA";
      sa[2847] = "N801UA";
      sa[2848] = "N801US";
      sa[2849] = "N802<0xE4E2>";
      sa[2850] = "N802AW";
      sa[2851] = "N802MD";
      sa[2852] = "N802UA";
      sa[2853] = "N802US";
      sa[2854] = "N803<0xE4E2>";
      sa[2855] = "N803AW";
      sa[2856] = "N803UA";
      sa[2857] = "N803US";
      sa[2858] = "N804<0xE4E2>";
      sa[2859] = "N804AW";
      sa[2860] = "N804MD";
      sa[2861] = "N804UA";
      sa[2862] = "N804US";
      sa[2863] = "N805<0xE4E2>";
      sa[2864] = "N805AW";
      sa[2865] = "N805EA";
      sa[2866] = "N805UA";
      sa[2867] = "N805US";
      sa[2868] = "N806<0xE4E2>";
      sa[2869] = "N806AW";
      sa[2870] = "N806UA";
      sa[2871] = "N806US";
      sa[2872] = "N807AW";
      sa[2873] = "N807MD";
      sa[2874] = "N807UA";
      sa[2875] = "N807US";
      sa[2876] = "N808<0xE4E2>";
      sa[2877] = "N808AW";
      sa[2878] = "N808MD";
      sa[2879] = "N808UA";
      sa[2880] = "N808US";
      sa[2881] = "N809<0xE4E2>";
      sa[2882] = "N809AW";
      sa[2883] = "N809UA";
      sa[2884] = "N809US";
      sa[2885] = "N81";
      sa[2886] = "N810<0xE4E2>";
      sa[2887] = "N810AW";
      sa[2888] = "N810UA";
      sa[2889] = "N810US";
      sa[2890] = "N811<0xE4E2>";
      sa[2891] = "N811MD";
      sa[2892] = "N811UA";
      sa[2893] = "N811US";
      sa[2894] = "N812<0xE4E2>";
      sa[2895] = "N812AW";
      sa[2896] = "N812MD";
      sa[2897] = "N812UA";
      sa[2898] = "N812US";
      sa[2899] = "N813<0xE4E2>";
      sa[2900] = "N813AW";
      sa[2901] = "N813MA";
      sa[2902] = "N813UA";
      sa[2903] = "N813US";
      sa[2904] = "N814<0xE4E2>";
      sa[2905] = "N814AW";
      sa[2906] = "N814MD";
      sa[2907] = "N814UA";
      sa[2908] = "N814US";
      sa[2909] = "N815<0xE4E2>";
      sa[2910] = "N815AW";
      sa[2911] = "N815UA";
      sa[2912] = "N815US";
      sa[2913] = "N816<0xE4E2>";
      sa[2914] = "N816MA";
      sa[2915] = "N816UA";
      sa[2916] = "N817<0xE4E2>";
      sa[2917] = "N817AW";
      sa[2918] = "N817MD";
      sa[2919] = "N817UA";
      sa[2920] = "N817US";
      sa[2921] = "N818<0xE4E2>";
      sa[2922] = "N818AA";
      sa[2923] = "N818AW";
      sa[2924] = "N818MD";
      sa[2925] = "N818UA";
      sa[2926] = "N818US";
      sa[2927] = "N819<0xE4E2>";
      sa[2928] = "N819AW";
      sa[2929] = "N819MD";
      sa[2930] = "N819UA";
      sa[2931] = "N819US";
      sa[2932] = "N82";
      sa[2933] = "N820<0xE4E2>";
      sa[2934] = "N820AW";
      sa[2935] = "N820MD";
      sa[2936] = "N820UA";
      sa[2937] = "N820US";
      sa[2938] = "N821<0xE4E2>";
      sa[2939] = "N821AW";
      sa[2940] = "N821MD";
      sa[2941] = "N821UA";
      sa[2942] = "N821US";
      sa[2943] = "N822<0xE4E2>";
      sa[2944] = "N822AW";
      sa[2945] = "N822MD";
      sa[2946] = "N822UA";
      sa[2947] = "N822US";
      sa[2948] = "N823<0xE4E2>";
      sa[2949] = "N823AW";
      sa[2950] = "N823UA";
      sa[2951] = "N823US";
      sa[2952] = "N824<0xE4E2>";
      sa[2953] = "N824AW";
      sa[2954] = "N824UA";
      sa[2955] = "N824US";
      sa[2956] = "N825<0xE4E2>";
      sa[2957] = "N825AW";
      sa[2958] = "N825UA";
      sa[2959] = "N825US";
      sa[2960] = "N826<0xE4E2>";
      sa[2961] = "N826AW";
      sa[2962] = "N826MD";
      sa[2963] = "N826UA";
      sa[2964] = "N826US";
      sa[2965] = "N827<0xE4E2>";
      sa[2966] = "N827AW";
      sa[2967] = "N827UA";
      sa[2968] = "N827US";
      sa[2969] = "N828<0xE4E2>";
      sa[2970] = "N828AW";
      sa[2971] = "N828UA";
      sa[2972] = "N828US";
      sa[2973] = "N829<0xE4E2>";
      sa[2974] = "N829AW";
      sa[2975] = "N829UA";
      sa[2976] = "N829US";
      sa[2977] = "N830<0xE4E2>";
      sa[2978] = "N830AW";
      sa[2979] = "N830UA";
      sa[2980] = "N830US";
      sa[2981] = "N830WA";
      sa[2982] = "N831AW";
      sa[2983] = "N831L";
      sa[2984] = "N831UA";
      sa[2985] = "N831WA";
      sa[2986] = "N832AW";
      sa[2987] = "N832UA";
      sa[2988] = "N833AW";
      sa[2989] = "N833UA";
      sa[2990] = "N834AW";
      sa[2991] = "N834UA";
      sa[2992] = "N835AW";
      sa[2993] = "N835UA";
      sa[2994] = "N836UA";
      sa[2995] = "N837AW";
      sa[2996] = "N837UA";
      sa[2997] = "N838UA";
      sa[2998] = "N839UA";
      sa[2999] = "N840UA";
    }
  }
  static final class gbm_pojo_test_ColInfo_4_1 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[3000] = "N841UA";
      sa[3001] = "N842UA";
      sa[3002] = "N84355";
      sa[3003] = "N843UA";
      sa[3004] = "N844UA";
      sa[3005] = "N845UA";
      sa[3006] = "N846UA";
      sa[3007] = "N847UA";
      sa[3008] = "N848UA";
      sa[3009] = "N849UA";
      sa[3010] = "N85";
      sa[3011] = "N850<0xE4E2>";
      sa[3012] = "N850UA";
      sa[3013] = "N850US";
      sa[3014] = "N851<0xE4E2>";
      sa[3015] = "N851UA";
      sa[3016] = "N851US";
      sa[3017] = "N852<0xE4E2>";
      sa[3018] = "N852UA";
      sa[3019] = "N852US";
      sa[3020] = "N853<0xE4E2>";
      sa[3021] = "N853UA";
      sa[3022] = "N853US";
      sa[3023] = "N854<0xE4E2>";
      sa[3024] = "N854UA";
      sa[3025] = "N854US";
      sa[3026] = "N855<0xE4E2>";
      sa[3027] = "N855UA";
      sa[3028] = "N855US";
      sa[3029] = "N856<0xE4E2>";
      sa[3030] = "N856US";
      sa[3031] = "N857<0xE4E2>";
      sa[3032] = "N857US";
      sa[3033] = "N858<0xE4E2>";
      sa[3034] = "N858US";
      sa[3035] = "N859<0xE4E2>";
      sa[3036] = "N859US";
      sa[3037] = "N86";
      sa[3038] = "N860<0xE4E2>";
      sa[3039] = "N860US";
      sa[3040] = "N861<0xE4E2>";
      sa[3041] = "N861US";
      sa[3042] = "N862<0xE4E2>";
      sa[3043] = "N862AA";
      sa[3044] = "N862US";
      sa[3045] = "N863<0xE4E2>";
      sa[3046] = "N863US";
      sa[3047] = "N864<0xE4E2>";
      sa[3048] = "N864US";
      sa[3049] = "N865<0xE4E2>";
      sa[3050] = "N865US";
      sa[3051] = "N866<0xE4E2>";
      sa[3052] = "N866US";
      sa[3053] = "N867<0xE4E2>";
      sa[3054] = "N867AA";
      sa[3055] = "N867US";
      sa[3056] = "N868<0xE4E2>";
      sa[3057] = "N868AA";
      sa[3058] = "N868US";
      sa[3059] = "N869<0xE4E2>";
      sa[3060] = "N869AA";
      sa[3061] = "N869US";
      sa[3062] = "N87";
      sa[3063] = "N873AA";
      sa[3064] = "N877AA";
      sa[3065] = "N878AA";
      sa[3066] = "N880<0xE4E2>";
      sa[3067] = "N880AA";
      sa[3068] = "N880US";
      sa[3069] = "N881<0xE4E2>";
      sa[3070] = "N881US";
      sa[3071] = "N882<0xE4E2>";
      sa[3072] = "N882US";
      sa[3073] = "N883<0xE4E2>";
      sa[3074] = "N883US";
      sa[3075] = "N884<0xE4E2>";
      sa[3076] = "N884US";
      sa[3077] = "N885<0xE4E2>";
      sa[3078] = "N885AA";
      sa[3079] = "N885US";
      sa[3080] = "N886<0xE4E2>";
      sa[3081] = "N886US";
      sa[3082] = "N8873Z";
      sa[3083] = "N8875Z";
      sa[3084] = "N887<0xE4E2>";
      sa[3085] = "N887US";
      sa[3086] = "N8882Z";
      sa[3087] = "N8889Z";
      sa[3088] = "N888A<0xE4>";
      sa[3089] = "N888AU";
      sa[3090] = "N8891Z";
      sa[3091] = "N889<0xE4E2>";
      sa[3092] = "N889US";
      sa[3093] = "N89";
      sa[3094] = "N890<0xE4E2>";
      sa[3095] = "N890AA";
      sa[3096] = "N890US";
      sa[3097] = "N891<0xE4E2>";
      sa[3098] = "N891AA";
      sa[3099] = "N891US";
      sa[3100] = "N892<0xE4E2>";
      sa[3101] = "N892AA";
      sa[3102] = "N892US";
      sa[3103] = "N893<0xE4E2>";
      sa[3104] = "N893AA";
      sa[3105] = "N893US";
      sa[3106] = "N894<0xE4E2>";
      sa[3107] = "N894AA";
      sa[3108] = "N894US";
      sa[3109] = "N895<0xE4E2>";
      sa[3110] = "N895AA";
      sa[3111] = "N895US";
      sa[3112] = "N896<0xE4E2>";
      sa[3113] = "N896AA";
      sa[3114] = "N896US";
      sa[3115] = "N897<0xE4E2>";
      sa[3116] = "N897AA";
      sa[3117] = "N897US";
      sa[3118] = "N898<0xE4E2>";
      sa[3119] = "N898AA";
      sa[3120] = "N898US";
      sa[3121] = "N899<0xE4E2>";
      sa[3122] = "N899AA";
      sa[3123] = "N899US";
      sa[3124] = "N90";
      sa[3125] = "N9003U";
      sa[3126] = "N9007U";
      sa[3127] = "N9009U";
      sa[3128] = "N900DE";
      sa[3129] = "N900PC";
      sa[3130] = "N900WN";
      sa[3131] = "N9010U";
      sa[3132] = "N9013U";
      sa[3133] = "N901AW";
      sa[3134] = "N901DL";
      sa[3135] = "N901TW";
      sa[3136] = "N901UA";
      sa[3137] = "N901WN";
      sa[3138] = "N9022U";
      sa[3139] = "N9024U";
      sa[3140] = "N9027U";
      sa[3141] = "N902AW";
      sa[3142] = "N902DL";
      sa[3143] = "N902TW";
      sa[3144] = "N902UA";
      sa[3145] = "N902WN";
      sa[3146] = "N9030U";
      sa[3147] = "N9032U";
      sa[3148] = "N9039U";
      sa[3149] = "N903AW";
      sa[3150] = "N903DE";
      sa[3151] = "N903TW";
      sa[3152] = "N903UA";
      sa[3153] = "N9040U";
      sa[3154] = "N904AW";
      sa[3155] = "N904DE";
      sa[3156] = "N904TW";
      sa[3157] = "N904UA";
      sa[3158] = "N9051U";
      sa[3159] = "N9053U";
      sa[3160] = "N905AW";
      sa[3161] = "N905DE";
      sa[3162] = "N905DL";
      sa[3163] = "N905TW";
      sa[3164] = "N905UA";
      sa[3165] = "N9060U";
      sa[3166] = "N9063U";
      sa[3167] = "N9065U";
      sa[3168] = "N9067U";
      sa[3169] = "N9068U";
      sa[3170] = "N9069U";
      sa[3171] = "N906AW";
      sa[3172] = "N906DL";
      sa[3173] = "N906TW";
      sa[3174] = "N906UA";
      sa[3175] = "N9072U";
      sa[3176] = "N907AW";
      sa[3177] = "N907TW";
      sa[3178] = "N907UA";
      sa[3179] = "N908AW";
      sa[3180] = "N908DE";
      sa[3181] = "N908DL";
      sa[3182] = "N908TW";
      sa[3183] = "N908UA";
      sa[3184] = "N909AW";
      sa[3185] = "N909DE";
      sa[3186] = "N909TW";
      sa[3187] = "N909UA";
      sa[3188] = "N91";
      sa[3189] = "N910AW";
      sa[3190] = "N910DE";
      sa[3191] = "N910DL";
      sa[3192] = "N910UA";
      sa[3193] = "N911DE";
      sa[3194] = "N911DL";
      sa[3195] = "N911TW";
      sa[3196] = "N911UA";
      sa[3197] = "N912DE";
      sa[3198] = "N912TW";
      sa[3199] = "N912UA";
      sa[3200] = "N912VJ";
      sa[3201] = "N913AW";
      sa[3202] = "N913DE";
      sa[3203] = "N913DL";
      sa[3204] = "N913TW";
      sa[3205] = "N913UA";
      sa[3206] = "N913VJ";
      sa[3207] = "N914AW";
      sa[3208] = "N914DE";
      sa[3209] = "N914DL";
      sa[3210] = "N914TW";
      sa[3211] = "N914UA";
      sa[3212] = "N914VJ";
      sa[3213] = "N915AW";
      sa[3214] = "N915DE";
      sa[3215] = "N915DL";
      sa[3216] = "N915TW";
      sa[3217] = "N915UA";
      sa[3218] = "N916AW";
      sa[3219] = "N916DE";
      sa[3220] = "N916DL";
      sa[3221] = "N916TW";
      sa[3222] = "N916UA";
      sa[3223] = "N916VJ";
      sa[3224] = "N917DE";
      sa[3225] = "N917DL";
      sa[3226] = "N917TW";
      sa[3227] = "N917UA";
      sa[3228] = "N918DE";
      sa[3229] = "N918DL";
      sa[3230] = "N918TW";
      sa[3231] = "N918UA";
      sa[3232] = "N918VJ";
      sa[3233] = "N919DE";
      sa[3234] = "N919DL";
      sa[3235] = "N919TW";
      sa[3236] = "N919UA";
      sa[3237] = "N919VJ";
      sa[3238] = "N92";
      sa[3239] = "N920DL";
      sa[3240] = "N920TW";
      sa[3241] = "N920UA";
      sa[3242] = "N920VJ";
      sa[3243] = "N921DL";
      sa[3244] = "N921L";
      sa[3245] = "N921UA";
      sa[3246] = "N921VJ";
      sa[3247] = "N922L";
      sa[3248] = "N922TW";
      sa[3249] = "N922UA";
      sa[3250] = "N922VJ";
      sa[3251] = "N923DL";
      sa[3252] = "N923L";
      sa[3253] = "N923TW";
      sa[3254] = "N923UA";
      sa[3255] = "N923VJ";
      sa[3256] = "N924DL";
      sa[3257] = "N924UA";
      sa[3258] = "N924VJ";
      sa[3259] = "N925DL";
      sa[3260] = "N925L";
      sa[3261] = "N925TW";
      sa[3262] = "N925UA";
      sa[3263] = "N925VJ";
      sa[3264] = "N926TW";
      sa[3265] = "N926UA";
      sa[3266] = "N926VJ";
      sa[3267] = "N927DA";
      sa[3268] = "N927L";
      sa[3269] = "N927TW";
      sa[3270] = "N927UA";
      sa[3271] = "N927VJ";
      sa[3272] = "N928DL";
      sa[3273] = "N928L";
      sa[3274] = "N928TW";
      sa[3275] = "N928UA";
      sa[3276] = "N928VJ";
      sa[3277] = "N929DL";
      sa[3278] = "N929L";
      sa[3279] = "N929TW";
      sa[3280] = "N929UA";
      sa[3281] = "N929VJ";
      sa[3282] = "N93";
      sa[3283] = "N9302B";
      sa[3284] = "N9303K";
      sa[3285] = "N9304C";
      sa[3286] = "N9305N";
      sa[3287] = "N9306T";
      sa[3288] = "N9307R";
      sa[3289] = "N930DL";
      sa[3290] = "N930UA";
      sa[3291] = "N930VJ";
      sa[3292] = "N931DL";
      sa[3293] = "N931L";
      sa[3294] = "N931UA";
      sa[3295] = "N931VJ";
      sa[3296] = "N932DL";
      sa[3297] = "N932UA";
      sa[3298] = "N932VJ";
      sa[3299] = "N933L";
      sa[3300] = "N933UA";
      sa[3301] = "N933VJ";
      sa[3302] = "N934L";
      sa[3303] = "N934UA";
      sa[3304] = "N934VJ";
      sa[3305] = "N935DL";
      sa[3306] = "N935UA";
      sa[3307] = "N935VJ";
      sa[3308] = "N936DL";
      sa[3309] = "N936L";
      sa[3310] = "N936UA";
      sa[3311] = "N936VJ";
      sa[3312] = "N937DL";
      sa[3313] = "N937F";
      sa[3314] = "N937UA";
      sa[3315] = "N937VJ";
      sa[3316] = "N938DL";
      sa[3317] = "N938UA";
      sa[3318] = "N938VJ";
      sa[3319] = "N939DL";
      sa[3320] = "N939UA";
      sa[3321] = "N939VJ";
      sa[3322] = "N94";
      sa[3323] = "N9401W";
      sa[3324] = "N9402W";
      sa[3325] = "N9403W";
      sa[3326] = "N9404V";
      sa[3327] = "N9405T";
      sa[3328] = "N9406W";
      sa[3329] = "N9407R";
      sa[3330] = "N9409F";
      sa[3331] = "N940AS";
      sa[3332] = "N940DL";
      sa[3333] = "N940UA";
      sa[3334] = "N9412W";
      sa[3335] = "N9413T";
      sa[3336] = "N9414W";
      sa[3337] = "N941DL";
      sa[3338] = "N941UA";
      sa[3339] = "N9420D";
      sa[3340] = "N942DL";
      sa[3341] = "N942UA";
      sa[3342] = "N942VJ";
      sa[3343] = "N94314";
      sa[3344] = "N943DL";
      sa[3345] = "N943UA";
      sa[3346] = "N943VJ";
      sa[3347] = "N944DL";
      sa[3348] = "N944UA";
      sa[3349] = "N945UA";
      sa[3350] = "N945VJ";
      sa[3351] = "N946UA";
      sa[3352] = "N947DL";
      sa[3353] = "N947UA";
      sa[3354] = "N948DL";
      sa[3355] = "N948UA";
      sa[3356] = "N949DL";
      sa[3357] = "N949UA";
      sa[3358] = "N95";
      sa[3359] = "N950DL";
      sa[3360] = "N950UA";
      sa[3361] = "N951DL";
      sa[3362] = "N951U";
      sa[3363] = "N951UA";
      sa[3364] = "N951VJ";
      sa[3365] = "N952DL";
      sa[3366] = "N952U";
      sa[3367] = "N952UA";
      sa[3368] = "N952VJ";
      sa[3369] = "N953DL";
      sa[3370] = "N953U";
      sa[3371] = "N953UA";
      sa[3372] = "N953VJ";
      sa[3373] = "N954DL";
      sa[3374] = "N954U";
      sa[3375] = "N954UA";
      sa[3376] = "N955DL";
      sa[3377] = "N955U";
      sa[3378] = "N955UA";
      sa[3379] = "N955VJ";
      sa[3380] = "N956DL";
      sa[3381] = "N956U";
      sa[3382] = "N956UA";
      sa[3383] = "N957DL";
      sa[3384] = "N957U";
      sa[3385] = "N957UA";
      sa[3386] = "N958DL";
      sa[3387] = "N958U";
      sa[3388] = "N958VJ";
      sa[3389] = "N959DL";
      sa[3390] = "N959U";
      sa[3391] = "N959VJ";
      sa[3392] = "N96";
      sa[3393] = "N960TW";
      sa[3394] = "N960VJ";
      sa[3395] = "N9615W";
      sa[3396] = "N9617R";
      sa[3397] = "N9618A";
      sa[3398] = "N9619V";
      sa[3399] = "N9620D";
      sa[3400] = "N9622A";
      sa[3401] = "N9624T";
      sa[3402] = "N9626F";
      sa[3403] = "N9627R";
      sa[3404] = "N962DL";
      sa[3405] = "N9630A";
      sa[3406] = "N963DL";
      sa[3407] = "N963VJ";
      sa[3408] = "N964DL";
      sa[3409] = "N965DL";
      sa[3410] = "N965VJ";
      sa[3411] = "N966DL";
      sa[3412] = "N966VJ";
      sa[3413] = "N967DL";
      sa[3414] = "N967VJ";
      sa[3415] = "N968DL";
      sa[3416] = "N968VJ";
      sa[3417] = "N969DL";
      sa[3418] = "N969VJ";
      sa[3419] = "N970DL";
      sa[3420] = "N970VJ";
      sa[3421] = "N971VJ";
      sa[3422] = "N972VJ";
      sa[3423] = "N973DL";
      sa[3424] = "N973VJ";
      sa[3425] = "N974DL";
      sa[3426] = "N974UA";
      sa[3427] = "N974VJ";
      sa[3428] = "N975DL";
      sa[3429] = "N975VJ";
      sa[3430] = "N976DL";
      sa[3431] = "N976VJ";
      sa[3432] = "N976Z";
      sa[3433] = "N977DL";
      sa[3434] = "N977UA";
      sa[3435] = "N977VJ";
      sa[3436] = "N978AS";
      sa[3437] = "N978DL";
      sa[3438] = "N978UA";
      sa[3439] = "N978VJ";
      sa[3440] = "N978Z";
      sa[3441] = "N979DL";
      sa[3442] = "N979UA";
      sa[3443] = "N979VJ";
      sa[3444] = "N979Z";
      sa[3445] = "N980UA";
      sa[3446] = "N980VJ";
      sa[3447] = "N980Z";
      sa[3448] = "N981DL";
      sa[3449] = "N981UA";
      sa[3450] = "N981US";
      sa[3451] = "N981Z";
      sa[3452] = "N982DL";
      sa[3453] = "N982PS";
      sa[3454] = "N982UA";
      sa[3455] = "N982VJ";
      sa[3456] = "N983DL";
      sa[3457] = "N983UA";
      sa[3458] = "N983VJ";
      sa[3459] = "N983Z";
      sa[3460] = "N984DL";
      sa[3461] = "N984UA";
      sa[3462] = "N984VJ";
      sa[3463] = "N984Z";
      sa[3464] = "N985DL";
      sa[3465] = "N985VJ";
      sa[3466] = "N985Z";
      sa[3467] = "N986DL";
      sa[3468] = "N987UA";
      sa[3469] = "N987VJ";
      sa[3470] = "N988DL";
      sa[3471] = "N989DL";
      sa[3472] = "N989UA";
      sa[3473] = "N989VJ";
      sa[3474] = "N989Z";
      sa[3475] = "N990DL";
      sa[3476] = "N990Z";
      sa[3477] = "N991DL";
      sa[3478] = "N991VJ";
      sa[3479] = "N991Z";
      sa[3480] = "N992DL";
      sa[3481] = "N992Z";
      sa[3482] = "N993DL";
      sa[3483] = "N993UA";
      sa[3484] = "N993VJ";
      sa[3485] = "N994DL";
      sa[3486] = "N994UA";
      sa[3487] = "N995DL";
      sa[3488] = "N995UA";
      sa[3489] = "N995VJ";
      sa[3490] = "N996DL";
      sa[3491] = "N996VJ";
      sa[3492] = "N996Z";
      sa[3493] = "N997DL";
      sa[3494] = "N997UA";
      sa[3495] = "N997VJ";
      sa[3496] = "N998DL";
      sa[3497] = "N998UA";
      sa[3498] = "N999DN";
      sa[3499] = "NA";
      sa[3500] = "UNKNOW";
    }
  }
}
// The class representing column Origin
class gbm_pojo_test_ColInfo_5 implements java.io.Serializable {
  public static final String[] VALUES = new String[132];
  static {
    gbm_pojo_test_ColInfo_5_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_5_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ABE";
      sa[1] = "ABQ";
      sa[2] = "ACY";
      sa[3] = "ALB";
      sa[4] = "AMA";
      sa[5] = "ANC";
      sa[6] = "ATL";
      sa[7] = "AUS";
      sa[8] = "AVP";
      sa[9] = "BDL";
      sa[10] = "BGM";
      sa[11] = "BHM";
      sa[12] = "BIL";
      sa[13] = "BNA";
      sa[14] = "BOI";
      sa[15] = "BOS";
      sa[16] = "BTV";
      sa[17] = "BUF";
      sa[18] = "BUR";
      sa[19] = "BWI";
      sa[20] = "CAE";
      sa[21] = "CHO";
      sa[22] = "CHS";
      sa[23] = "CLE";
      sa[24] = "CLT";
      sa[25] = "CMH";
      sa[26] = "COS";
      sa[27] = "CRP";
      sa[28] = "CRW";
      sa[29] = "CVG";
      sa[30] = "DAL";
      sa[31] = "DAY";
      sa[32] = "DCA";
      sa[33] = "DEN";
      sa[34] = "DFW";
      sa[35] = "DSM";
      sa[36] = "DTW";
      sa[37] = "EGE";
      sa[38] = "ELP";
      sa[39] = "ERI";
      sa[40] = "EWR";
      sa[41] = "EYW";
      sa[42] = "FLL";
      sa[43] = "GEG";
      sa[44] = "GNV";
      sa[45] = "GRR";
      sa[46] = "GSO";
      sa[47] = "HNL";
      sa[48] = "HOU";
      sa[49] = "HPN";
      sa[50] = "HRL";
      sa[51] = "IAD";
      sa[52] = "IAH";
      sa[53] = "ICT";
      sa[54] = "IND";
      sa[55] = "ISP";
      sa[56] = "JAN";
      sa[57] = "JAX";
      sa[58] = "JFK";
      sa[59] = "KOA";
      sa[60] = "LAN";
      sa[61] = "LAS";
      sa[62] = "LAX";
      sa[63] = "LBB";
      sa[64] = "LEX";
      sa[65] = "LGA";
      sa[66] = "LIH";
      sa[67] = "LIT";
      sa[68] = "LYH";
      sa[69] = "MAF";
      sa[70] = "MCI";
      sa[71] = "MCO";
      sa[72] = "MDT";
      sa[73] = "MDW";
      sa[74] = "MEM";
      sa[75] = "MFR";
      sa[76] = "MHT";
      sa[77] = "MIA";
      sa[78] = "MKE";
      sa[79] = "MLB";
      sa[80] = "MRY";
      sa[81] = "MSP";
      sa[82] = "MSY";
      sa[83] = "MYR";
      sa[84] = "OAK";
      sa[85] = "OGG";
      sa[86] = "OKC";
      sa[87] = "OMA";
      sa[88] = "ONT";
      sa[89] = "ORD";
      sa[90] = "ORF";
      sa[91] = "PBI";
      sa[92] = "PDX";
      sa[93] = "PHF";
      sa[94] = "PHL";
      sa[95] = "PHX";
      sa[96] = "PIT";
      sa[97] = "PSP";
      sa[98] = "PVD";
      sa[99] = "PWM";
      sa[100] = "RDU";
      sa[101] = "RIC";
      sa[102] = "RNO";
      sa[103] = "ROA";
      sa[104] = "ROC";
      sa[105] = "RSW";
      sa[106] = "SAN";
      sa[107] = "SAT";
      sa[108] = "SAV";
      sa[109] = "SBN";
      sa[110] = "SCK";
      sa[111] = "SDF";
      sa[112] = "SEA";
      sa[113] = "SFO";
      sa[114] = "SJC";
      sa[115] = "SJU";
      sa[116] = "SLC";
      sa[117] = "SMF";
      sa[118] = "SNA";
      sa[119] = "SRQ";
      sa[120] = "STL";
      sa[121] = "STT";
      sa[122] = "STX";
      sa[123] = "SWF";
      sa[124] = "SYR";
      sa[125] = "TLH";
      sa[126] = "TPA";
      sa[127] = "TRI";
      sa[128] = "TUL";
      sa[129] = "TUS";
      sa[130] = "TYS";
      sa[131] = "UCA";
    }
  }
}
// The class representing column Dest
class gbm_pojo_test_ColInfo_6 implements java.io.Serializable {
  public static final String[] VALUES = new String[134];
  static {
    gbm_pojo_test_ColInfo_6_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_6_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "ABE";
      sa[1] = "ABQ";
      sa[2] = "ACY";
      sa[3] = "ALB";
      sa[4] = "AMA";
      sa[5] = "ANC";
      sa[6] = "ATL";
      sa[7] = "AUS";
      sa[8] = "AVL";
      sa[9] = "AVP";
      sa[10] = "BDL";
      sa[11] = "BGM";
      sa[12] = "BHM";
      sa[13] = "BNA";
      sa[14] = "BOI";
      sa[15] = "BOS";
      sa[16] = "BTV";
      sa[17] = "BUF";
      sa[18] = "BUR";
      sa[19] = "BWI";
      sa[20] = "CAE";
      sa[21] = "CAK";
      sa[22] = "CHA";
      sa[23] = "CHO";
      sa[24] = "CHS";
      sa[25] = "CLE";
      sa[26] = "CLT";
      sa[27] = "CMH";
      sa[28] = "COS";
      sa[29] = "CRP";
      sa[30] = "CVG";
      sa[31] = "DAL";
      sa[32] = "DAY";
      sa[33] = "DCA";
      sa[34] = "DEN";
      sa[35] = "DFW";
      sa[36] = "DSM";
      sa[37] = "DTW";
      sa[38] = "ELM";
      sa[39] = "ELP";
      sa[40] = "ERI";
      sa[41] = "EUG";
      sa[42] = "EWR";
      sa[43] = "EYW";
      sa[44] = "FAT";
      sa[45] = "FAY";
      sa[46] = "FLL";
      sa[47] = "FNT";
      sa[48] = "GEG";
      sa[49] = "GRR";
      sa[50] = "GSO";
      sa[51] = "GSP";
      sa[52] = "HNL";
      sa[53] = "HOU";
      sa[54] = "HPN";
      sa[55] = "HRL";
      sa[56] = "HTS";
      sa[57] = "IAD";
      sa[58] = "IAH";
      sa[59] = "ICT";
      sa[60] = "ILM";
      sa[61] = "IND";
      sa[62] = "ISP";
      sa[63] = "JAN";
      sa[64] = "JAX";
      sa[65] = "JFK";
      sa[66] = "KOA";
      sa[67] = "LAS";
      sa[68] = "LAX";
      sa[69] = "LBB";
      sa[70] = "LEX";
      sa[71] = "LGA";
      sa[72] = "LIH";
      sa[73] = "LIT";
      sa[74] = "LYH";
      sa[75] = "MAF";
      sa[76] = "MCI";
      sa[77] = "MCO";
      sa[78] = "MDT";
      sa[79] = "MDW";
      sa[80] = "MHT";
      sa[81] = "MIA";
      sa[82] = "MKE";
      sa[83] = "MRY";
      sa[84] = "MSP";
      sa[85] = "MSY";
      sa[86] = "MYR";
      sa[87] = "OAJ";
      sa[88] = "OAK";
      sa[89] = "OGG";
      sa[90] = "OKC";
      sa[91] = "OMA";
      sa[92] = "ONT";
      sa[93] = "ORD";
      sa[94] = "ORF";
      sa[95] = "ORH";
      sa[96] = "PBI";
      sa[97] = "PDX";
      sa[98] = "PHF";
      sa[99] = "PHL";
      sa[100] = "PHX";
      sa[101] = "PIT";
      sa[102] = "PNS";
      sa[103] = "PSP";
      sa[104] = "PVD";
      sa[105] = "PWM";
      sa[106] = "RDU";
      sa[107] = "RIC";
      sa[108] = "RNO";
      sa[109] = "ROA";
      sa[110] = "ROC";
      sa[111] = "RSW";
      sa[112] = "SAN";
      sa[113] = "SAT";
      sa[114] = "SBN";
      sa[115] = "SCK";
      sa[116] = "SDF";
      sa[117] = "SEA";
      sa[118] = "SFO";
      sa[119] = "SJC";
      sa[120] = "SJU";
      sa[121] = "SLC";
      sa[122] = "SMF";
      sa[123] = "SNA";
      sa[124] = "SRQ";
      sa[125] = "STL";
      sa[126] = "STT";
      sa[127] = "SWF";
      sa[128] = "SYR";
      sa[129] = "TOL";
      sa[130] = "TPA";
      sa[131] = "TUL";
      sa[132] = "TUS";
      sa[133] = "UCA";
    }
  }
}
// The class representing column IsDepDelayed
class gbm_pojo_test_ColInfo_7 implements java.io.Serializable {
  public static final String[] VALUES = new String[2];
  static {
    gbm_pojo_test_ColInfo_7_0.fill(VALUES);
  }
  static final class gbm_pojo_test_ColInfo_7_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "NO";
      sa[1] = "YES";
    }
  }
}

class gbm_pojo_test_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_0_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.135795f : 
                        -0.012475363f) : 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3432.5f ? 
                        -0.0776818f : 
                        -0.002386332f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[1])) ? 
                        -0.096135765f : 
                        -0.054278344f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.09578643f : 
                        -0.009812629f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3381.5f ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.106874675f : 
                        -0.046086866f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(127, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 127, 0, data[5])) ? 
                        -0.07460727f : 
                        0.035365306f)) : 
                 (data[4 /* TailNum */] <3295.5f ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(131, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 131, 0, data[6])) ? 
                        -0.057150386f : 
                        0.031260543f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(131, 0, data[6]) || (GenModel.bitSetIsInRange(131, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 131, 0, data[6])) ? 
                        0.053635146f : 
                        0.10809995f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        -0.17319937f : 
                        -0.07421618f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.07725466f : 
                        0.0018604011f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.17448626f : 
                        0.008999174f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        0.061887108f : 
                        0.1322841f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.05925747f : 
                        0.108753614f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        0.052880406f : 
                        0.11841014f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        0.10305558f : 
                        0.17480431f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        0.078721024f : 
                        0.17244792f)))));
    return pred;
  } // constant pool size = 551B, number of visited nodes = 31, static init size = 2550B
  // {00000000 00010000 00000010 01100000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 6};
  // {10010110 01100000 10010110 01000101 00100001 00100000 11000110 00001010 11001001 00010100 00000001 01110010 11100101 11000110 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {105, 6, 105, -94, -124, 4, 99, 80, -109, 40, -128, 78, -89, 99, -22, 92, 8};
  // {01111100 01111111 10111111 10000111 01001010 11111111 11111111 10001111 11111111 10110111 10010111 11000111 11111101 10100111 11111110 10110101 111011}
  public static final byte[] GRPSPLIT2 = new byte[] {62, -2, -3, -31, 82, -1, -1, -15, -1, -19, -23, -29, -65, -27, 127, -83, 55};
  // {00000001 00010101 00100000 00000000 10000100 00000010 00000000 00100000 00000000 00000000 00001000 10000000 00001000 00100000 10001000 00000000 1000}
  public static final byte[] GRPSPLIT3 = new byte[] {-128, -88, 4, 0, 33, 64, 0, 4, 0, 0, 16, 1, 16, 4, 17, 0, 1};
  // {10000000 00000000 00000000 00010000}
  public static final byte[] GRPSPLIT4 = new byte[] {1, 0, 0, 8};
  // {00000000 00000101 01000000 10000000 11010000 10010000 00010000 01000100 00000010 11000000 11010000 00001000 00001010 00110000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -96, 2, 1, 11, 9, 8, 34, 64, 3, 11, 16, 80, 12, 0, 1, 0};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {89, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-9, 3, 0, 0};
  // {11011110 10110001 00111111 10011101 00001101 00111010 10111101 00011001 01111111 11111101 00000011 11111010 11111110 10111111 11000111 01001110 101101}
  public static final byte[] GRPSPLIT8 = new byte[] {123, -115, -4, -71, -80, 92, -67, -104, -2, -65, -64, 95, 127, -3, -29, 114, 45};
  // {10010000 00101101 00110000 00011000}
  public static final byte[] GRPSPLIT9 = new byte[] {9, -76, 12, 24};
  // {11111111 11111111 11101111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011101 11111011 10111111 11111111 1111010}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -9, -33, -1, -1, -1, -1, -1, -1, -1, -69, -33, -3, -1, 47};
  // {00101101 11111110 11111111 11111111 11111011 11011111 11111111 11111111 11101111 11110111 11111111 01111111 11111011 01100111 01111100 11111111 110}
  public static final byte[] GRPSPLIT11 = new byte[] {-76, 127, -1, -1, -33, -5, -1, -1, -9, -17, -1, -2, -33, -26, 62, -1, 3};
  // {01000000 00000000 00000001 00010000 00000000 00000010 10100000 00000000 00000000 00001101 00000000 00000000 10101000 00100000 10000010 00000000 001}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 0, -128, 8, 0, 64, 5, 0, 0, -80, 0, 0, 21, 4, 65, 0, 4};
  // {00010110 00000000 11000100 00000101 01111111 01111100 00000111 00010110 11011011 01011101 00101011 11111111 11100011 01110011 11111001 01111011 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {104, 0, 35, -96, -2, 62, -32, 104, -37, -70, -44, -1, -57, -50, -97, -34, 15};
  // {01010001 00111100 00011110 11010001 00000001 00000000 10000101 00000001 00000101 00110101 10000000 00000000 10010000 00110110 10000111 01100100 101010}
  public static final byte[] GRPSPLIT14 = new byte[] {-118, 60, 120, -117, -128, 0, -95, -128, -96, -84, 1, 0, 9, 108, -31, 38, 21};
  // {11011110 11110101 11110111 11110111 01111111 11111110 11001111 11010110 11011111 11111111 00101111 11111111 11111011 01110011 11111001 01111111 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {123, -81, -17, -17, -2, 127, -13, 107, -5, -1, -12, -1, -33, -50, -97, -2, 15};
  // {00000000 00000000 01000000 00000000 00000000 00100000 00000000 00000100 00001000 00000000 00000000 10000100 00001100 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 2, 0, 0, 4, 0, 32, 16, 0, 0, 33, 48, 0, 0, 0, 0};
  // {11110101 01111111 10111111 11111011 01111111 11111111 11111111 10111101 11111111 10111111 11111001 11110101 11111111 11111110 11111111 11111111 111011}
  public static final byte[] GRPSPLIT17 = new byte[] {-81, -2, -3, -33, -2, -1, -1, -67, -1, -3, -97, -81, -1, 127, -1, -1, 55};
  // {01000000 00000111 00010001 11000010 10000000 10000000 10000000 01000000 00000000 00000000 00000100 00000000 00000000 10000000 00000010 10000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, -32, -120, 67, 1, 1, 1, 2, 0, 0, 32, 0, 0, 1, 64, 1, 0};
  // {11111111 11111111 11111111 11101111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -9, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, 15};
  // {11101110 11111011 11100111 10111110 11111111 11111111 11111011 11111111 11111110 11111111 01111111 11111111 11101111 11101011 11111000 10111011 111101}
  public static final byte[] GRPSPLIT20 = new byte[] {119, -33, -25, 125, -1, -1, -33, -1, 127, -1, -2, -1, -9, -41, 31, -35, 47};
  // {00000000 00000000 10000100 00000000 00000111 00010100 00000101 00000010 10001001 01001001 00000000 10000001 00100011 01000000 00000001 00111000 0011}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 33, 0, -32, 40, -96, 64, -111, -110, 0, -127, -60, 2, -128, 28, 12};
  // {11101011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-41, 3, 0, 0};
  // {00000010 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11000000 00000000 0100}
  public static final byte[] GRPSPLIT23 = new byte[] {64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2};
  // {01101111 10100111 11111111 10000111 00000110 10111111 11101101 00011011 00111111 11110101 00110111 11101001 11111010 01000110 11011111 11101111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-10, -27, -1, -31, 96, -3, -73, -40, -4, -81, -20, -105, 95, 98, -5, -9, 63};
  // {11111111 11010101 11101111 11001111 11111110 11111111 11110111 11111101 11100111 11111010 11111011 01110011 11110011 01110111 10111110 11101111 011101}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -85, -9, -13, 127, -1, -17, -65, -25, 95, -33, -50, -49, -18, 125, -9, 46};
  // {11111111 11111111 11111111 11111111 11111101 11111011 11111110 11111101 11111110 11110111 11111111 01111110 11111111 10111111 11111111 11110111 1111}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -1, -1, -1, -65, -33, 127, -65, 127, -17, -1, 126, -1, -3, -1, -17, 15};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, 15};
}


class gbm_pojo_test_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_1_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.15450135f : 
                        -0.10584264f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06962372f : 
                        0.014487121f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3308.0f ? 
                        -0.09543331f : 
                        -0.040583592f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        -0.03067892f : 
                        0.0762676f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3381.5f ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(127, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 127, 0, data[5])) ? 
                        -0.11219298f : 
                        -0.056273725f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(127, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 127, 0, data[5])) ? 
                        -0.062248584f : 
                        0.02710937f)) : 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3497.5f ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(131, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 131, 0, data[6])) ? 
                        -0.046365496f : 
                        0.028398242f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        0.04810133f : 
                        0.097569056f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        -0.15042299f : 
                        -0.022440514f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.11422692f : 
                        -0.015380269f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.04560747f : 
                        0.07229309f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        0.08402983f : 
                        0.17257549f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.037737098f : 
                        0.031265065f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                        -0.014115118f : 
                        0.09051525f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[1])) ? 
                        0.06976159f : 
                        0.12900023f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        0.064654216f : 
                        0.14492871f)))));
    return pred;
  } // constant pool size = 563B, number of visited nodes = 31, static init size = 2622B
  // {00000000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 14};
  // {10010110 01100000 10010110 01000101 00100001 00100000 11000110 00001010 11001001 00010100 00000001 01010010 11100101 11000010 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {105, 6, 105, -94, -124, 4, 99, 80, -109, 40, -128, 74, -89, 67, -22, 92, 8};
  // {01101100 01111111 00111111 10000111 01001010 11110111 11110011 11001111 11111111 10110111 10010111 11000111 11111101 10100111 11111110 10110101 111011}
  public static final byte[] GRPSPLIT2 = new byte[] {54, -2, -4, -31, 82, -17, -49, -13, -1, -19, -23, -29, -65, -27, 127, -83, 55};
  // {00000000 00000101 00100000 00000000 10000100 00000010 00000000 00100000 00000000 00000000 00001000 10100000 00001000 00000000 10001000 00000001 1000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -96, 4, 0, 33, 64, 0, 4, 0, 0, 16, 5, 16, 0, 17, -128, 1};
  // {01000000 00010000 01001001 10000000 01001000 10000001 00000000 00000000 00000010 00000001 00000000 00001000 00000000 00000000 00100000 10000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 8, -110, 1, 18, -127, 0, 0, 64, -128, 0, 16, 0, 0, 4, 1, 0};
  // {10000010 10000110 01101000 10001000}
  public static final byte[] GRPSPLIT5 = new byte[] {65, 97, 22, 17};
  // {11011110 01101101 11011111 11010111 11110101 10111010 11110110 11011111 11111111 11110101 11011111 01111011 11101101 11111110 11010111 10111011 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {123, -74, -5, -21, -81, 93, 111, -5, -1, -81, -5, -34, -73, 127, -21, -35, 15};
  // {00000100 00000000 00001000 00000001 00000000 00100000 00000000 00000000 00000000 00100001 00000101 00000010 10000000 10000001 00001000 00000000 001000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 16, -128, 0, 4, 0, 0, 0, -124, -96, 64, 1, -127, 16, 0, 4};
  // {11010000 00100001 00110001 00010000 00000100 00010010 10111100 00000000 01011001 00001101 00000000 10011010 11111100 11110011 11000111 11000100 101000}
  public static final byte[] GRPSPLIT8 = new byte[] {11, -124, -116, 8, 32, 72, 61, 0, -102, -80, 0, 89, 63, -49, -29, 35, 5};
  // {00010010 01000000 10000000 01000000 00000000 00100000 00000000 00000000 00000001 00000000 00000001 01010010 00000000 10000000 00010110 0000000}
  public static final byte[] GRPSPLIT9 = new byte[] {72, 2, 1, 2, 0, 4, 0, 0, -128, 0, -128, 74, 0, 1, 104, 0};
  // {11111111 11111111 11101111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111011 10111111 11111111 1111110}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -9, -33, -1, -1, -1, -1, -1, -1, -1, -65, -33, -3, -1, 63};
  // {00101111 11111110 11111111 11111111 11111011 11111111 11111111 11111111 11101111 11110111 11111111 01111111 11111011 01001111 01111000 11111111 110}
  public static final byte[] GRPSPLIT11 = new byte[] {-12, 127, -1, -1, -33, -1, -1, -1, -9, -17, -1, -2, -33, -14, 30, -1, 3};
  // {00000000 01000000 10000100 00000100 00000001 00000000 01000110 00000000 11001000 00010100 00000000 00010000 11000000 01000000 00010001 00100000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 2, 33, 32, -128, 0, 98, 0, 19, 40, 0, 8, 3, 2, -120, 4, 0};
  // {01010110 01000101 11010100 10000111 01111111 01111100 11000111 01010110 11011011 01001101 00101111 11111111 11110011 11110011 11111001 11111010 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {106, -94, 43, -31, -2, 62, -29, 106, -37, -78, -12, -1, -49, -49, -97, 95, 15};
  // {00000001 00000100 00000000 10000000 00000000 00000000 10000001 00000000 10000100 00000001 00000000 00000000 00000000 00100010 00000101 01100000 101000}
  public static final byte[] GRPSPLIT14 = new byte[] {-128, 32, 0, 1, 0, 0, -127, 0, 33, -128, 0, 0, 0, 68, -96, 6, 5};
  // {11011111 11010101 11110111 11100111 11111111 11111110 11001111 11010111 11111111 11101111 00101111 11111111 11111111 11110111 11111101 11111010 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-5, -85, -17, -25, -1, 127, -13, -21, -1, -9, -12, -1, -1, -17, -65, 95, 15};
  // {00000000 00000001 00010000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 11000100 00001000 00000000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, -128, 8, 0, 0, 0, 0, 0, 0, 1, 0, 35, 16, 0, 64, 0, 0};
  // {11111111 11111111 11011111 10111111 01111110 11011111 11111111 11011111 11111111 11100111 11111011 11111001 11111111 11111111 01111111 11111011 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -5, -3, 126, -5, -1, -5, -1, -25, -33, -97, -1, -1, -2, -33, 63};
  // {00000001 00000010 00000001 00000000 10000000 10000000 00010000 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {-128, 64, -128, 0, 1, 1, 8, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0};
  // {00000000 00010000 00000000 00100000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 8, 0, 4};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, 63};
  // {10101111 10111010 10101111 01111100 10111111 11111111 00111001 10111111 10101111 11111111 11010000 11110101 00101111 01011110 00000111 01111111 1101}
  public static final byte[] GRPSPLIT21 = new byte[] {-11, 93, -11, 62, -3, -1, -100, -3, -11, -1, 11, -81, -12, 122, -32, -2, 11};
  // {11110111 01111010 11010111 10010011 00001111 11111011 10101101 00110001 00111111 10111101 11111001 11001101 11111000 01111010 10010011 11101111 111011}
  public static final byte[] GRPSPLIT22 = new byte[] {-17, 94, -21, -55, -16, -33, -75, -116, -4, -67, -97, -77, 31, 94, -55, -9, 55};
  // {10111111 11111110 10101111 01111101 11111111 11111111 01111101 11111111 10111111 11111111 11011111 11110111 11111111 01111111 11001111 01111111 1111}
  public static final byte[] GRPSPLIT23 = new byte[] {-3, 127, -11, -66, -1, -1, -66, -1, -3, -1, -5, -17, -1, -2, -13, -2, 15};
  // {01001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-46, 3, 0, 0};
  // {00111101 11010101 11001111 11101111 10010110 11011101 11110111 11011111 01100111 11111100 00110011 01101011 10110011 01110111 01111110 11101011 011101}
  public static final byte[] GRPSPLIT25 = new byte[] {-68, -85, -13, -9, 105, -69, -17, -5, -26, 63, -52, -42, -51, -18, 126, -41, 46};
  // {00010000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {8, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 10101111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -5, -11, -1, -1, 15};
}


class gbm_pojo_test_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_2_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.12102355f : 
                        -0.07704263f) : 
                     (data[4 /* TailNum */] <68.5f ? 
                        0.2022219f : 
                        -0.054946546f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                        -0.0751638f : 
                        -0.020386163f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        -0.023702059f : 
                        0.07703066f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3381.5f ? 
                     (data[4 /* TailNum */] <37.0f ? 
                        0.09238075f : 
                        -0.079460844f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(124, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 124, 3, data[5])) ? 
                        -0.055774186f : 
                        0.03265728f)) : 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3497.5f ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(129, 3, data[5]) || (GenModel.bitSetIsInRange(129, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 129, 3, data[5])) ? 
                        -0.009573039f : 
                        0.04826592f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(131, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 131, 0, data[6])) ? 
                        0.03329391f : 
                        0.07911358f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                        -0.1776554f : 
                        -0.050211124f) : 
                     (data[4 /* TailNum */] <160.5f ? 
                        0.14232172f : 
                        0.0025216064f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.1523873f : 
                        -0.013495653f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        0.057746977f : 
                        0.17118286f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                        -0.028368097f : 
                        0.036666397f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        -0.003505503f : 
                        0.08208477f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        0.0748972f : 
                        0.13120745f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        0.083120085f : 
                        0.14370157f)))));
    return pred;
  } // constant pool size = 567B, number of visited nodes = 31, static init size = 2646B
  // {00000000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 14};
  // {00010110 01100000 10010110 01000101 00100001 00100000 11000110 00001010 11001001 00010100 00000001 01010010 11100101 11000010 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {104, 6, 105, -94, -124, 4, 99, 80, -109, 40, -128, 74, -89, 67, -22, 92, 8};
  // {01101100 01111111 00111111 10000111 01001010 11110101 11011011 10001111 11111111 10110111 10010111 11000111 11111101 10100111 11111110 10110101 111011}
  public static final byte[] GRPSPLIT2 = new byte[] {54, -2, -4, -31, 82, -81, -37, -15, -1, -19, -23, -29, -65, -27, 127, -83, 55};
  // {00000000 00010101 00100000 00000000 10000100 10000010 00000000 00100000 00000000 00000001 00001000 10100000 00001000 00000000 10001000 10000001 1000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -88, 4, 0, 33, 65, 0, 4, 0, -128, 16, 5, 16, 0, 17, -127, 1};
  // {00000000 10000000 00000000 00000000 10000000 00001010 00100000 01000000 00000000 00001000 01001000 00000000 00000000 00010000 00000000 01000000 000100}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 1, 0, 0, 1, 80, 4, 2, 0, 16, 18, 0, 0, 8, 0, 2, 8};
  // {10000000 00000101 01000001 10000000 11000000 10010000 00010000 01000100 00000010 11000000 11011000 00101001 00001000 00110000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {1, -96, -126, 1, 3, 9, 8, 34, 64, 3, 27, -108, 16, 12, 0, 1, 0};
  // {00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00101000 00000000 00000100 11000000 00000000 00000000 00000010 00100100 000010}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 4, 0, 0, 20, 0, 32, 3, 0, 0, 64, 36, 16};
  // {00000100 00000000 00001000 00000001 00000000 00100000 00001000 00000000 00000000 00100001 00000101 00000000 10000000 10000001 00001000 00000000 001000}
  public static final byte[] GRPSPLIT7 = new byte[] {32, 0, 16, -128, 0, 4, 16, 0, 0, -124, -96, 0, 1, -127, 16, 0, 4};
  // {11011110 10111001 00111111 10011101 00001101 00111010 10111111 00011001 01111111 11111101 00000011 11111010 11111110 11111111 11000111 11001110 101101}
  public static final byte[] GRPSPLIT8 = new byte[] {123, -99, -4, -71, -80, 92, -3, -104, -2, -65, -64, 95, 127, -1, -29, 115, 45};
  // {...3 0-bits... 11111111 11111111 01111111 11010111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11101111 11011101 11111111 11111111 1}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -2, -21, -1, -1, -1, -1, -17, -1, -1, -9, -69, -1, -1, 5};
  // {...3 0-bits... 00110000 00000000 10000000 00100001 00000000 00000010 00000000 00000000 00001000 00000000 00000000 10000000 00100000 00000000 00101001 000100}
  public static final byte[] GRPSPLIT10 = new byte[] {12, 0, 1, -124, 0, 64, 0, 0, 16, 0, 0, 1, 4, 0, -108, 8, 0};
  // {01000000 00000000 00010001 00010000 00000000 00000010 10110000 00000000 00010000 00001101 00000000 00000000 10111100 00100000 10000010 00000100 001}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, -120, 8, 0, 64, 13, 0, 8, -80, 0, 0, 61, 4, 65, 32, 4};
  // {00010110 00000101 11010100 10000111 01111111 01111100 10000111 00010110 11011011 01001101 00101111 11111111 11110011 01110011 11110001 01111010 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {104, -96, 43, -31, -2, 62, -31, 104, -37, -78, -12, -1, -49, -50, -113, 94, 15};
  // {01001001 00001110 00010000 10000000 00000000 00000000 10000101 00000100 10000100 00000001 00000000 00000000 00010000 00100010 10000001 00100000 101010}
  public static final byte[] GRPSPLIT13 = new byte[] {-110, 112, 8, 1, 0, 0, -95, 32, 33, -128, 0, 0, 8, 68, -127, 4, 21};
  // {11001000 11000000 00000011 01100000 00000000 10000000 01001000 11000000 00000100 10100010 00000000 00000000 00001000 00000000 00001000 00000000 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {19, 3, -64, 6, 0, 1, 18, 3, 32, 69, 0, 0, 16, 0, 16, 0, 0};
  // {11111111 11110111 11110111 11110111 11111111 11111111 11011111 11010111 11111111 11101111 00101111 11111111 11111111 11110111 11111111 11111010 1111}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -17, -17, -17, -1, -1, -5, -21, -1, -9, -12, -1, -1, -17, -1, 95, 15};
  // {11110111 00111111 11111111 11101111 11111111 11111101 11010111 01111111 11111011 11111111 11101111 11111111 11111011 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-17, -4, -1, -9, -1, -65, -21, -2, -33, -1, -9, -1, -33, -1, -1, -1, 15};
  // {11111111 11111111 11111111 11101111 11111111 11111101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -1, -1, -9, -1, -65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00001000 00001010 00000000 10000000 00000000 00000000 10000001 00000000 10000100 00000000 00000000 00000000 00000000 00100010 00000000 00000000 100000}
  public static final byte[] GRPSPLIT18 = new byte[] {16, 80, 0, 1, 0, 0, -127, 0, 33, 0, 0, 0, 0, 68, 0, 0, 1};
  // {00000010 00000000 10000100 00000000 00111111 00010000 00000001 00000010 10001001 01001001 00000000 10010001 00100011 00010000 00000001 00111010 0101}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 33, 0, -4, 8, -128, 64, -111, -110, 0, -119, -60, 8, -128, 92, 10};
  // {01110111 01111111 11010111 10010011 00101111 11111011 10101101 00010001 00111111 10111101 00110001 11001101 11111100 01111010 11011111 11101111 111011}
  public static final byte[] GRPSPLIT20 = new byte[] {-18, -2, -21, -55, -12, -33, -75, -120, -4, -67, -116, -77, 63, 94, -5, -9, 55};
  // {00000000 00000101 00000000 00000000 01000000 00000000 00000000 00000100 00000010 00000000 00000000 01100010 10000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, -96, 0, 0, 2, 0, 0, 32, 64, 0, 0, 70, 1, 0, 0, 0, 0};
  // {01101011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-42, 3, 0, 0};
  // {11111111 11111101 11101111 11101110 11011110 11111101 11110011 11111111 11101111 11111111 11111011 01111011 11110011 01111111 10111110 11101111 011101}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -65, -9, 119, 123, -65, -49, -1, -9, -1, -33, -34, -49, -2, 125, -9, 46};
  // {11111101 11111111 11111111 11111111 11110111 11111111 11111111 11111101 11111110 11110111 11111111 01101110 11111111 11101111 11111111 11110101 1011}
  public static final byte[] GRPSPLIT24 = new byte[] {-65, -1, -1, -1, -17, -1, -1, -65, 127, -17, -1, 118, -1, -9, -1, -81, 13};
  // {11111101 11111111 11111111 11111111 11010111 11101111 11111110 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-65, -1, -1, -1, -21, -9, 127, -1, -1, -1, -1, -1, -5, -1, -1, -1, 15};
}


class gbm_pojo_test_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_3_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.117040016f : 
                        -0.0675047f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                        -0.06851133f : 
                        -0.015860982f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.074984185f : 
                        -0.023533009f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.009893587f : 
                        0.044991538f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3312.5f ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(129, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 129, 3, data[5])) ? 
                        -0.09428005f : 
                        -0.033567198f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(131, 2, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 131, 2, data[6])) ? 
                        -0.04930075f : 
                        0.02054337f)) : 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3295.5f ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(124, 3, data[5]) || (GenModel.bitSetIsInRange(124, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 124, 3, data[5])) ? 
                        -3.5633333E-4f : 
                        0.06391373f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(124, 3, data[5]) || (GenModel.bitSetIsInRange(124, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 124, 3, data[5])) ? 
                        0.039007906f : 
                        0.08416973f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.15831822f : 
                        -0.06440131f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.15488265f : 
                        -0.0038510857f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2281.5f ? 
                        0.010251213f : 
                        -0.12158708f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        0.05018912f : 
                        0.12521656f))) : 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                     (data[3 /* FlightNum */] <782.5f ? 
                        -0.03504432f : 
                        0.03478328f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        0.05470672f : 
                        0.10908477f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.023058783f : 
                        0.10635892f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        0.081472665f : 
                        0.12494366f)))));
    return pred;
  } // constant pool size = 558B, number of visited nodes = 31, static init size = 2592B
  // {00000000 00010000 00000010 01100000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 6};
  // {00010110 01000000 10010110 01000101 00100001 00100000 11000010 00001010 11001001 00010100 00000001 01010010 11100101 11000110 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {104, 2, 105, -94, -124, 4, 67, 80, -109, 40, -128, 74, -89, 99, -22, 92, 8};
  // {01000100 00100101 00001100 10000001 01000000 00100000 00000000 00000000 00101011 00100011 10000101 01000010 10010000 10100111 00001010 10100100 101010}
  public static final byte[] GRPSPLIT2 = new byte[] {34, -92, 48, -127, 2, 4, 0, 0, -44, -60, -95, 66, 9, -27, 80, 37, 21};
  // {11000000 00100101 00000001 10001000 01010100 00000010 00000101 00100100 00000010 11000000 01001000 00001000 00001000 00100000 10001000 00000000 1010}
  public static final byte[] GRPSPLIT3 = new byte[] {3, -92, -128, 17, 42, 64, -96, 36, 64, 3, 18, 16, 16, 4, 17, 0, 5};
  // {11111111 11110101 11111111 11111111 11111111 10100111 11100111 10111111 11011111 11010111 11111001 01011111 11111101 11110111 11011111 01111011 1011}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -81, -1, -1, -1, -27, -25, -3, -5, -21, -97, -6, -65, -17, -5, -34, 13};
  // {00000000 00000010 00110000 00000000 00000000 00000000 00001000 00000000 01010000 00000100 00000000 00000100 01001100 00000000 10000100 00000000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 64, 12, 0, 0, 0, 16, 0, 10, 32, 0, 32, 50, 0, 33, 0, 0};
  // {00000000 00000001 01100000 10000000 11000000 10000000 00010000 01000000 00000010 00001000 00001000 00100000 00000010 00000000 00000000 10000000 0100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, -128, 6, 1, 3, 1, 8, 2, 64, 16, 16, 4, 64, 0, 0, 1, 2};
  // {11011010 10110011 00001110 11101110}
  public static final byte[] GRPSPLIT7 = new byte[] {91, -51, 112, 119};
  // {11011101 11111001 00000010 01111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-69, -97, 64, 126};
  // {11010010 00100001 00110001 00010000 00000100 00010010 10111110 00000000 01011001 00001101 00000000 10001000 11111100 10110011 11000011 01000100 001000}
  public static final byte[] GRPSPLIT9 = new byte[] {75, -124, -116, 8, 32, 72, 125, 0, -102, -80, 0, 17, 63, -51, -61, 34, 4};
  // {...3 0-bits... 10010010 00000100 00000010 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000010 10010000 00000000 00000000 10110000 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {73, 32, 64, 0, 0, 0, 0, 0, 16, 0, 64, 9, 0, 0, 13, 0, 0};
  // {...2 0-bits... 00000001 01000001 00000000 10000011 11000000 10000100 00000000 10010000 00000000 00000001 00000000 01011000 00000000 00100000 00110000 00000010 0}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, -126, 0, -63, 3, 33, 0, 9, 0, -128, 0, 26, 0, 4, 12, 64, 0};
  // {...3 0-bits... 00110000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00001000 00000000 00000000 10000000 00100000 00000000 00101001 0}
  public static final byte[] GRPSPLIT12 = new byte[] {12, 0, 0, 0, 0, 64, 0, 0, 16, 0, 0, 1, 4, 0, -108, 8};
  // {...3 0-bits... 00000010 00000100 00100000 00000000 00001000 00000010 00010000 00000110 01000000 00100000 00000000 10010110 00000010 00000000 10001001 0}
  public static final byte[] GRPSPLIT13 = new byte[] {64, 32, 4, 0, 16, 64, 8, 96, 2, 4, 0, 105, 64, 0, -111, 0};
  // {10010110 00000001 11000100 00000101 01111111 01111100 00000111 00010110 11011011 01011101 00101010 11111111 11100011 01110011 11111001 01111011 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {105, -128, 35, -96, -2, 62, -32, 104, -37, -70, 84, -1, -57, -50, -97, -34, 15};
  // {01010001 00111100 00011110 11010001 00000001 00000000 10000101 00000001 00000101 00110101 10000000 00000000 10010000 10110110 10000111 01100100 101010}
  public static final byte[] GRPSPLIT15 = new byte[] {-118, 60, 120, -117, -128, 0, -95, -128, -96, -84, 1, 0, 9, 109, -31, 38, 21};
  // {11011110 11110101 11110111 11110111 01111111 11111110 11001111 11010110 11011111 11111111 00101111 11111111 11110111 01110011 11111101 01111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {123, -81, -17, -17, -2, 127, -13, 107, -5, -1, -12, -1, -17, -50, -65, -2, 15};
  // {00000000 00000000 01000000 00100000 00000000 00100000 00000000 00000100 00001000 00000000 00000000 10000100 00001100 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 0, 2, 4, 0, 4, 0, 32, 16, 0, 0, 33, 48, 0, 0, 0, 0};
  // {11111101 01111111 10011111 11111011 01111111 11011111 11111111 10111111 11111111 11111111 11111101 11110111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, -2, -7, -33, -2, -5, -1, -3, -1, -1, -65, -17, -1, -1, -1, -1, 63};
  // {01000000 00000110 00010001 11000010 10000000 10000000 10000000 01000000 00000000 00000000 00000001 00000000 00000000 10000000 00000010 10000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 96, -120, 67, 1, 1, 1, 2, 0, 0, -128, 0, 0, 1, 64, 1, 0};
  // {01000000 00111000 00000110 10010000 00000001 00000000 10000001 00000000 00000000 00110001 00000000 00000000 00000000 00000010 10000010 00000000 100000}
  public static final byte[] GRPSPLIT20 = new byte[] {2, 28, 96, 9, -128, 0, -127, 0, 0, -116, 0, 0, 0, 64, 65, 0, 1};
  // {00000000 00000000 00000010 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 64, 0};
  // {01111111 10100111 11011111 10100111 00100110 11111111 11111111 00011111 00111111 11111100 00110111 01101111 10111110 01100111 01011111 11101111 111001}
  public static final byte[] GRPSPLIT22 = new byte[] {-2, -27, -5, -27, 100, -1, -1, -8, -4, 63, -20, -10, 125, -26, -6, -9, 39};
  // {01101111 11111110 10111111 11111010 10001111 11111111 11111100 11111011 10101100 11111011 11011111 11010100 11011111 11011110 01000111 11111101 1011}
  public static final byte[] GRPSPLIT23 = new byte[] {-10, 127, -3, 95, -15, -1, 63, -33, 53, -33, -5, 43, -5, 123, -30, -65, 13};
  // {11111101 11111111 11111111 11011111 10111111 10011111 11111101 10011111 10111111 11111101 11110011 11111011 11111110 11111101 11111111 11101111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-65, -1, -1, -5, -3, -7, -65, -7, -3, -65, -49, -33, 127, -65, -1, -9, 63};
  // {00010000 00000001 00000000 00000001 01010000 00000000 00000000 00000010 00000011 01000000 00000000 00000000 00000001 00000000 10000000 00000000 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {8, -128, 0, -128, 10, 0, 0, 64, -64, 2, 0, 0, -128, 0, 1, 0, 0};
  // {11111101 11111110 11111111 11111010 10110111 11111111 11111101 11111111 10111101 11111111 11011101 01101101 11111111 10001110 01111111 11111101 1111}
  public static final byte[] GRPSPLIT26 = new byte[] {-65, 127, -1, 95, -19, -1, -65, -1, -67, -1, -69, -74, -1, 113, -2, -65, 15};
}


class gbm_pojo_test_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_4_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3391.5f ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <37.0f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(35, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 2, data[4])) ? 
                        -0.13285705f : 
                        0.2043073f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[5])) ? 
                        -0.1093457f : 
                        -0.061979685f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.07419728f : 
                        -0.022582157f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.043547038f : 
                        0.020946188f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(109, 3392, data[4]) || (GenModel.bitSetIsInRange(109, 3392, data[4]) && !GenModel.bitSetContains(GRPSPLIT8, 109, 3392, data[4])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.12770812f : 
                        -0.03037864f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        0.17073128f : 
                        0.20065583f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.044032313f : 
                        0.0012774009f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.033941377f : 
                        0.07556546f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.16585019f : 
                        -0.11346126f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.11176819f : 
                        -0.019113315f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.10221623f : 
                        -0.016459968f) : 
                     (data[4 /* TailNum */] <1309.5f ? 
                        0.030766288f : 
                        0.14740407f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.077574745f : 
                        0.029197756f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        0.029782303f : 
                        0.07934339f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                        0.014377761f : 
                        0.08444047f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        0.103278756f : 
                        0.13570307f)))));
    return pred;
  } // constant pool size = 524B, number of visited nodes = 31, static init size = 2388B
  // {10000000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 8, 64, 14};
  // {00000100 00100101 01010000 00010010 00000000 00110010 10000010 00101000 10000001 00000100 10001000 00000010 11011000 11000111 01000100 11100100 101000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, -92, 10, 72, 0, 76, 65, 20, -127, 32, 17, 64, 27, -29, 34, 39, 5};
  // {...2 0-bits... 00000010 00010000 00011010 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 8, 88, 0, 0};
  // {01010010 01010101 10010000 11001001 01011110 00100000 01000000 00000100 00000001 10000000 00000001 01011010 00001100 10010000 10011110 00001000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {74, -86, 9, -109, 122, 4, 2, 32, -128, 1, -128, 90, 48, 9, 121, 16, 0};
  // {00000110 01000100 11010001 11000100 11100000 00110001 00000000 00100000 00000011 00000010 01000000 01110010 10101100 11000000 00010001 10101010 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 34, -117, 35, 7, -116, 0, 4, -64, 64, 2, 78, 53, 3, -120, 85, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {80, 0, 0, 0};
  // {10101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-11, 3, 0, 0};
  // {00011101 01011011 11110110 11110111 01110111 01111110 11110110 10011011 11011111 00111100 00000011 11111011 11100001 10111111 11011011 01111000 1001}
  public static final byte[] GRPSPLIT7 = new byte[] {-72, -38, 111, -17, -18, 126, 111, -39, -5, 60, -64, -33, -121, -3, -37, 30, 9};
  // {...3392 0-bits... }
  public static final byte[] GRPSPLIT8 = new byte[] {54, 3, 0, 1, 0, 16, 0, 32, 0, 0, -128, 0, -128, 16};
  // {11111101 11111011 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11100001 10111111 11111111 01111011 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -33, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -121, -3, -1, -34, 15};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 10111111 11111111 11111101 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -3, -1, -65, 15};
  // {11011111 11101011 00111011 10111111 01101101 11110010 10111111 01001001 00111101 11111101 11101111 01101101 11111110 11011101 11101111 11111110 101101}
  public static final byte[] GRPSPLIT11 = new byte[] {-5, -41, -36, -3, -74, 79, -3, -110, -68, -65, -9, -74, 127, -69, -9, 127, 45};
  // {01111111 11010011 00010010 01111010}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -53, 72, 94};
  // {11101111 11111111 11001101 11111010 10011111 11011101 11101111 11111101 11111110 11110111 11111111 10011101 11011111 01111101 10111101 11110111 1110}
  public static final byte[] GRPSPLIT13 = new byte[] {-9, -1, -77, 95, -7, -69, -9, -65, 127, -17, -1, -71, -5, -66, -67, -17, 7};
  // {11010110 01000101 11010100 11000111 01111111 11110100 11000111 10010110 11011111 01001111 00101011 11111111 11111011 11110011 11111101 11111010 0111}
  public static final byte[] GRPSPLIT14 = new byte[] {107, -94, 43, -29, -2, 47, -29, 105, -5, -14, -44, -1, -33, -49, -65, 95, 14};
  // {11111111 11111110 11111111 11011111 01011110 11011111 11110111 11111111 11011110 11100011 11111011 11111011 10111111 11110111 00111111 11111011 111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 127, -1, -5, 122, -5, -17, -1, 123, -57, -33, -33, -3, -17, -4, -33, 31};
  // {00000000 00010000 00000001 00000000 00000000 00000010 00010000 01001000 00100000 00100000 00000000 00000000 00000000 00000100 00000000 00000000 1000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 8, -128, 0, 0, 64, 8, 18, 4, 4, 0, 0, 0, 32, 0, 0, 1};
  // {00000000 00000000 00000000 00000000 00100001 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 0, 0, 0, -124, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0};
  // {10101010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {85, 0, 0, 0};
  // {00000001 00001100 00000000 10000000 00000000 00000000 10000001 00000000 10000100 00000000 00000000 00000000 00000000 00000010 00000100 01000000 001000}
  public static final byte[] GRPSPLIT19 = new byte[] {-128, 48, 0, 1, 0, 0, -127, 0, 33, 0, 0, 0, 0, 64, 32, 2, 4};
  // {11011111 11011111 11111111 11100111 11111111 11111100 11111111 11011111 11111111 11101111 00101111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-5, -5, -1, -25, -1, 63, -1, -5, -1, -9, -12, -1, -1, -1, -1, -1, 15};
  // {00000010 00000000 10000100 00000000 00000111 00110000 00000001 00000010 10001011 01001001 00000000 10010001 00100011 01010010 00000001 00011000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {64, 0, 33, 0, -32, 12, -128, 64, -47, -110, 0, -119, -60, 74, -128, 24, 0};
  // {11101011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-41, 3, 0, 0};
  // {10111111 11111111 11111111 11111111 10111111 11111111 11111111 11111011 11111111 11111111 11110111 11111111 11111111 11011111 11111011 11111111 1111}
  public static final byte[] GRPSPLIT23 = new byte[] {-3, -1, -1, -1, -3, -1, -1, -33, -1, -1, -17, -1, -1, -5, -33, -1, 15};
  // {01000010 01101010 10110110 00000000 00000101 00001010 10101101 00000001 00011111 00110101 00100000 10001000 11101000 00100000 10001001 01100100 111010}
  public static final byte[] GRPSPLIT24 = new byte[] {66, 86, 109, 0, -96, 80, -75, -128, -8, -84, 4, 17, 23, 4, -111, 38, 23};
  // {10111111 11111100 10101111 11111111 11101110 11111111 11110011 11111101 01101111 11111010 11111011 01111011 11111011 01111111 10111110 11101011 011001}
  public static final byte[] GRPSPLIT25 = new byte[] {-3, 63, -11, -1, 119, -1, -49, -65, -10, 95, -33, -34, -33, -2, 125, -41, 38};
  // {00000000 00010000 00000010 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {0, 8, 64, 0};
  // {11111101 11111111 11111111 11111111 11111101 11001111 11111110 11111111 11111110 11111111 11111111 11101110 11011111 10101111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT27 = new byte[] {-65, -1, -1, -1, -65, -13, 127, -1, 127, -1, -1, 119, -5, -11, -1, -1, 15};
}


class gbm_pojo_test_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_5_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[5])) ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.12181208f : 
                        -0.07276105f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.05139951f : 
                        0.011391416f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                     (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.06213053f : 
                        -0.028172974f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[2])) ? 
                        -0.04371485f : 
                        -9.556344E-4f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        -0.15710728f : 
                        -0.09685847f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.027510103f : 
                        0.07669556f)) : 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[2])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        -0.013238451f : 
                        0.11694297f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        0.046917584f : 
                        0.10298249f)))) : 
         (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3314.5f ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(126, 6, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 126, 6, data[5])) ? 
                        -0.09969148f : 
                        -0.049090598f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(126, 6, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 126, 6, data[5])) ? 
                        -0.052985977f : 
                        0.016108204f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.09416419f : 
                        -0.005462505f) : 
                     (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                        0.032588597f : 
                        0.107736506f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                     (data[3 /* FlightNum */] <93.0f ? 
                        -0.06558452f : 
                        0.009021231f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        0.031224044f : 
                        0.078226276f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[0])) ? 
                        -0.014919112f : 
                        0.054522596f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                        0.03527958f : 
                        0.09089485f)))));
    return pred;
  } // constant pool size = 503B, number of visited nodes = 31, static init size = 2262B
  // {00011110 01000000 10010100 00000111 00110111 00100100 11000111 10000110 11011111 01010100 00000001 11111010 11100111 11010010 11010111 00111010 0001}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 2, 41, -32, -20, 36, -29, 97, -5, 42, -128, 95, -25, 75, -21, 92, 8};
  // {00000000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT1 = new byte[] {0, 8, 64, 14};
  // {01101100 01111111 10111111 10000111 01001010 11110001 11110011 11011111 10111111 10110111 10010111 11000111 10111100 10100111 01111010 10110101 111011}
  public static final byte[] GRPSPLIT2 = new byte[] {54, -2, -3, -31, 82, -113, -49, -5, -3, -19, -23, -29, 61, -27, 94, -83, 55};
  // {00000000 00000101 00100010 00000000 10000000 00000010 00000000 00101000 00000000 00000000 00001000 00000000 00001000 00000000 00001000 00000000 1000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, -96, 68, 0, 1, 64, 0, 20, 0, 0, 16, 0, 16, 0, 16, 0, 1};
  // {01000000 00010000 01001001 11000000 01001000 10000001 00001000 00000000 00000000 00100001 00000000 00000000 00000000 00100000 00100000 10000001 0100}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 8, -110, 3, 18, -127, 16, 0, 0, -124, 0, 0, 0, 4, 4, -127, 2};
  // {10011010 11000111 01100000 10000100}
  public static final byte[] GRPSPLIT5 = new byte[] {89, -29, 6, 33};
  // {10000000 00100101 01000000 11000000 11001000 10010000 00010000 01000000 00000000 10000000 11011000 00000001 00000000 00100000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {1, -92, 2, 3, 19, 9, 8, 2, 0, 1, 27, -128, 0, 4, 0, 1, 0};
  // {01001100 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {50, 2, 0, 0};
  // {11101011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-41, 3, 0, 0};
  // {11011110 11000101 11010101 11100111 01111111 11111100 11000111 11010110 11011111 01011111 00101111 11111111 11111111 11110011 11111111 11111010 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {123, -93, -85, -25, -2, 63, -29, 107, -5, -6, -12, -1, -1, -49, -1, 95, 15};
  // {11111111 11111110 11111111 11111111 01011110 11011111 11111111 11111111 11011111 11100011 11111011 11111011 10111111 11110111 00111111 11111011 111110}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 127, -1, -1, 122, -5, -1, -1, -5, -57, -33, -33, -3, -17, -4, -33, 31};
  // {00000001 00000010 00000000 00000000 00000000 00000011 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 64, 0, 0, 0, -64, 8, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0};
  // {00000001 00000100 00000000 10000000 00000000 00000000 10000001 00000000 10000100 10000001 00000000 01000000 00000000 00000010 00000101 01100000 001000}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 32, 0, 1, 0, 0, -127, 0, 33, -127, 0, 2, 0, 64, -96, 6, 4};
  // {10001011 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {-47, 2, 0, 0};
  // {00000000 00100000 00000110 00000000 00000100 00100010 00000000 00000100 00000001 00000100 00000000 00000000 00000000 00110000 00000011 00000100 101000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 4, 96, 0, 32, 68, 0, 32, -128, 32, 0, 0, 0, 12, -64, 32, 5};
  // {11111111 11111011 11101111 11110110 11001111 11111101 11111011 10111011 01101111 11111111 10110011 11001001 11110111 01111011 11111000 10101011 110001}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -33, -9, 111, -13, -65, -33, -35, -10, -1, -51, -109, -17, -34, 31, -43, 35};
  // {01010111 10101101 01111111 10011001 01001101 10011010 10111101 00001011 01111111 11111101 00000011 11111001 11111110 11111111 11011111 01101110 001101}
  public static final byte[] GRPSPLIT16 = new byte[] {-22, -75, -2, -103, -78, 89, -67, -48, -2, -65, -64, -97, 127, -1, -5, 118, 44};
  // {10010000 00010100 00100010 01111000}
  public static final byte[] GRPSPLIT17 = new byte[] {9, 40, 68, 30};
  // {...6 0-bits... 10000000 00000000 00000000 01001001 00001000 00000000 00000001 00000000 00000000 00000000 00011010 10000000 00010100 00100101 10000000}
  public static final byte[] GRPSPLIT18 = new byte[] {1, 0, 0, -110, 16, 0, -128, 0, 0, 0, 88, 1, 40, -92, 1, 0};
  // {...6 0-bits... 11111111 11111011 11111110 11111111 11111111 11111111 10111111 11111111 01111111 11111111 11111111 01111110 11101111 11111111 11111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -33, 127, -1, -1, -1, -3, -1, -2, -1, -1, 126, -9, -1, -1, 30};
  // {11111101 11111111 11101111 11111001 11011111 11011111 01111100 11111111 10111111 11111011 11111111 11111101 01111001 00111111 10101011 11111101 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-65, -1, -9, -97, -5, -5, 62, -1, -3, -33, -1, -65, -98, -4, -43, -65, 15};
  // {11010111 11111111 11111111 10111011 01111111 11111111 10111111 11111111 11111111 11111111 11110111 11111111 11111110 11111111 11011111 11111111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-21, -1, -1, -35, -2, -1, -3, -1, -1, -1, -17, -1, 127, -1, -5, -1, 63};
  // {11111010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {95, 3, 0, 0};
  // {00000110 00000000 10000100 00000000 00010011 00000000 11000111 00000010 11011001 01000100 00000000 10010000 11000010 00010000 00000001 00110000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {96, 0, 33, 0, -56, 0, -29, 64, -101, 34, 0, 9, 67, 8, -128, 12, 0};
  // {11000110 00010011 00000010 01111010}
  public static final byte[] GRPSPLIT24 = new byte[] {99, -56, 64, 94};
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 0, 64, 2};
  // {11101101 11111010 11111111 11111110 11111010 01111111 11100111 11111101 11111111 10110111 11111111 01011111 10111011 01101101 10111110 11111011 111111}
  public static final byte[] GRPSPLIT26 = new byte[] {-73, 95, -1, 127, 95, -2, -25, -65, -1, -19, -1, -6, -35, -74, 125, -33, 63};
  // {01011100 11111000 00000110 11111110}
  public static final byte[] GRPSPLIT27 = new byte[] {58, 31, 96, 127};
  // {11011011 11010111 11100011 11111110}
  public static final byte[] GRPSPLIT28 = new byte[] {-37, -21, -57, 127};
}


class gbm_pojo_test_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_6_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3415.5f ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <37.0f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(35, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 35, 2, data[4])) ? 
                        -0.13840128f : 
                        0.18179114f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[5]) || (GenModel.bitSetIsInRange(130, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[5])) ? 
                        -0.08128619f : 
                        -0.031034883f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.07380478f : 
                        -0.02362154f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.033867225f : 
                        0.021093301f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(85, 3416, data[4]) || (GenModel.bitSetIsInRange(85, 3416, data[4]) && !GenModel.bitSetContains(GRPSPLIT8, 85, 3416, data[4])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.10047223f : 
                        -0.023770656f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        0.17159377f : 
                        0.19514921f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.023419296f : 
                        0.023605952f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(85, 3416, data[4]) || (GenModel.bitSetIsInRange(85, 3416, data[4]) && !GenModel.bitSetContains(GRPSPLIT13, 85, 3416, data[4])) ? 
                        0.04897104f : 
                        0.17349418f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.15909219f : 
                        -0.102977894f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.07442733f : 
                        0.010833043f)) : 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2273.5f ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(130, 1, data[6]) || (GenModel.bitSetIsInRange(130, 1, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 130, 1, data[6])) ? 
                        -0.042522907f : 
                        0.120498665f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.037035868f : 
                        0.03602204f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.06786164f : 
                        0.013582781f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        -0.0021221454f : 
                        0.05452301f)) : 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                     (data[3 /* FlightNum */] <84.5f ? 
                        -0.11423628f : 
                        0.029978605f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        0.0825495f : 
                        0.13435692f)))));
    return pred;
  } // constant pool size = 484B, number of visited nodes = 31, static init size = 2148B
  // {10000000 00010000 00000010 01111000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 8, 64, 30};
  // {00000100 00100101 00010000 00010010 00000000 00110010 10000010 00001000 10000000 00000100 10000000 00000010 11011000 11010111 01000100 11100100 101000}
  public static final byte[] GRPSPLIT1 = new byte[] {32, -92, 8, 72, 0, 76, 65, 16, 1, 32, 1, 64, 27, -21, 34, 39, 5};
  // {...2 0-bits... 00000010 00010000 00111010 00000000 0}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 8, 92, 0, 0};
  // {00010010 01010100 10000000 01001000 00011110 00100000 01000000 00000000 00000001 10000000 00000001 01011000 00000000 10000000 00011110 00001000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 42, 1, 18, 120, 4, 2, 0, -128, 1, -128, 26, 0, 1, 120, 16, 0};
  // {00000110 01000001 00010001 11000100 11100000 00110001 00000000 00100000 00000011 00000010 01000000 01110011 10101100 11000000 00010001 10101010 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, -126, -120, 35, 7, -116, 0, 4, -64, 64, 2, -50, 53, 3, -120, 85, 0};
  // {00011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {88, 0, 0, 0};
  // {10101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-11, 3, 0, 0};
  // {00011101 01011011 11110110 11110111 01110111 01111110 11110110 10011011 11011111 00111100 00000011 11111011 11100011 10111111 11011011 01111010 1001}
  public static final byte[] GRPSPLIT7 = new byte[] {-72, -38, 111, -17, -18, 126, 111, -39, -5, 60, -64, -33, -57, -3, -37, 94, 9};
  // {...3416 0-bits... }
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 16, 0, 32, 0, 0, -128, 0, -128, 16};
  // {10011101 11111011 11110111 11111111 11111111 11111111 11111110 11111111 11011111 11111111 11101111 11111111 11100011 10111111 11111111 01111010 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-71, -33, -17, -1, -1, -1, 127, -1, -5, -1, -9, -1, -57, -3, -1, 94, 15};
  // {01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00011000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0};
  // {01010000 01100000 00101001 00110000 01100000 00100010 10111000 01000000 00001001 00101101 01000000 00000000 10011100 10010001 10000110 00000100 001000}
  public static final byte[] GRPSPLIT11 = new byte[] {10, 6, -108, 12, 6, 68, 29, 2, -112, -76, 2, 0, 57, -119, 97, 32, 4};
  // {00010000 00000000 00000010 01000000 01000000 00000000 00000010 00000010 01000010 00000000 00000001 00000000 10000000 10000000 00000010 00000000 0001}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 0, 64, 2, 2, 0, 64, 64, 66, 0, -128, 0, 1, 1, 64, 0, 8};
  // {...3416 0-bits... }
  public static final byte[] GRPSPLIT13 = new byte[] {-37, 34, -128, 8, 20, 80, 58, 0, 36, 1, 20};
  // {11011110 01000101 11010100 11000111 01111111 11110100 11000111 10010110 11011111 01001111 01101111 11111111 11111011 01110001 11111101 11111011 0111}
  public static final byte[] GRPSPLIT14 = new byte[] {123, -94, 43, -29, -2, 47, -29, 105, -5, -14, -10, -1, -33, -114, -65, -33, 14};
  // {11111111 11111110 11111111 11011111 01011110 11011111 11110111 11111111 11010110 11100011 11111011 10111011 10111111 11110111 00111111 11111011 111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 127, -1, -5, 122, -5, -17, -1, 107, -57, -33, -35, -3, -17, -4, -33, 31};
  // {11111111 11110101 11010111 11111111 01111111 11110110 11010111 11011110 11111111 01111111 01111111 11111111 11111111 11110111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -81, -21, -1, -2, 111, -21, 123, -1, -2, -2, -1, -1, -17, -1, -1, 15};
  // {00000000 00010000 00000000 01010000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 8, 0, 10};
  // {10001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {17, 0, 0, 0};
  // {...1 0-bits... 00000000 00011000 00100000 00000000 00000000 00000001 00000010 00001001 00000000 00000010 00000000 00000100 00000000 00000000 00001010 10000000 0}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 24, 4, 0, 0, -128, 64, -112, 0, 64, 0, 32, 0, 0, 80, 1, 0};
  // {11010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {75, 0, 0, 0};
  // {00000010 00000000 10000100 00000000 00100111 00110000 01000101 00000010 10001001 01001100 00000000 10110001 00100011 00010000 00000001 00111000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {64, 0, 33, 0, -28, 12, -94, 64, -111, 50, 0, -115, -60, 8, -128, 28, 0};
  // {01101011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {-42, 3, 0, 0};
  // {10111111 11111111 11111111 11111111 10111111 11111111 11111111 11111011 11111111 11111111 11110111 11111111 11111111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT23 = new byte[] {-3, -1, -1, -1, -3, -1, -1, -33, -1, -1, -17, -1, -1, -5, -1, -1, 15};
  // {11110110 00101011 10110011 00010011 00110111 00011011 10101101 00000011 00111111 10110101 00110001 11001101 11111100 00100010 11011111 11111111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {111, -44, -51, -56, -20, -40, -75, -64, -4, -83, -116, -77, 63, 68, -5, -1, 63};
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {119, 3, 0, 0};
  // {00000010 00000000 10000100 00000000 00000001 00000000 00000000 00000000 10001000 01000100 00000000 00000000 00000001 00000000 00000001 00010000 0000}
  public static final byte[] GRPSPLIT26 = new byte[] {64, 0, 33, 0, -128, 0, 0, 0, 17, 34, 0, 0, -128, 0, -128, 8, 0};
}


class gbm_pojo_test_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_7_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3463.5f ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(131, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 131, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1917.5f ? 
                        -0.08192817f : 
                        -0.040451765f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.055872392f : 
                        -0.0064178165f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(131, 0, data[5]) || (GenModel.bitSetIsInRange(131, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 131, 0, data[5])) ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(37, 3464, data[4]) || (GenModel.bitSetIsInRange(37, 3464, data[4]) && !GenModel.bitSetContains(GRPSPLIT5, 37, 3464, data[4])) ? 
                        -0.031159103f : 
                        0.16182719f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                        -0.019998273f : 
                        0.048714932f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <3312.5f ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.07178097f : 
                        -0.023158874f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[6]) || (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 133, 0, data[6])) ? 
                        -0.011290858f : 
                        0.036228206f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                     (data[3 /* FlightNum */] <85.5f ? 
                        -0.05277814f : 
                        0.015533365f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        0.016584182f : 
                        0.06095214f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.12196525f : 
                        -0.04389454f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        -0.13746734f : 
                        -2.4010275E-4f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2281.5f ? 
                        -8.3199196E-4f : 
                        -0.11785012f) : 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1764.5f ? 
                        0.07010677f : 
                        0.012841508f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.06221115f : 
                        0.010683006f) : 
                     (data[3 /* FlightNum */] <147.5f ? 
                        -0.029557003f : 
                        0.11763785f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        0.042229343f : 
                        0.10079287f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.074287064f : 
                        0.12089354f)))));
    return pred;
  } // constant pool size = 507B, number of visited nodes = 31, static init size = 2286B
  // {00000000 00010000 00000010 01100000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 6};
  // {00010110 01000000 10010110 01000101 00100101 00100000 11000010 00001010 11001001 00010100 10000001 01010010 11100101 11000110 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {104, 2, 105, -94, -92, 4, 67, 80, -109, 40, -127, 74, -89, 99, -22, 92, 8};
  // {01000000 00000101 00000001 10101000 11010000 00000001 00000000 00100000 00000000 10000000 00000000 00101000 00011000 00010000 10001000 10000000 100}
  public static final byte[] GRPSPLIT2 = new byte[] {2, -96, -128, 21, 11, -128, 0, 4, 0, 1, 0, 20, 24, 8, 17, 1, 1};
  // {01000000 00100011 00000000 00000001 01000000 00100000 00000000 00100000 00010000 00000111 10000100 10000010 10011000 10000111 00001010 10100100 101000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, -60, 0, -128, 2, 4, 0, 4, 8, -32, 33, 65, 25, -31, 80, 37, 5};
  // {01000001 00000001 01100000 10000000 01000000 00000000 00010000 00000100 00000010 00001000 00000000 00000001 00000010 00100001 10000000 00000000 010}
  public static final byte[] GRPSPLIT4 = new byte[] {-126, -128, 6, 1, 2, 0, 8, 32, 64, 16, 0, -128, 64, -124, 1, 0, 2};
  // {...3464 0-bits... }
  public static final byte[] GRPSPLIT5 = new byte[] {-5, -5, -1, -17, 23};
  // {11111111 11111011 11011011 10111111 01101111 11110111 11111111 11101011 10101101 11111111 11111111 01111101 11110110 11011101 01111110 11111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -33, -37, -3, -10, -17, -1, -41, -75, -1, -1, -66, 111, -69, 126, -1, 63};
  // {01000000 00100001 00010001 00010000 00000100 00010010 10111110 00000000 01011001 00001101 00000000 10001000 10111100 00110011 01000011 01000100 001000}
  public static final byte[] GRPSPLIT7 = new byte[] {2, -124, -120, 8, 32, 72, 125, 0, -102, -80, 0, 17, 61, -52, -62, 34, 4};
  // {10110100 00111101 10110010 11111000}
  public static final byte[] GRPSPLIT8 = new byte[] {45, -68, 77, 31};
  // {10010010 01000000 00000000 00100000 11110000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 01000000 10001000 10001100 00000000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {73, 2, 0, 4, 15, 0, 0, 0, 0, 0, 2, 0, 2, 17, 49, 0, 0};
  // {11101111 11111111 11111111 10111011 11011111 11011111 11111111 11111111 11111111 11111111 01111110 10111111 11011111 00111101 10101001 11110101 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-9, -1, -1, -35, -5, -5, -1, -1, -1, -1, 126, -3, -5, -68, -107, -81, 15};
  // {11111111 11011110 11111111 11111111 11111011 11111111 11100101 11111111 11111110 11110110 11111111 01111111 11111011 11111101 11111110 11111011 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 123, -1, -1, -33, -1, -89, -1, 127, 111, -1, -2, -33, -65, 127, -33, 63};
  // {10000110 00000001 11000100 00000101 01111111 01111100 00000101 00010110 11011011 01011101 00101010 11111111 11100011 01110010 11101001 01111011 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {97, -128, 35, -96, -2, 62, -96, 104, -37, -70, 84, -1, -57, 78, -105, -34, 15};
  // {01010001 00111100 00011110 11010001 00000001 00000000 10000101 00000001 00000101 00110001 10000000 00000000 11010000 00110110 10000111 01100000 101010}
  public static final byte[] GRPSPLIT13 = new byte[] {-118, 60, 120, -117, -128, 0, -95, -128, -96, -116, 1, 0, 11, 108, -31, 6, 21};
  // {11011110 11110101 11110111 11110101 01111111 11111110 10001111 11010110 11011111 11111111 00101111 11111111 11111011 01110011 11101001 01111011 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {123, -81, -17, -81, -2, 127, -15, 107, -5, -1, -12, -1, -33, -50, -105, -34, 15};
  // {11111111 11111110 11011111 11011111 01111111 11111111 11110111 11011111 11001111 01110111 11111111 10111111 11111111 11110111 11111111 11111111 111010}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 127, -5, -5, -2, -1, -17, -5, -13, -18, -1, -3, -1, -17, -1, -1, 23};
  // {11111101 01111111 10111111 11111011 01111111 11011111 11111111 10111111 11111111 11111111 11111001 11110111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -2, -3, -33, -2, -5, -1, -3, -1, -1, -97, -17, -1, -1, -1, -1, 63};
  // {11110111 00101111 11111111 11101111 11111111 11111100 11011111 01111110 11111011 11111111 11111111 11111111 11100011 11111110 11111111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-17, -12, -1, -9, -1, 63, -5, 126, -33, -1, -1, -1, -57, 127, -1, -1, 15};
  // {01111111 10101111 11011111 11100111 00110111 10111111 11111101 00011111 00111111 11111101 00110111 11101011 11111110 01101111 11011111 11101111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-2, -11, -5, -25, -20, -3, -65, -8, -4, -65, -20, -41, 127, -10, -5, -9, 63};
  // {00000010 00000001 00000000 00000000 00110000 00000100 00000000 00000000 00000010 01001000 00000000 00100001 00100000 00000000 10000000 00000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, -128, 0, 0, 12, 32, 0, 0, 64, 18, 0, -124, 4, 0, 1, 0, 0};
  // {11110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {79, 0, 0, 0};
  // {00000000 00000000 10000100 00000000 00000111 00010000 00000100 00000010 10001000 01001101 00001000 01000001 10100011 00000000 01100001 00111000 0011}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 33, 0, -32, 8, 32, 64, 17, -78, 16, -126, -59, 0, -122, 28, 12};
  // {00011011 00000110 01000000 00000000 00000100 00101010 00101001 00000001 00000101 01000000 00000000 00101011 10010000 01000000 00001000 00100100 100110}
  public static final byte[] GRPSPLIT22 = new byte[] {-40, 96, 2, 0, 32, 84, -108, -128, -96, 2, 0, -44, 9, 2, 16, 36, 25};
  // {10101101 11011001 11101111 10011111 11111110 11011101 01010011 11111111 11101111 11110111 11111011 01110111 10100011 11110111 01111010 10111011 111101}
  public static final byte[] GRPSPLIT23 = new byte[] {-75, -101, -9, -7, 127, -69, -54, -1, -9, -17, -33, -18, -59, -17, 94, -35, 47};
}


class gbm_pojo_test_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_8_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3466.5f ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <35.5f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(34, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 34, 2, data[4])) ? 
                        -0.10968391f : 
                        0.17876217f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(130, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[5])) ? 
                        -0.09058702f : 
                        -0.04647509f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.054266557f : 
                        -0.009352631f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.035094768f : 
                        0.020585723f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.09168117f : 
                        -0.029370843f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.034394424f : 
                        0.026010321f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.08584436f : 
                        0.0115917325f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.03763306f : 
                        0.088421084f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.14630477f : 
                        -0.091645256f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.07364961f : 
                        0.008893231f)) : 
                 (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.099745125f : 
                        -0.02062298f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.018322075f : 
                        0.046034683f))) : 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.06629583f : 
                        0.009855394f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        0.012121621f : 
                        0.054189056f)) : 
                 (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.1075949f : 
                        0.04591671f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[6])) ? 
                        -0.15264483f : 
                        0.07784712f)))));
    return pred;
  } // constant pool size = 519B, number of visited nodes = 31, static init size = 2358B
  // {10000000 00010000 00000010 01111000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 8, 64, 30};
  // {01000100 00100001 00010000 00010010 00010000 00110010 10000010 00000000 10000001 00000100 10000000 00000010 11011000 11000111 01000100 11100100 101000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, -124, 8, 72, 8, 76, 65, 0, -127, 32, 1, 64, 27, -29, 34, 39, 5};
  // {...2 0-bits... 00000010 00010000 00011010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 8, 88, 0, 0};
  // {01111111 01111101 10101101 11111111 01111111 01101111 11100101 10011101 10111101 11110001 10001101 01011110 11001011 10010111 10011110 01111101 10}
  public static final byte[] GRPSPLIT3 = new byte[] {-2, -66, -75, -1, -2, -10, -89, -71, -67, -113, -79, 122, -45, -23, 121, -66, 1};
  // {00000110 00000000 01010001 11000100 11100000 00110001 00000000 00100000 00000011 00000010 01000000 01110011 10101100 11000000 00000001 10101010 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, 0, -118, 35, 7, -116, 0, 4, -64, 64, 2, -50, 53, 3, -128, 85, 0};
  // {00001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {80, 0, 0, 0};
  // {10101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-11, 3, 0, 0};
  // {00000001 01000001 11110110 11000001 01100001 00100000 00010010 00000010 11001011 00010100 00000001 01010011 11000001 10000011 11010011 00111000 0001}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, -126, 111, -125, -122, 4, 72, 64, -45, 40, -128, -54, -125, -63, -53, 28, 8};
  // {11111111 11111111 11001111 11011111 11011111 11111111 11010111 11011011 11111111 11111011 11111111 01111011 11110110 11111011 01111111 11111111 011111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -13, -5, -5, -1, -21, -37, -1, -33, -1, -34, 111, -33, -2, -1, 62};
  // {01010000 00100000 00001001 00000000 10000000 10000010 00000000 00000100 00000000 00000011 00011000 00000000 00000000 00000000 00000100 00000001 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {10, 4, -112, 0, 1, 65, 0, 32, 0, -64, 24, 0, 0, 0, 32, -128, 0};
  // {00000000 00000000 00000000 00000100 10001000 10000010 00000000 01000100 00000000 00001000 00001000 00100000 00100000 01100000 00000100 00000010 0100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 32, 17, 65, 0, 34, 0, 16, 16, 4, 4, 6, 32, 64, 2};
  // {01000000 00000000 00111001 00110000 01100000 00000010 10110000 01000000 00001001 00101101 01000000 00000000 00001100 00010001 10000010 00000100 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 0, -100, 12, 6, 64, 13, 2, -112, -76, 2, 0, 48, -120, 65, 32, 0};
  // {11111111 11111111 01111111 11111111 11101101 11110111 11111111 01101101 11111101 11111111 11111111 11111111 11111110 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -2, -1, -73, -17, -1, -74, -65, -1, -1, -1, 127, -1, -1, -1, 63};
  // {00000001 00000001 00100100 10000000 00100001 00000000 00000000 00000000 00001000 00000000 00000000 00000011 11000001 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, -128, 36, 1, -124, 0, 0, 0, 16, 0, 0, -64, -125, 0, 0, 0, 0};
  // {11010110 01000101 11010100 11000111 01111111 11110100 11000111 10010110 11011111 01001111 01101111 11111111 11111011 11110001 11111101 11111011 0111}
  public static final byte[] GRPSPLIT14 = new byte[] {107, -94, 43, -29, -2, 47, -29, 105, -5, -14, -10, -1, -33, -113, -65, -33, 14};
  // {11111111 11111110 11111111 11011111 01011110 11011111 11110111 11111111 11010111 11100011 11111011 10111001 10111111 11110111 00111111 11111011 111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, 127, -1, -5, 122, -5, -17, -1, -21, -57, -33, -99, -3, -17, -4, -33, 31};
  // {11111111 11110101 11010111 11111111 01111111 11110110 11010111 11011110 11111111 01111111 01111111 11111111 11111111 11110111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -81, -21, -1, -2, 111, -21, 123, -1, -2, -2, -1, -1, -17, -1, -1, 15};
  // {00000000 00010000 00000000 01010000}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 8, 0, 10};
  // {10001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {81, 0, 0, 0};
  // {11010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT19 = new byte[] {75, 0, 0, 0};
  // {01111111 11101111 11111111 11111110}
  public static final byte[] GRPSPLIT20 = new byte[] {-2, -9, -1, 127};
  // {10111111 11111111 11111111 11101110 10111111 11111101 11111011 11111111 11101111 01111110 11111111 11111111 11110011 11111111 11110111 11011111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-3, -1, -1, 119, -3, -65, -33, -1, -9, 126, -1, -1, -49, -1, -17, -5, 63};
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 64, 2};
  // {01111111 11101111 10010011 01110011 01111111 01111011 10111111 01101111 01111111 10111111 10011111 11101110 11111110 00101010 11011111 11101111 111001}
  public static final byte[] GRPSPLIT23 = new byte[] {-2, -9, -55, -50, -2, -34, -3, -10, -2, -3, -7, 119, 127, 84, -5, -9, 39};
  // {01000000 00000100 00010000 00000000 00000000 00000000 00000001 00000110 01000000 01000000 00000000 01000000 00000000 00100000 00100100 10000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {2, 32, 8, 0, 0, 0, -128, 96, 2, 2, 0, 2, 0, 4, 36, 1, 0};
  // {00000010 00000100 11000100 10000001 00001111 10110100 01000100 00000010 10001011 01001110 00100100 11010000 10100011 01010000 01000101 00011011 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {64, 32, 35, -127, -16, 45, 34, 64, -47, 114, 36, 11, -59, 10, -94, -40, 0};
  // {11110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {79, 0, 0, 0};
  // {10101111 11111000 11001111 10111111 00001111 10011011 11111111 10111111 11110111 11111101 01110111 11101001 11101101 11101111 01111011 11111011 111101}
  public static final byte[] GRPSPLIT27 = new byte[] {-11, 31, -13, -3, -16, -39, -1, -3, -17, -65, -18, -105, -73, -9, -34, -33, 47};
  // {11111101 01111111 11111111 11111111 11110111 11111111 11101101 11110111 10111111 11111111 11110111 11111111 11111111 11111111 11011111 11111111 111111}
  public static final byte[] GRPSPLIT28 = new byte[] {-65, -2, -1, -1, -17, -1, -73, -17, -3, -1, -17, -1, -1, -1, -5, -1, 63};
}


class gbm_pojo_test_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_9_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT0, 132, 0, data[5])) ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.103042975f : 
                        -0.059737973f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.06236107f : 
                        0.0073990747f)) : 
                 (data[4 /* TailNum */] <947.5f ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(946, 2, data[4]) || (GenModel.bitSetIsInRange(946, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 946, 2, data[4])) ? 
                        -0.0942568f : 
                        0.094898105f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(131, 0, data[5]) || (GenModel.bitSetIsInRange(131, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 131, 0, data[5])) ? 
                        -0.028285544f : 
                        0.020064887f))) : 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.072818436f : 
                        -0.015266381f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        -0.02144067f : 
                        0.021438705f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1940.0f ? 
                        0.0033875557f : 
                        -0.13631992f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                        0.057218626f : 
                        0.13514367f)))) : 
         (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                 (data[4 /* TailNum */] <3357.5f ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.05825194f : 
                        0.002227084f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.02124894f : 
                        0.021576611f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        -0.06253333f : 
                        0.016061842f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        0.01179421f : 
                        0.10013257f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[1])) ? 
                        -0.013970411f : 
                        0.03562635f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        0.024431808f : 
                        0.06815622f)) : 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[2])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                        -0.08323025f : 
                        0.054135792f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        0.038032137f : 
                        0.0771726f)))));
    return pred;
  } // constant pool size = 602B, number of visited nodes = 31, static init size = 2856B
  // {00011110 01000000 10010110 01000111 00110111 00100100 11000111 10000110 11011111 01010100 00001001 11010010 11100111 11010010 11010101 00111010 0001}
  public static final byte[] GRPSPLIT0 = new byte[] {120, 2, 105, -30, -20, 36, -29, 97, -5, 42, -112, 75, -25, 75, -85, 92, 8};
  // {11011000 00110100 00000010 01111110}
  public static final byte[] GRPSPLIT1 = new byte[] {27, 44, 64, 126};
  // {01000100 10100101 00101100 10000000 01000000 00100000 00001000 01001100 00111000 10100110 10000111 11000110 00011101 10100011 00000011 01100000 101110}
  public static final byte[] GRPSPLIT2 = new byte[] {34, -91, 52, 1, 2, 4, 16, 50, 28, 101, -31, 99, -72, -59, -64, 6, 29};
  // {01000000 00100001 01100001 00000000 10000000 00000010 00001000 00000000 00000000 00000001 00000000 00000000 00001000 00000000 00100010 00000001 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, -124, -122, 0, 1, 64, 16, 0, 0, -128, 0, 0, 16, 0, 68, -128, 0};
  // {00000010 00000000 00000000 00100000 10010000 00000110 00100000 00100000 10000011 00001000 01001000 00110000 01000000 00010100 00000100 00010100 000001}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 0, 0, 4, 9, 96, 4, 4, -63, 16, 18, 12, 2, 40, 32, 40, 32};
  // {10011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {25, 0, 0, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT6 = new byte[] {64, 8, 88, 0, 0, 0, 10, 32, 0, 1, 0, 73, 0, -88, 0, 96, 0, -14, -128, 70, 0, 2, 65, 1, -46, 0, -128, 65, 40, 90, 0, 0, 48, 0, 64, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 48, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 24, 2, 1, 16, 0, 33, 36, 0, 64, 0, 0, 66, -124, -120, -117, -127, 64, -124, -64, 33, -64, 36, 18, 16, 64, 36, -127, -110, 0, 48, 4, 32, -128, -90, 0, -124, 36, 66, 2, 4, 0, 8, 2};
  // {00000000 00100000 01000000 10000000 01001000 00010000 00000000 01000000 00000000 00000000 00000000 00100000 00001000 00000000 00000010 00000000 001}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 4, 2, 1, 18, 8, 0, 2, 0, 0, 0, 4, 16, 0, 64, 0, 4};
  // {01001001 00001010 10001010 10000000 01000000 00101000 10000001 00000000 00000111 00100101 00000001 01001000 10000000 10100010 11001001 11110100 101000}
  public static final byte[] GRPSPLIT8 = new byte[] {-110, 80, 81, 1, 2, 20, -127, 0, -32, -92, -128, 18, 1, 69, -109, 47, 5};
  // {11001011 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {-45, 3, 0, 0};
  // {10111110 11111111 11111110 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11110111 11111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {125, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -5, -17, -1, 15};
  // {11000000 00010100 00000000 00000000 01000000 10010000 00000000 00100000 00000000 10001010 00000100 00101101 00010000 00100001 00101010 10000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {3, 40, 0, 0, 2, 9, 0, 4, 0, 81, 32, -76, 8, -124, 84, 1, 0};
  // {11111111 11101111 11111110 11111111 11111111 11111101 11001111 11111111 11111111 11111111 11111111 11111111 11110111 11111110 11111101 11111011 0011}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -9, 127, -1, -1, -65, -13, -1, -1, -1, -1, -1, -17, 127, -65, -33, 12};
  // {00001001 00001010 10000010 00000000 00000000 00000000 10000001 00000000 00000110 00100000 00000000 00000000 00000000 00000000 00001000 10000000 001000}
  public static final byte[] GRPSPLIT13 = new byte[] {-112, 80, 65, 0, 0, 0, -127, 0, 96, 4, 0, 0, 0, 0, 16, 1, 4};
  // {01000111 10101100 01011111 10011001 00011101 10011010 10111101 00001001 01111111 11111101 00000011 11111001 11111110 01111111 01011111 01101110 001101}
  public static final byte[] GRPSPLIT14 = new byte[] {-30, 53, -6, -103, -72, 89, -67, -112, -2, -65, -64, -97, 127, -2, -6, 118, 44};
  // {00010010 00000000 10000000 00000000 00000110 00000100 00000000 00000000 00000000 01000000 00000001 10010000 01000011 00000000 00010000 00001000 0001}
  public static final byte[] GRPSPLIT15 = new byte[] {72, 0, 1, 0, 96, 32, 0, 0, 0, 2, -128, 9, -62, 0, 8, 16, 8};
  // {10000000 00111101 00000010 11110000}
  public static final byte[] GRPSPLIT16 = new byte[] {1, -68, 64, 15};
  // {11111111 11010000 01000110 01000110}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, 11, 98, 98};
  // {00011010 01010101 10101110 01011010}
  public static final byte[] GRPSPLIT18 = new byte[] {88, -86, 117, 90};
  // {11111111 11111111 11111111 11111111 11011101 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 011111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62};
  // {11111111 11111101 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -65, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63};
  // {00000110 00000000 10000100 00000000 00010011 00000000 11000111 00000010 11001001 01000100 00001000 00010000 11000010 00000000 00000001 00110000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {96, 0, 33, 0, -56, 0, -29, 64, -109, 34, 16, 8, 67, 0, -128, 12, 0};
  // {11010111 00010010 10000010 01111110}
  public static final byte[] GRPSPLIT22 = new byte[] {-21, 72, 65, 126};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {24, 0, 0, 0};
  // {00000000 00100100 00000000 00000000 00010100 00000010 10101001 00000000 01000101 00010000 00000000 10101000 10000000 00010000 01010000 01100000 000000}
  public static final byte[] GRPSPLIT24 = new byte[] {0, 36, 0, 0, 40, 64, -107, 0, -94, 8, 0, 21, 1, 8, 10, 6, 0};
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {119, 3, 0, 0};
  // {10001000 01011001 10101000 10001100}
  public static final byte[] GRPSPLIT26 = new byte[] {17, -102, 21, 49};
  // {11111100 11111011 11111111 11101110 11111010 01111111 11101111 11111111 11110111 10110010 11111111 11010111 01001011 11101101 10111010 11111011 111111}
  public static final byte[] GRPSPLIT27 = new byte[] {63, -33, -1, 119, 95, -2, -9, -1, -17, 77, -1, -21, -46, -73, 93, -33, 63};
}


class gbm_pojo_test_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_10_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (data[3 /* FlightNum */] <238.0f ? 
                        0.06377955f : 
                        -0.09549621f) : 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2215.5f ? 
                        -0.04511988f : 
                        0.10211175f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                     (data[3 /* FlightNum */] <400.5f ? 
                        -0.08164249f : 
                        -0.025447315f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.019615911f : 
                        0.034609377f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <37.5f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(36, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT7, 36, 2, data[4])) ? 
                        -0.16112433f : 
                        0.1612864f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(124, 3, data[5]) || (GenModel.bitSetIsInRange(124, 3, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 124, 3, data[5])) ? 
                        -0.030803755f : 
                        0.0700432f)) : 
                 (data[4 /* TailNum */] <3080.5f ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(131, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 131, 0, data[6])) ? 
                        -0.037014384f : 
                        0.012848084f) : 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(420, 3081, data[4]) && !GenModel.bitSetContains(GRPSPLIT10, 420, 3081, data[4])) ? 
                        -0.16145204f : 
                        0.03530682f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        -0.11932257f : 
                        -0.036333f) : 
                     (data[3 /* FlightNum */] <1054.0f ? 
                        -0.05619362f : 
                        0.012812727f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        -0.020389348f : 
                        0.0557709f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        0.013497995f : 
                        0.073992975f))) : 
             (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (data[4 /* TailNum */] <1605.5f ? 
                        -0.15396264f : 
                        -0.033088703f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        -0.071662724f : 
                        0.054386947f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.051862154f : 
                        0.056680895f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.0706357f : 
                        0.13665642f)))));
    return pred;
  } // constant pool size = 529B, number of visited nodes = 31, static init size = 2418B
  // {00000000 00010000 00000010 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 8, 64, 2};
  // {00010110 01000001 10010110 11000101 00110101 10100000 11000110 00100010 11001001 10010100 10000001 01010010 11100101 11000010 01010111 00111010 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {104, -126, 105, -93, -84, 5, 99, 68, -109, 41, -127, 74, -89, 67, -22, 92, 8};
  // {11001111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {-13, 3, 0, 0};
  // {01111101 10011110 00011110 11111100}
  public static final byte[] GRPSPLIT3 = new byte[] {-66, 121, 120, 63};
  // {01010100 00100100 01000000 11000001 00000000 00100010 00000000 01000000 11101001 10000001 10000100 01000000 10011000 10000010 00001010 00100000 001010}
  public static final byte[] GRPSPLIT4 = new byte[] {42, 36, 2, -125, 0, 68, 0, 2, -105, -127, 33, 2, 25, 65, 80, 4, 20};
  // {00000000 00000000 01000000 00000000 11000000 00010000 00010000 01000000 00000010 00000010 00001000 00100000 00000000 00000000 00000000 10000000 0100}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 2, 0, 3, 8, 8, 2, 64, 64, 16, 4, 0, 0, 0, 1, 2};
  // {11011100 00110001 00111011 00011101 01101001 01111010 10111111 00010001 01111111 11111101 01000001 11101000 11111100 11101011 11000111 11010100 101100}
  public static final byte[] GRPSPLIT6 = new byte[] {59, -116, -36, -72, -106, 94, -3, -120, -2, -65, -126, 23, 63, -41, -29, 43, 13};
  // {...2 0-bits... 00111111 01010011 10111111 11111111 11}
  public static final byte[] GRPSPLIT7 = new byte[] {-4, -54, -3, -1, 15};
  // {...3 0-bits... 10010000 00000000 00010000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00001000 00000000 00001000 00000000 10100000 0}
  public static final byte[] GRPSPLIT8 = new byte[] {9, 0, 8, 0, 0, 32, 0, 0, 0, 0, 16, 0, 16, 0, 5, 0};
  // {00101111 11011111 11110111 11101111 10011111 11011111 11011111 11111111 11111110 11110111 10111111 11111111 11111011 01010111 01111100 11111111 111}
  public static final byte[] GRPSPLIT9 = new byte[] {-12, -5, -17, -9, -7, -5, -5, -1, 127, -17, -3, -1, -33, -22, 62, -1, 7};
  // {...3081 0-bits... }
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, 126, -33, -65, -2, -38, 119, -41, -53, -3, -33, -1, -5, 47, -17, -5, 95, 127, -2, -33, 126, -5, -33, 127, -1, -97, 119, -1, -3, -1, -17, -25, -1, -9, -1, -9, -1, -17, -1, -1, -66, -1, -1, -3, -1, 63, -1, -65, -17, -9, 127, 15};
  // {11000110 10100001 10001110 00000100 01111111 01011100 00000101 00010110 11001011 01011001 00011001 11111111 11111011 01110011 11111001 01111001 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {99, -123, 113, 32, -2, 58, -96, 104, -45, -102, -104, -1, -33, -50, -97, -98, 15};
  // {11110111 01111110 10011111 11011011 00011011 11111001 11010111 10010101 00001111 10110011 11111001 11010011 10111011 11110111 01110111 11011111 111010}
  public static final byte[] GRPSPLIT12 = new byte[] {-17, 126, -7, -37, -40, -97, -21, -87, -16, -51, -97, -53, -35, -17, -18, -5, 23};
  // {00011000 01010100 01100001 01000000 10000000 10100011 01001010 11000000 00010100 10000110 00000010 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {24, 42, -122, 2, 1, -59, 82, 3, 40, 97, 64, 0, 0, 0, 0, 0, 0};
  // {00001000 00000000 01000000 00000100 00000100 00000110 00000000 00001010 10000000 01001100 00000100 00100100 00000000 00000000 00001000 00000000 000100}
  public static final byte[] GRPSPLIT14 = new byte[] {16, 0, 2, 32, 32, 96, 0, 80, 1, 50, 32, 36, 0, 0, 16, 0, 8};
  // {00000000 00000010 01010001 10000011 10000000 10100000 10010010 00000000 00000000 00000100 00100010 00000000 00000000 10000000 00000010 10000010 0000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 64, -118, -63, 1, 5, 73, 0, 0, 32, 68, 0, 0, 1, 64, 65, 0};
  // {00000001 00101100 00010000 01010000 00000000 00000000 00000001 00000000 00000101 00000001 00000000 00000000 00000000 00100000 01000100 00000100 000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-128, 52, 8, 10, 0, 0, -128, 0, -96, -128, 0, 0, 0, 4, 34, 32, 0};
  // {11111110 11111011 11100111 10101110 11111111 11111111 11111011 11111011 11111011 11111110 11111111 01111101 01111111 01011110 10111110 11111111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {127, -33, -25, 117, -1, -1, -33, -33, -33, 127, -1, -66, -2, 122, 125, -1, 63};
  // {11101010 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {87, 3, 0, 0};
  // {10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11100100 11111111 11011111 01011111 11110111 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-3, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, 39, -1, -5, -6, -17, 15};
  // {10111101 11111111 11111111 11100111 10111111 10111111 11111111 10111011 11101111 11111111 01110111 01101111 11111111 11111111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT20 = new byte[] {-67, -1, -1, -25, -3, -3, -1, -35, -9, -1, -18, -10, -1, -1, -33, -1, 63};
  // {11101111 11000101 11111111 11111111 01101111 11011111 11101101 00111111 11111111 11110101 10110011 11111011 11111110 01000110 10011110 11101011 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-9, -93, -1, -1, -10, -5, -73, -4, -1, -81, -51, -33, 127, 98, 121, -41, 63};
  // {11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 10111101 11111111 11111110 01111101 01111101 11111110 10011111 11111111 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -1, -3, -1, -1, -1, -67, -1, 127, -66, -66, 127, -7, -1, 15};
  // {00001010 00000000 11000001 00000000 00100000 10000000 00000001 00100001 00000101 01010000 00100000 00110011 10100000 01000000 00001000 00000000 110000}
  public static final byte[] GRPSPLIT23 = new byte[] {80, 0, -125, 0, 4, 1, -128, -124, -96, 10, 4, -52, 5, 2, 16, 0, 3};
}


class gbm_pojo_test_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_11_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.08285118f : 
                        -0.03695577f) : 
                     (data[4 /* TailNum */] <1548.5f ? 
                        -0.04671757f : 
                        -0.013634085f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.12211443f : 
                        -0.008664863f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.035889197f : 
                        0.035004422f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <3316.5f ? 
                     (data[4 /* TailNum */] <135.0f ? 
                        0.07585389f : 
                        -0.042205803f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                        -0.07609043f : 
                        0.005921222f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[1])) ? 
                        -0.008416291f : 
                        0.027881468f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
                        0.008475924f : 
                        0.051111594f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.06875249f : 
                        -0.019742712f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.0205751f : 
                        0.008561835f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (data[4 /* TailNum */] <458.0f ? 
                        0.0883862f : 
                        -0.038047574f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        0.037755042f : 
                        0.079452805f))) : 
             (data[3 /* FlightNum */] <102.5f ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(102, 1, data[3]) && !GenModel.bitSetContains(GRPSPLIT20, 102, 1, data[3])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[6]) || (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 133, 0, data[6])) ? 
                        -0.13097061f : 
                        0.14094862f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 133, 0, data[6])) ? 
                        -0.022743663f : 
                        0.09803362f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[6]) || (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 133, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        0.024039f : 
                        0.09118524f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        0.036497045f : 
                        0.09197084f)))));
    return pred;
  } // constant pool size = 499B, number of visited nodes = 31, static init size = 2238B
  // {10010000 00010000 00000010 01111010}
  public static final byte[] GRPSPLIT0 = new byte[] {9, 8, 64, 94};
  // {00010010 01100001 10010110 11001101 00100001 00100000 01000010 00100010 11001001 00010100 10000101 01010010 11000101 10000010 01010011 00111000 0001}
  public static final byte[] GRPSPLIT1 = new byte[] {72, -122, 105, -77, -124, 4, 66, 68, -109, 40, -95, 74, -93, 65, -54, 28, 8};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 0, 0, 0};
  // {11111110 11011101 00101111 11000111 10011110 11110111 01011111 11001111 11111111 11110011 10010111 01000111 11111111 10110011 11111110 11111011 011111}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -69, -12, -29, 121, -17, -6, -13, -1, -49, -23, -30, -1, -51, 127, -33, 62};
  // {01000000 00010100 00101001 00000000 10000100 10000010 00001001 00000000 00000010 00000001 00100000 00001000 00101000 00000000 10100000 00000001 0100}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 40, -108, 0, 33, 65, -112, 0, 64, -128, 4, 16, 20, 0, 5, -128, 2};
  // {11111101 11111111 11011111 11110111 10001011 11111111 01111111 11011011 10111111 01111111 11110011 11101111 11111110 11110011 11111011 11111111 011001}
  public static final byte[] GRPSPLIT5 = new byte[] {-65, -1, -5, -17, -47, -1, -2, -37, -3, -2, -49, -9, 127, -49, -33, -1, 38};
  // {00100001 00000101 10010000 00000100}
  public static final byte[] GRPSPLIT6 = new byte[] {-124, -96, 9, 32};
  // {11011111 11111111 00001111 11111110}
  public static final byte[] GRPSPLIT7 = new byte[] {-5, -1, -16, 127};
  // {01000000 00100010 00111001 00010000 01000000 00010010 10111010 00000000 01011000 00101101 01010001 10000010 00011100 11000101 01000011 01000100 101000}
  public static final byte[] GRPSPLIT8 = new byte[] {2, 68, -100, 8, 2, 72, 93, 0, 26, -76, -118, 65, 56, -93, -62, 34, 5};
  // {11111111 11111111 01111111 11111111 11111101 11111111 11111111 01111101 11111101 11111101 01110111 11111111 11111110 11111111 11111111 11111110 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -2, -1, -65, -1, -1, -66, -65, -65, -18, -1, 127, -1, -1, 127, 63};
  // {00010010 00000000 10010000 10000000 00000001 00000000 01000010 00000000 01001000 00010000 00000000 00010010 11000100 00000000 00000001 00110000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {72, 0, 9, 1, -128, 0, 66, 0, 18, 8, 0, 72, 35, 0, -128, 12, 0};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {24, 0, 0, 0};
  // {10111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {61, 0, 0, 0};
  // {10100110 00000000 11000100 00000101 11110111 00010000 01000101 00000110 10011011 01001100 00100000 11111001 10110011 01010010 11100101 10111010 0011}
  public static final byte[] GRPSPLIT13 = new byte[] {101, 0, 35, -96, -17, 8, -94, 96, -39, 50, 4, -97, -51, 74, -89, 93, 12};
  // {01000000 00111010 10110010 00010000 01000100 00000010 10100001 00000001 01000110 00110001 11000000 00000000 11000000 00110010 00000001 11000100 101010}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 92, 77, 8, 34, 64, -123, -128, 98, -116, 3, 0, 3, 76, -128, 35, 21};
  // {01111101 01111111 11111111 10011011 01111111 11101111 11110111 10110001 01111111 00111101 11111000 11011101 11111110 10111110 11111111 11101101 111010}
  public static final byte[] GRPSPLIT15 = new byte[] {-66, -2, -1, -39, -2, -9, -17, -115, -2, -68, 31, -69, 127, 125, -1, -73, 23};
  // {00000000 00010000 00000010 01010000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 8, 64, 10};
  // {10101110 01110100 11011111 01100111 11110111 11111100 11000111 10011110 11111111 11101111 00111001 11111011 11110111 01111111 11111111 11111111 0111}
  public static final byte[] GRPSPLIT17 = new byte[] {117, 46, -5, -26, -17, 63, -29, 121, -1, -9, -100, -33, -17, -2, -1, -1, 14};
  // {11110111 10001111 11111100 11111111 11110111 10111111 11111111 00111110 11111011 11111111 11111111 11111111 11111111 11111110 11111101 11111111 0011}
  public static final byte[] GRPSPLIT18 = new byte[] {-17, -15, 63, -1, -17, -3, -1, 124, -33, -1, -1, -1, -1, 127, -65, -1, 12};
  // {11111111 11011111 11001111 11111111 10111011 11111111 11011111 11111110 10111011 11111111 00111111 11111111 11111111 11001111 11111110 10111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -5, -13, -1, -35, -1, -5, 127, -35, -1, -4, -1, -1, -13, 127, -3, 63};
  // {...1 0-bits... 11111111 11111111 11110010 10111010 11100000 11100111 01110111 11101011 10101001 01000001 00110010 10000111 11101}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, 79, 93, 7, -25, -18, -41, -107, -126, 76, -31, 23};
  // {00001000 00000000 00100000 00000000 00000000 00000010 00000000 00000011 00000000 00000000 00000000 00000000 00000000 10000000 10000000 01010000 00000}
  public static final byte[] GRPSPLIT21 = new byte[] {16, 0, 4, 0, 0, 64, 0, -64, 0, 0, 0, 0, 0, 1, 1, 10, 0};
  // {01111111 11111111 11111111 11110111 11111011 11111101 01111111 11111011 11111111 11111001 11111111 01011011 10110111 11101111 11111101 11111111 11111}
  public static final byte[] GRPSPLIT22 = new byte[] {-2, -1, -1, -17, -33, -65, -2, -33, -1, -97, -1, -38, -19, -9, -65, -1, 31};
  // {10101001 00000111 11010001 11000001 00010100 00101011 10000001 00000111 10000101 01010100 00000000 00111010 11100000 00101010 01011110 01100001 00110}
  public static final byte[] GRPSPLIT23 = new byte[] {-107, -32, -117, -125, 40, -44, -127, -32, -95, 42, 0, 92, 7, 84, 122, -122, 12};
  // {10000100 00000000 00000000 00000000 00010101 00010000 01000000 00000000 10010000 01000000 00000000 00010000 00100011 01000000 10000001 00111000 0001}
  public static final byte[] GRPSPLIT24 = new byte[] {33, 0, 0, 0, -88, 8, 2, 0, 9, 2, 0, 8, -60, 2, -127, 28, 8};
  // {11111111 11111111 11111111 11111110 01111111 11111111 11111110 11111111 11101110 11110111 11111111 11101111 11111101 10101111 00111111 01110101 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -1, -1, 127, -2, -1, 127, -1, 119, -17, -1, -9, -65, -11, -4, -82, 15};
}


class gbm_pojo_test_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_12_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.092285044f : 
                        -0.043603245f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.04615049f : 
                        3.3478278E-5f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (data[4 /* TailNum */] <135.0f ? 
                        0.11999128f : 
                        -0.03807812f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.017111672f : 
                        0.013552622f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.08500027f : 
                        -0.018423093f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        -0.005818355f : 
                        0.057483327f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.07411347f : 
                        0.011862976f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.019061571f : 
                        0.059951365f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                 (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[2])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.044533838f : 
                        -0.008242977f) : 
                     (data[4 /* TailNum */] <2752.5f ? 
                        -0.0026495985f : 
                        0.1284068f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.068452604f : 
                        0.0012703423f) : 
                     (data[3 /* FlightNum */] <419.0f ? 
                        -0.008742221f : 
                        0.056012105f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                     (data[4 /* TailNum */] <3056.5f ? 
                        -0.04452317f : 
                        0.0089339195f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        0.023992358f : 
                        0.104607515f)) : 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[1])) ? 
                        -0.049479146f : 
                        0.011121951f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        0.025480485f : 
                        0.05804411f)))));
    return pred;
  } // constant pool size = 469B, number of visited nodes = 31, static init size = 2058B
  // {11011000 00010000 00000010 01111010}
  public static final byte[] GRPSPLIT0 = new byte[] {27, 8, 64, 94};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0};
  // {10010010 00100001 10010111 11001101 01110001 00100011 01000011 00000010 01001001 00000100 01000101 01110110 11001001 11100000 01000001 00111001 0010}
  public static final byte[] GRPSPLIT2 = new byte[] {73, -124, -23, -77, -114, -60, -62, 64, -110, 32, -94, 110, -109, 7, -126, -100, 4};
  // {01000110 00000100 00100000 11000000 00010100 00100010 00000000 01000100 10011000 00000000 11000100 10000010 11010000 10100111 10000011 01100000 001010}
  public static final byte[] GRPSPLIT3 = new byte[] {98, 32, 4, 3, 40, 68, 0, 34, 25, 0, 35, 65, 11, -27, -63, 6, 20};
  // {11111111 01111101 11111111 11111111 11111101 11101111 11100111 10111111 11011101 11110111 11110111 01111110 11101001 11110111 11011101 01111011 1010}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -66, -1, -1, -65, -9, -25, -3, -69, -17, -17, 126, -105, -17, -69, -34, 5};
  // {11111111 11110001 00011110 11111110}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -113, 120, 127};
  // {01000000 10100100 00101101 10010010 11000100 00110011 10111010 00000000 00111001 10100101 11011001 00000100 00111100 11010111 01010111 01000000 111000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 37, -76, 73, 35, -52, 93, 0, -100, -91, -101, 32, 60, -21, -22, 2, 7};
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {119, 3, 0, 0};
  // {01000010 01100101 11010110 01000101 00100001 10000000 01010010 00100110 11001011 01010010 10001100 01001000 11100101 10000010 01011110 00111010 0001}
  public static final byte[] GRPSPLIT8 = new byte[] {66, -90, 107, -94, -124, 1, 74, 100, -45, 74, 49, 18, -89, 65, 122, 92, 8};
  // {11111101 11111011 10011111 00110111 11001011 11111111 01110111 10011011 11011110 01110011 00110010 11001011 11111000 11100011 11111011 11111111 011011}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -33, -7, -20, -45, -1, -18, -39, 123, -50, 76, -45, 31, -57, -33, -1, 54};
  // {00000100 00101101 10101100 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {32, -76, 53, 0};
  // {00000000 00000000 00000000 10000000 10001000 00000000 00000000 00000000 00000000 00000000 00000000 00000010 00001000 00000000 00100000 00000000 0100}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 0, 0, 1, 17, 0, 0, 0, 0, 0, 0, 64, 16, 0, 4, 0, 2};
  // {11111111 11111001 11111111 10111101 00101011 11111010 11100101 10111101 11111111 11111101 11110011 11111111 11011110 11101001 11011010 11111011 101110}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -97, -1, -67, -44, 95, -89, -67, -1, -65, -49, -1, 123, -105, 91, -33, 29};
  // {00100100 01101001 00000100 10000000}
  public static final byte[] GRPSPLIT13 = new byte[] {36, -106, 32, 1};
  // {11111110 01111001 00101110 11111010}
  public static final byte[] GRPSPLIT14 = new byte[] {127, -98, 116, 95};
  // {00000110 00000101 11010100 00100111 11110111 10110100 11000111 00110110 11011011 11001101 00100001 11111001 11110111 01010011 11110101 11101010 0001}
  public static final byte[] GRPSPLIT15 = new byte[] {96, -96, 43, -28, -17, 45, -29, 108, -37, -77, -124, -97, -17, -54, -81, 87, 8};
  // {01001001 00001010 10011010 00000000 00010100 00000010 10000101 00000100 00101110 00100001 11000000 01001001 11000100 10000000 00001011 10100100 001010}
  public static final byte[] GRPSPLIT16 = new byte[] {-110, 80, 89, 0, 40, 64, -95, 32, 116, -124, 3, -110, 35, 1, -48, 37, 20};
  // {11000000 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {3, 2, 0, 0};
  // {00010000 01000000 00000011 11000000 00000000 00000001 00000000 00000000 00000000 00000000 01000000 00000000 00000000 10000000 00000010 00000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {8, 2, -64, 3, 0, -128, 0, 0, 0, 0, 2, 0, 0, 1, 64, 0, 0};
  // {10000001 11000010 00100000 11000000 00000000 00000000 00010000 00000001 00000000 00000010 00001010 00000010 00001000 00100000 00001000 00000000 0100}
  public static final byte[] GRPSPLIT19 = new byte[] {-127, 67, 4, 3, 0, 0, 8, -128, 0, 64, 80, 64, 16, 4, 16, 0, 2};
  // {01100111 11111111 11111111 11101110}
  public static final byte[] GRPSPLIT20 = new byte[] {-26, -1, -1, 119};
  // {01110101 10111111 10011111 11010011 01001111 00101110 10101101 00101011 10111111 10111101 00000011 11101011 11111010 01110111 11011111 11111011 101001}
  public static final byte[] GRPSPLIT21 = new byte[] {-82, -3, -7, -53, -14, 116, -75, -44, -3, -67, -64, -41, 95, -18, -5, -33, 37};
  // {00000000 00000001 00000000 00000001 00110101 00000100 01000001 00000110 10010011 11000001 00000000 11010001 00100001 00010000 10000100 00000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, -128, 0, -128, -84, 32, -126, 96, -55, -125, 0, -117, -124, 8, 33, 0, 0};
  // {00000000 00000000 00000000 00000000 00000101 00000000 01000001 00000000 10010000 01000000 00000000 10000000 00100001 00010000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 0, 0, 0, -96, 0, -126, 0, 9, 2, 0, 1, -124, 8, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-9, 3, 0, 0};
  // {10000110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT25 = new byte[] {97, 0, 0, 0};
  // {11111111 11111010 11101111 11111000 11011111 01011111 01111100 11111011 11101101 11111111 11011111 00111111 10001111 10101100 00101011 11111111 1111}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, 95, -9, 31, -5, -6, 62, -33, -73, -1, -5, -4, -15, 53, -44, -1, 15};
}


class gbm_pojo_test_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_13_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3374.5f ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
                 (data[4 /* TailNum */] <26.5f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                        -0.08837945f : 
                        0.16502427f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 133, 0, data[6])) ? 
                        -0.04703506f : 
                        -0.012570624f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.07759968f : 
                        0.004593835f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        0.0038333142f : 
                        0.040785946f))) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(126, 3375, data[4]) || (GenModel.bitSetIsInRange(126, 3375, data[4]) && !GenModel.bitSetContains(GRPSPLIT7, 126, 3375, data[4])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.082795344f : 
                        -0.015839502f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        -0.004268375f : 
                        0.037213948f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        0.07841482f : 
                        0.1572279f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.17855452f : 
                        0.20830135f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.19447806f : 
                        -0.1434345f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.060757995f : 
                        0.06397938f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.11205686f : 
                        -0.016797371f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        -0.03190253f : 
                        0.041290116f))) : 
             (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.13887481f : 
                        0.012900974f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.12213039f : 
                        0.08857204f)) : 
                 (data[4 /* TailNum */] <1719.5f ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        -0.0059516164f : 
                        0.07289981f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 133, 0, data[6])) ? 
                        -0.049382307f : 
                        0.089952216f)))));
    return pred;
  } // constant pool size = 525B, number of visited nodes = 31, static init size = 2394B
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 64, 2};
  // {00001110 00000100 00010000 01000110 00100110 00000101 11000001 00000001 00000001 01000000 00000000 00010000 00000100 11000000 00000111 00101010 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {112, 32, 8, 98, 100, -96, -125, -128, -128, 2, 0, 8, 32, 3, -32, 84, 0};
  // {00000000 00000100 10000110 11000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 32, 97, 3};
  // {01101111 00110111 11110111 00000111 00011011 11111011 11010111 10010011 01110110 10100101 10011101 10101011 11111001 11000011 01111101 11110101 11100}
  public static final byte[] GRPSPLIT3 = new byte[] {-10, -20, -17, -32, -40, -33, -21, -55, 110, -91, -71, -43, -97, -61, -66, -81, 7};
  // {11110111 11111110 10111111 10011011 11011011 11111111 11111111 10111101 11101111 10111011 11111011 11010011 11111011 01111111 10110100 11001111 111011}
  public static final byte[] GRPSPLIT4 = new byte[] {-17, 127, -3, -39, -37, -1, -1, -67, -9, -35, -33, -53, -33, -2, 45, -13, 55};
  // {10010110 11111101 00111110 01111010}
  public static final byte[] GRPSPLIT5 = new byte[] {105, -65, 124, 94};
  // {10000011 01010011 10000000 10111110}
  public static final byte[] GRPSPLIT6 = new byte[] {-63, -54, 1, 125};
  // {...3375 0-bits... }
  public static final byte[] GRPSPLIT7 = new byte[] {65, 24, 100, -90, 2, 22, 71, 37, 0, 96, 32, 116, 0, -55, 2, 40};
  // {00011101 01011011 11110110 11110011 11110111 01110110 10110110 10010011 11011111 00111100 00000111 11011011 11100011 00111011 11011001 01111000 1101}
  public static final byte[] GRPSPLIT8 = new byte[] {-72, -38, 111, -49, -17, 110, 109, -55, -5, 60, -32, -37, -57, -36, -101, 30, 11};
  // {11111101 11111011 11111111 11111011 11111111 11110111 10111111 11111111 11011111 11111111 11111111 11111111 11100011 10111111 11111111 01111011 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-65, -33, -1, -33, -1, -17, -3, -1, -5, -1, -1, -1, -57, -3, -1, -34, 15};
  // {01010010 01100010 01011001 10110000 01100000 00000110 10111000 01000000 00011001 00101100 11000000 00000100 11100100 00011000 10001010 00100000 001000}
  public static final byte[] GRPSPLIT10 = new byte[] {74, 70, -102, 13, 6, 96, 29, 2, -104, 52, 3, 32, 39, 24, 81, 4, 4};
  // {01000001 00000000 00100000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00000001 00000000 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {-126, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, -128, 0, 0, 0};
  // {10111101 11111111 11110111 11111110}
  public static final byte[] GRPSPLIT12 = new byte[] {-67, -1, -17, 127};
  // {00000001 00000000 00100000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, 0, 4, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11011100 11100001 11001101 00010110 01111111 11111000 10110111 11010110 11011111 01011101 01101011 11101111 11111011 01110111 11111001 11111011 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {59, -121, -77, 104, -2, 31, -19, 107, -5, -70, -42, -9, -33, -18, -97, -33, 15};
  // {10111111 01111010 11011111 11011111 00011110 11111111 11110111 10010111 11000111 11110111 11111111 11111111 11111111 11111111 11111111 11011111 111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-3, 94, -5, -5, 120, -1, -17, -23, -29, -17, -1, -1, -1, -1, -1, -5, 31};
  // {00000000 00000000 00100000 01000001 00000000 00000011 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 4, -126, 0, -64, 0, 0, 0, 0, 0, 8, 0, 0, 32, 0, 0};
  // {11111111 11101111 11101101 11111111 11111111 11111111 11111111 11111110 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -9, -73, -1, -1, -1, -1, 127, -1, -5, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 00000000 00100000 01100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 0, 0, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {11011110 11101011 11111111 11110111 11111111 11111110 11111111 11111111 11111111 11111101 11111011 11111111 11111011 11111111 11111111 11111011 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {123, -41, -1, -17, -1, 127, -1, -1, -1, -65, -33, -1, -33, -1, -1, -33, 15};
  // {11000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {3, 0, 0, 0};
  // {01110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {78, 0, 0, 0};
  // {11110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {79, 0, 0, 0};
  // {10101111 11111000 11001111 10110111 01001111 10111111 11111111 10111111 11110111 11111101 01110111 11101011 10111011 11111111 01111011 11111011 111101}
  public static final byte[] GRPSPLIT23 = new byte[] {-11, 31, -13, -19, -14, -3, -1, -3, -17, -65, -18, -41, -35, -1, -34, -33, 47};
  // {00010000 00000000 01000000 00000000 00111000 00000000 00000010 00000010 10000010 00001100 00000000 10000000 00000000 00110000 11101000 00000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {8, 0, 2, 0, 28, 0, 64, 64, 65, 48, 0, 1, 0, 12, 23, 0, 0};
  // {10111111 11111111 11111111 11111111 11111111 01111111 11111101 11111111 11111111 11111111 11010111 11111111 11101111 11011111 01111111 11111111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-3, -1, -1, -1, -1, -2, -65, -1, -1, -1, -21, -1, -9, -5, -2, -1, 15};
  // {10111111 11111110 10111111 11111111 11110111 11111111 11111101 01111111 10111101 11111011 11111110 01110101 01110111 11001111 00011111 01111111 1111}
  public static final byte[] GRPSPLIT26 = new byte[] {-3, 127, -3, -1, -17, -1, -65, -2, -67, -33, 127, -82, -18, -13, -8, -2, 15};
  // {11111100 11010111 11111111 11101111 10110110 11111111 11101101 10111111 10111111 11110111 10111111 11111101 11111110 11111111 11111111 11111111 11111}
  public static final byte[] GRPSPLIT27 = new byte[] {63, -21, -1, -9, 109, -1, -73, -3, -3, -17, -3, -65, 127, -1, -1, -1, 31};
}


class gbm_pojo_test_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_14_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3466.5f ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (data[4 /* TailNum */] <35.5f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(34, 2, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 34, 2, data[4])) ? 
                        -0.105745055f : 
                        0.15284249f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(130, 0, data[5]) || (GenModel.bitSetIsInRange(130, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 130, 0, data[5])) ? 
                        -0.052169308f : 
                        -0.0071923183f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.055809025f : 
                        -0.012663787f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.026285913f : 
                        0.014991863f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(34, 3467, data[4]) || (GenModel.bitSetIsInRange(34, 3467, data[4]) && !GenModel.bitSetContains(GRPSPLIT8, 34, 3467, data[4])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                        -0.036278352f : 
                        0.0031963119f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.07347636f : 
                        0.15080038f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.042989243f : 
                        0.0028294337f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.024144141f : 
                        0.05847272f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[1])) ? 
                        -0.15463029f : 
                        -0.07700166f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.041640967f : 
                        1.6411832E-4f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1821.0f ? 
                        -0.0033984357f : 
                        -0.13064103f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        0.065045856f : 
                        0.12847805f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[1])) ? 
                        -0.07552055f : 
                        -0.01264003f) : 
                     (data[3 /* FlightNum */] <755.0f ? 
                        -0.014205178f : 
                        0.0735444f)) : 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[2])) ? 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2067.0f ? 
                        -0.089937426f : 
                        0.011589536f) : 
                     (data[3 /* FlightNum */] <116.5f ? 
                        -0.0075919144f : 
                        0.050604355f)))));
    return pred;
  } // constant pool size = 448B, number of visited nodes = 31, static init size = 1932B
  // {10000000 00010000 00000010 01110000}
  public static final byte[] GRPSPLIT0 = new byte[] {1, 8, 64, 14};
  // {01000100 00100011 10010000 00000010 00000000 00010010 10000010 00100000 11000000 00000100 10001000 00000010 11011000 11000011 01100100 11100000 101000}
  public static final byte[] GRPSPLIT1 = new byte[] {34, -60, 9, 64, 0, 72, 65, 4, 3, 32, 17, 64, 27, -61, 38, 7, 5};
  // {...2 0-bits... 00000000 00000010 00011010 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 64, 88, 0, 0};
  // {00010010 00010100 10000000 01001000 00011110 00100000 01000000 00000000 00000001 10000000 00000000 01011000 00001100 10000000 00011110 00001000 00}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 40, 1, 18, 120, 4, 2, 0, -128, 1, 0, 26, 48, 1, 120, 16, 0};
  // {00000110 00000101 00010001 11000100 11100000 00010001 00000000 00100000 00000011 00001010 01000000 01110011 10101100 11000000 00000001 10101010 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {96, -96, -120, 35, 7, -120, 0, 4, -64, 80, 2, -50, 53, 3, -128, 85, 0};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {89, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-9, 3, 0, 0};
  // {00000001 01100001 11100110 11000001 01100001 00100010 00010110 00100010 11001010 00011100 00000001 00010011 11000001 10100001 11010001 00110000 0001}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, -122, 103, -125, -122, 68, 104, 68, 83, 56, -128, -56, -125, -123, -117, 12, 8};
  // {...3467 0-bits... }
  public static final byte[] GRPSPLIT8 = new byte[] {5, -112, 12, -112, 2};
  // {11111111 11111111 00001111 11011111 11111101 11111111 11010111 11011011 11111111 11111011 11111111 11111011 11100111 11111011 01111101 11111111 010111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -16, -5, -65, -1, -21, -37, -1, -33, -1, -33, -25, -33, -66, -1, 58};
  // {01111101 11111111 11111011 11111100}
  public static final byte[] GRPSPLIT10 = new byte[] {-66, -1, -33, 63};
  // {01010000 00000001 01111001 10110000 01000000 00100110 10101000 01000100 00010001 00101100 01000000 00000100 10011100 00001001 10000110 00000100 101000}
  public static final byte[] GRPSPLIT11 = new byte[] {10, -128, -98, 13, 2, 100, 21, 34, -120, 52, 2, 32, 57, -112, 97, 32, 5};
  // {11111111 11111111 10111111 01111111 10111111 11111111 11111111 11111111 11111101 11111111 11111110 11111101 11111111 11011111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -3, -2, -3, -1, -1, -1, -65, -1, 127, -65, -1, -5, -1, -1, 15};
  // {00000001 00000001 10000100 10000000 01000001 00000000 00000110 00100000 00001010 00000100 00000001 00000000 11000000 00100001 00010001 00100000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, -128, 33, 1, -126, 0, 96, 4, 80, 32, -128, 0, 3, -124, -120, 4, 0};
  // {00010010 00010000 11000100 10000101 01111111 00110000 01000001 00000110 10001011 01001111 00100000 11111001 11100011 01010010 11110101 00011010 0110}
  public static final byte[] GRPSPLIT14 = new byte[] {72, 8, 35, -95, -2, 12, -126, 96, -47, -14, 4, -97, -57, 74, -81, 88, 6};
  // {01010000 00101110 00000000 10010000 00010000 00100010 10100001 00000001 01000100 00010001 10000000 00010000 11000001 00010000 00000001 00000000 100010}
  public static final byte[] GRPSPLIT15 = new byte[] {10, 116, 0, 9, 8, 68, -123, -128, 34, -120, 1, 8, -125, 8, -128, 0, 17};
  // {11111111 11010111 11110111 11100111 11111111 11110111 11111111 11011111 11111111 11101111 10101111 11111111 11111111 11110111 11111111 11111010 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -21, -17, -25, -1, -17, -1, -5, -1, -9, -11, -1, -1, -17, -1, 95, 15};
  // {10010100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT17 = new byte[] {41, 0, 0, 0};
  // {11111111 11101110 11111111 10011011 01111111 11111011 11110111 10111001 01011111 00111111 11111011 11111111 11111111 11111010 10111111 11101111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 119, -1, -39, -2, -33, -17, -99, -6, -4, -33, -1, -1, 95, -3, -9, 63};
  // {11110111 11111101 11111111 11111111 11111111 11111101 11111101 00111110 11101011 11111111 11111111 11111111 11111111 11111111 11111101 11111111 1110}
  public static final byte[] GRPSPLIT19 = new byte[] {-17, -65, -1, -1, -1, -65, -65, 124, -41, -1, -1, -1, -1, -1, -65, -1, 7};
  // {10000000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 0, 0, 0};
  // {10101111 11111111 11010111 11100111 00111111 00011011 10011111 01010111 00111111 11111111 00110111 11101111 11111110 01101111 11011111 11111111 011101}
  public static final byte[] GRPSPLIT21 = new byte[] {-11, -1, -21, -25, -4, -40, -7, -22, -4, -1, -20, -9, 127, -10, -5, -1, 46};
  // {11111111 11111111 11111111 01111111 11111111 11011111 11111110 11111111 11111101 11111111 11011111 10111111 01111111 11111111 10011011 11111101 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -2, -1, -5, 127, -1, -65, -1, -5, -3, -2, -1, -39, -65, 15};
  // {10010010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {73, 0, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-9, 3, 0, 0};
}


class gbm_pojo_test_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_15_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[1])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (data[4 /* TailNum */] <34.5f ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 3, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 3, data[4])) ? 
                        -0.081715636f : 
                        0.16084975f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.030263476f : 
                        0.014556878f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.06543466f : 
                        -0.016523805f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.023221288f : 
                        0.020935351f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                 (data[4 /* TailNum */] <936.5f ? 
                    -0.021878174f : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.16171008f : 
                        -0.10153048f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.059510224f : 
                        0.009428304f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        0.007753568f : 
                        0.05492667f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                 (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                        -0.08062831f : 
                        -0.0107410485f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.0066438657f : 
                        0.036469664f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        -0.021843914f : 
                        0.04628562f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        0.03709592f : 
                        0.09845495f))) : 
             (data[3 /* FlightNum */] <102.5f ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(102, 1, data[3]) && !GenModel.bitSetContains(GRPSPLIT21, 102, 1, data[3])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        -0.12222341f : 
                        0.012278479f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        -0.05682083f : 
                        0.058354292f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(127, 5, data[5]) || (GenModel.bitSetIsInRange(127, 5, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 127, 5, data[5])) ? 
                        0.016204277f : 
                        0.06427642f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(127, 5, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 127, 5, data[5])) ? 
                        0.022921946f : 
                        0.08327107f)))));
    return pred;
  } // constant pool size = 498B, number of visited nodes = 30, static init size = 2256B
  // {11011000 00010000 00000010 01111010}
  public static final byte[] GRPSPLIT0 = new byte[] {27, 8, 64, 94};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT1 = new byte[] {24, 0, 0, 0};
  // {10010010 00000000 10000110 11001100 00110001 00100000 01000011 00000010 01001001 00000100 01000001 00010110 11001001 01000000 00000001 00110001 0010}
  public static final byte[] GRPSPLIT2 = new byte[] {73, 0, 97, 51, -116, 4, -62, 64, -110, 32, -126, 104, -109, 2, -128, -116, 4};
  // {...3 0-bits... 00000000 00000000 00110100 00001}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 44, 48};
  // {10000110 00110100 00100000 10000010 00000100 00100010 10001000 01000000 10100000 10000000 00000100 00000010 00000000 10110010 01000000 01000000 000010}
  public static final byte[] GRPSPLIT4 = new byte[] {97, 44, 4, 65, 32, 68, 17, 2, 5, 1, 32, 64, 0, 77, 2, 2, 16};
  // {01001101 11001110 11111111 10011111 11001011 11011111 10110111 00010101 01111101 11110111 11010001 11111101 10011101 11001101 11011111 01110100 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-78, 115, -1, -7, -45, -5, -19, -88, -66, -17, -117, -65, -71, -77, -5, 46, 63};
  // {00100110 01100100 00000000 10000100}
  public static final byte[] GRPSPLIT6 = new byte[] {100, 38, 0, 33};
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {119, 3, 0, 0};
  // {01101111 11111101 11111111 11110111 11101111 11101110 11111110 11111111 11011111 11111110 10011111 11111011 11111111 11100111 11111110 11111010 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-10, -65, -1, -17, -9, 119, 127, -1, -5, 127, -7, -33, -1, -25, 127, 95, 15};
  // {00000101 10001001 10100000 00000100}
  public static final byte[] GRPSPLIT9 = new byte[] {-96, -111, 5, 32};
  // {11111111 11111011 11011111 00110101 01101011 11111010 11101101 10111001 11111111 11111101 01110010 11001111 11011100 11101011 11011010 11111111 101010}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -33, -5, -84, -42, 95, -73, -99, -1, -65, 78, -13, 59, -41, 91, -1, 21};
  // {00000100 00101001 10000100 00000100}
  public static final byte[] GRPSPLIT11 = new byte[] {32, -108, 33, 32};
  // {00000010 01100000 11010100 10000001 00000001 10000000 01000010 00100010 11001011 00010000 10001100 00000000 11000100 10000010 00111110 00110000 0001}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 6, 43, -127, -128, 1, 66, 68, -45, 8, 49, 0, 35, 65, 124, 12, 8};
  // {00000110 00000000 10000100 00100001 11110111 10010100 01000101 00100110 10011011 11001101 00100000 11111001 11110111 01010010 11110101 00101010 0001}
  public static final byte[] GRPSPLIT13 = new byte[] {96, 0, 33, -124, -17, 41, -94, 100, -39, -77, 4, -97, -17, 74, -81, 84, 8};
  // {01000000 00011010 10001010 00010000 00010100 00100110 10100001 00000001 01100110 00110001 11000000 01010000 11000000 00010010 00000001 10100100 101010}
  public static final byte[] GRPSPLIT14 = new byte[] {2, 88, 81, 8, 40, 100, -123, -128, 102, -116, 3, 10, 3, 72, -128, 37, 21};
  // {11101010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {87, 2, 0, 0};
  // {10111111 11110011 11111111 11110111 11111111 11110101 11111111 11111111 11011111 11001111 00111001 11111011 11111111 11110111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-3, -49, -1, -17, -1, -81, -1, -1, -5, -13, -100, -33, -1, -17, -1, -2, 15};
  // {01000000 00100110 00000000 00000000 00001000 00000010 00000000 00000000 00000000 00000000 00001001 00000000 00001000 00100001 00000010 10000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {2, 100, 0, 0, 16, 64, 0, 0, 0, 0, -112, 0, 16, -124, 64, 1, 0};
  // {01000000 00000101 00110000 01000010 00000000 00000001 10000000 00000000 01000000 00000000 00001010 00000010 00001000 10100000 00001000 10000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {2, -96, 12, 66, 0, -128, 1, 0, 2, 0, 80, 64, 16, 5, 16, 1, 0};
  // {00000000 00000000 00001010 00010000 00000100 00000000 10000001 00000000 00000110 00100000 01000000 00000000 00000000 00000010 00000001 10000100 001000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 80, 8, 32, 0, -127, 0, 96, 4, 2, 0, 0, 64, -128, 33, 4};
  // {11111111 11111111 11111111 11101111 11111011 11111101 11111110 11111110 11011011 11111111 00111111 10111111 11111111 11111101 11111110 11011111 010101}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -9, -33, -65, 127, 127, -37, -1, -4, -3, -1, -65, 127, -5, 42};
  // {...1 0-bits... 11011111 11111111 11111110 10111110 10110000 11100111 10110011 11001010 10101001 01000001 00110011 11000111 11101}
  public static final byte[] GRPSPLIT21 = new byte[] {-5, -1, 127, 125, 13, -25, -51, 83, -107, -126, -52, -29, 23};
  // {00001000 00100010 01110000 00000000 00000000 01000010 00000000 00000000 00000000 00000010 00000000 00000000 00000000 10000000 10000000 01010000 000000}
  public static final byte[] GRPSPLIT22 = new byte[] {16, 68, 14, 0, 0, 66, 0, 0, 0, 64, 0, 0, 0, 1, 1, 10, 0};
  // {01111111 11111111 11111111 11110111 11111111 11111101 01111111 11111011 11111111 11111011 11111111 01011111 10111111 11101111 11111011 11111111 111111}
  public static final byte[] GRPSPLIT23 = new byte[] {-2, -1, -1, -17, -1, -65, -2, -33, -1, -33, -1, -6, -3, -9, -33, -1, 63};
  // {10101001 00000010 10010001 10000000 00000000 00001000 10001001 00000011 10000101 01010100 00000000 00101010 11100000 00100110 01011110 01100001 001101}
  public static final byte[] GRPSPLIT24 = new byte[] {-107, 64, -119, 1, 0, 16, -111, -64, -95, 42, 0, 84, 7, 100, 122, -122, 44};
  // {...5 0-bits... 11000000 00010000 00000000 00000000 10100010 10001000 10000000 00010000 00001000 00000000 00000010 00001100 01101000 00010000 00100101 00}
  public static final byte[] GRPSPLIT25 = new byte[] {3, 8, 0, 0, 69, 17, 1, 8, 16, 0, 64, 48, 22, 8, -92, 64};
  // {...5 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11011110 11111111 11111001 11110011 00110111 11100111 11111110 11}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -1, -1, -1, -1, -1, -5, -1, 123, -1, -97, -49, -20, -25, 127, 127};
}


class gbm_pojo_test_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_16_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3497.5f ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.09344936f : 
                        -0.03177686f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.036458887f : 
                        -0.0042875586f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                     (data[4 /* TailNum */] <396.5f ? 
                        0.0654051f : 
                        -0.036451768f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[2])) ? 
                        -0.02310491f : 
                        0.010853242f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(3, 3498, data[4]) || (GenModel.bitSetIsInRange(3, 3498, data[4]) && !GenModel.bitSetContains(GRPSPLIT9, 3, 3498, data[4])) ? 
                        -0.02661442f : 
                        0.14807706f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        -0.02457155f : 
                        0.042615253f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.017067218f : 
                        0.018332528f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.022919437f : 
                        0.06530524f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.15457737f : 
                        -0.06678271f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.10403378f : 
                        0.062399466f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.08072114f : 
                        7.141865E-4f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        0.015518921f : 
                        0.10668617f))) : 
             (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.10715209f : 
                        0.06549731f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.11631712f : 
                        0.08338755f)) : 
                 (data[4 /* TailNum */] <1719.5f ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.023253478f : 
                        0.05672892f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.030410085f : 
                        0.08247127f)))));
    return pred;
  } // constant pool size = 471B, number of visited nodes = 31, static init size = 2070B
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 64, 2};
  // {01111110 00110101 00011101 11101110 11101111 10101101 11000101 00111101 10101001 01010011 10000001 01110110 01101101 11010110 00010111 10111111 0011}
  public static final byte[] GRPSPLIT1 = new byte[] {126, -84, -72, 119, -9, -75, -93, -68, -107, -54, -127, 110, -74, 107, -24, -3, 12};
  // {00000111 01001100 01010000 01000001 00100100 01000000 10000111 01000000 00000101 00000101 00000000 00100100 01011000 00000000 00100001 00110100 000010}
  public static final byte[] GRPSPLIT2 = new byte[] {-32, 50, 10, -126, 36, 2, -31, 2, -96, -96, 0, 36, 26, 0, -124, 44, 16};
  // {11010110 01110110 00000011 11110010}
  public static final byte[] GRPSPLIT3 = new byte[] {107, 110, -64, 79};
  // {01011101 00111100 10110000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-70, 60, 13, 0};
  // {01101101 01111111 00110111 00110011 11011011 11111011 01011111 10011001 01110110 10111101 00111101 11000111 10111001 11010011 11111110 11000101 111001}
  public static final byte[] GRPSPLIT5 = new byte[] {-74, -2, -20, -52, -37, -33, -6, -103, 110, -67, -68, -29, -99, -53, 127, -93, 39};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-9, 3, 0, 0};
  // {00011101 01011011 11110110 11110011 11110111 01110110 10110110 10010011 11011110 00111100 00000111 11011011 11100011 10111011 11011001 01111000 1101}
  public static final byte[] GRPSPLIT7 = new byte[] {-72, -38, 111, -49, -17, 110, 109, -55, 123, 60, -32, -37, -57, -35, -101, 30, 11};
  // {01110010 01000001 00000000 00001010}
  public static final byte[] GRPSPLIT8 = new byte[] {78, -126, 0, 80};
  // {...3498 0-bits... }
  public static final byte[] GRPSPLIT9 = new byte[] {5};
  // {11001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {83, 0, 0, 0};
  // {01010010 01100000 01011001 10110000 01100000 00000010 10110000 01000000 00011001 00101100 11000001 00000100 10111100 00011000 10001010 00100000 001000}
  public static final byte[] GRPSPLIT11 = new byte[] {74, 6, -102, 13, 6, 64, 13, 2, -104, 52, -125, 32, 61, 24, 81, 4, 4};
  // {00111101 11000010 00100000 00000110}
  public static final byte[] GRPSPLIT12 = new byte[] {-68, 67, 4, 96};
  // {00000001 01000000 00000100 10000000 00000001 00000000 10000000 00000000 00001010 00000100 00000001 00000001 11000001 00000001 00010001 00100000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, 2, 32, 1, -128, 0, 1, 0, 80, 32, -128, -128, -125, -128, -120, 4, 0};
  // {11011100 11100001 11001101 01010110 01111111 11111000 10110111 11110110 11011111 01011101 01001011 11101111 11111011 01110111 11111001 11111011 1011}
  public static final byte[] GRPSPLIT14 = new byte[] {59, -121, -77, 106, -2, 31, -19, 111, -5, -70, -46, -9, -33, -18, -97, -33, 13};
  // {10111110 01111010 10001111 11001111 00011110 11111011 11110111 10010011 11000110 11110111 11111111 11111011 11111111 11111111 11111110 11011111 111111}
  public static final byte[] GRPSPLIT15 = new byte[] {125, 94, -15, -13, 120, -33, -17, -55, 99, -17, -1, -33, -1, -1, 127, -5, 63};
  // {00000000 00000000 00000000 00000001 00000000 00000111 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000100 00000000 0100}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, -128, 0, -32, 0, 0, 0, 0, 0, 0, 32, 0, 32, 0, 2};
  // {00000001 00000000 00010000 00010000 10000000 00000100 00001000 00000100 00010001 00001000 00000000 00000100 00000000 00000000 00000001 00000000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {-128, 0, 8, 8, 1, 32, 16, 32, -120, 16, 0, 32, 0, 0, -128, 0, 0};
  // {01100110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {102, 0, 0, 0};
  // {11011110 11101011 11111111 11010111 11111111 11111100 11111111 11111111 11111111 11111101 11111011 11111111 11111011 11111111 11111111 11111011 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {123, -41, -1, -21, -1, 63, -1, -1, -1, -65, -33, -1, -33, -1, -1, -33, 15};
  // {01000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {66, 0, 0, 0};
  // {00000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {64, 0, 0, 0};
  // {11110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT22 = new byte[] {79, 0, 0, 0};
  // {10101111 11111000 11101111 10111111 01001111 10111111 11111111 10111111 11110111 11110101 01110111 11101011 10101011 11111111 01111011 11111011 111101}
  public static final byte[] GRPSPLIT23 = new byte[] {-11, 31, -9, -3, -14, -3, -1, -3, -17, -81, -18, -41, -43, -1, -34, -33, 47};
  // {00010000 10000001 00000000 00000000 00110000 00000000 00000110 00000010 10000000 00000100 00000000 10000000 00000000 00110000 10100000 00000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {8, -127, 0, 0, 12, 0, 96, 64, 1, 32, 0, 1, 0, 12, 5, 0, 0};
  // {10111111 11111111 11111111 11111111 11111111 01111111 11111101 11111111 11111111 11111111 11110111 11111111 11111111 11011111 01111111 11111111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-3, -1, -1, -1, -1, -2, -65, -1, -1, -1, -17, -1, -1, -5, -2, -1, 15};
  // {11111111 10111111 11011111 11011110 11111111 11011111 01111011 11111011 11110111 11111111 01110011 11110011 11111011 11110111 11011100 11101111 111111}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -3, -5, 123, -1, -5, -34, -33, -17, -1, -50, -49, -33, -17, 59, -9, 63};
  // {11111100 11010111 11111111 11101111 11110110 11111101 11101101 10111111 10111111 11110111 00111111 11111101 10111110 11111111 10111111 11111111 111110}
  public static final byte[] GRPSPLIT27 = new byte[] {63, -21, -1, -9, 111, -65, -73, -3, -3, -17, -4, -65, 125, -1, -3, -1, 31};
}


class gbm_pojo_test_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_17_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT3, 96, 0, data[3])) ? 
                        -0.19417185f : 
                        -0.11207754f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT4, 96, 0, data[3])) ? 
                        -0.11918157f : 
                        -0.039638903f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.07278786f : 
                        -0.013221054f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                        0.1004773f : 
                        0.2063295f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        -0.12731248f : 
                        -0.029532673f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.027615001f : 
                        0.09351457f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 96, 0, data[3])) ? 
                        -0.13141887f : 
                        0.030327484f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT14, 96, 0, data[3])) ? 
                        0.042979196f : 
                        0.10688454f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.058694165f : 
                        -0.020433728f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.022154965f : 
                        0.009596876f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.06808794f : 
                        0.07959296f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.013017761f : 
                        0.050709546f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        -0.039926317f : 
                        -0.001592916f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.027009029f : 
                        0.03445517f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT28, 132, 0, data[5])) ? 
                        -0.007882324f : 
                        0.061367363f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT29, 132, 0, data[5])) ? 
                        0.016209783f : 
                        0.0514879f)))));
    return pred;
  } // constant pool size = 537B, number of visited nodes = 31, static init size = 2466B
  // {11111111 10011111 01000011 11010111 01011000 00100001 10001011 00100100 01010100 10000000 00110000 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -7, -62, -21, 26, -124, -47, 36, 42, 1, 12, 2};
  // {01111111 11011011 01111111 11110110 10111010 11111111 11111111 10111111 01110011 11111010 01111111 11001011 10101011 11110111 01111001 11111111 110011}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -37, -2, 111, 93, -1, -1, -3, -50, 95, -2, -45, -43, -17, -98, -1, 51};
  // {11101011 11001011 01001110 11101010}
  public static final byte[] GRPSPLIT2 = new byte[] {-41, -45, 114, 87};
  // {11111111 10111111 11100011 11110111 01111110 01110011 10101111 11111111 11111111 10111111 11111111 01101110}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -3, -57, -17, 126, -50, -11, -1, -1, -3, -1, 118};
  // {11111111 11011111 01011111 11110111 01111110 01111111 10111111 11110100 01111111 10110001 11111111 11101111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -5, -6, -17, 126, -2, -3, 47, -2, -115, -1, -9};
  // {00000000 00010100 00000000 10000000 00000000 00000000 10000001 01000101 00000001 01001000 00001001 10000000 00100010 00100000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 40, 0, 1, 0, 0, -127, -94, -128, 18, -112, 1, 68, 4, 0, 0, 0};
  // {01001110 10010010 10101001 10011100}
  public static final byte[] GRPSPLIT6 = new byte[] {114, 73, -107, 57};
  // {00000000 00010000 00000000 10000000 00000000 00000000 00000000 01000001 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 8, 0, 1, 0, 0, 0, -126, 0, 0, 16, 0, 0, 0, 0, 0, 0};
  // {01110001 01111011 00101110 11100010}
  public static final byte[] GRPSPLIT8 = new byte[] {-114, -34, 116, 71};
  // {00000000 00000000 00100000 00000000 00000000 10000000 00000000 00000000 00000000 00001000 00000000 00000010 10000000 00100000 10000000 10000010 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 4, 0, 0, 1, 0, 0, 0, 16, 0, 64, 1, 4, 1, 65, 0};
  // {11111111 11111111 11111111 11111111 11111011 11111111 11111111 11111111 11110111 11111111 11111011 11111011 10111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -1, -1, -33, -1, -1, -1, -17, -1, -33, -33, -3, -1, -1, -1, 63};
  // {11111101 11111011 11111110 11110110}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -33, 127, 111};
  // {01111111 10111010 10111111 01111101 11111111 11111111 11111111 11111101 11111101 11110111 11111111 11111111 11011111 01111111 10111110 11110111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, 93, -3, -66, -1, -1, -1, -65, -65, -17, -1, -1, -5, -2, 125, -17, 15};
  // {10110111 11111111 11111111 11111100 11111111 11111111 11110101 11011111 10111111 11111111 11101111 11111111}
  public static final byte[] GRPSPLIT13 = new byte[] {-19, -1, -1, 63, -1, -1, -81, -5, -3, -1, -9, -1};
  // {11101111 11111111 11111100 01111101 11110111 11111111 11111111 11111111 11101011 01111111 11001111 11111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, -1, 63, -66, -17, -1, -1, -1, -41, -2, -13, -1};
  // {10011110 01101001 11010110 01000111 01111111 00110100 01000111 10110110 11011011 01011100 00001011 11011011 11100111 11010010 11110111 00111010 0001}
  public static final byte[] GRPSPLIT15 = new byte[] {121, -106, 107, -30, -2, 44, -30, 109, -37, 58, -48, -37, -25, 75, -17, 92, 8};
  // {01001000 00001000 00001010 00000001 00000000 00000000 10000001 01000001 00000110 00100011 11000001 01010010 10000000 10100011 00000011 00100100 101110}
  public static final byte[] GRPSPLIT16 = new byte[] {18, 16, 80, -128, 0, 0, -127, -126, 96, -60, -125, 74, 1, -59, -64, 36, 29};
  // {00011000 11111100 00000010 01111100}
  public static final byte[] GRPSPLIT17 = new byte[] {24, 63, 64, 62};
  // {01101101 11011111 00101111 00011111 01111011 11111101 11010011 11111111 01111111 10111111 11111111 11111011 11111111 10111011 01111111 00110101 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-74, -5, -12, -8, -34, -65, -53, -1, -2, -3, -1, -33, -1, -35, -2, -84, 63};
  // {01000000 00010100 00001001 10100000 10000000 00000010 00000000 00000000 00000000 10100001 00010000 00100100 00011000 00100101 00000000 00000001 0100}
  public static final byte[] GRPSPLIT19 = new byte[] {2, 40, -112, 5, 1, 64, 0, 0, 0, -123, 8, 36, 24, -92, 0, -128, 2};
  // {11111101 01110111 00001111 10111110}
  public static final byte[] GRPSPLIT20 = new byte[] {-65, -18, -16, 125};
  // {00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000010 00000000 00000000 001010}
  public static final byte[] GRPSPLIT21 = new byte[] {0, 0, 16, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 64, 0, 0, 20};
  // {11111110 11101111 11111110 11111111 11111111 11111110 11111111 11111110 11111011 11111111 11111011 11111111 11111111 11111110 11111111 11111111 0011}
  public static final byte[] GRPSPLIT22 = new byte[] {127, -9, 127, -1, -1, 127, -1, 127, -33, -1, -33, -1, -1, 127, -1, -1, 12};
  // {11010101 00010101 10000010 01111110}
  public static final byte[] GRPSPLIT23 = new byte[] {-85, -88, 65, 126};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT24 = new byte[] {24, 0, 0, 0};
  // {11011110 10011001 10111111 10001111 11001100 11010011 10111111 01001101 10111110 11111111 11010011 10100101 01011110 01011101 10111111 01101010 111110}
  public static final byte[] GRPSPLIT25 = new byte[] {123, -103, -3, -15, 51, -53, -3, -78, 125, -1, -53, -91, 122, -70, -3, 86, 31};
  // {11111111 11111010 10011111 10111101 01101111 11111011 01111101 00111001 10111111 11111101 00110011 11111111 11011110 11101101 01011010 10111011 000110}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, 95, -7, -67, -10, -33, -66, -100, -3, -65, -52, -1, 123, -73, 90, -35, 24};
  // {11100101 10101111 11011111 10011111 01111111 01100110 10110101 00101010 01111111 11110100 01000011 01101100 11111010 00010111 01011111 11101010 011101}
  public static final byte[] GRPSPLIT27 = new byte[] {-89, -11, -5, -7, -2, 102, -83, 84, -2, 47, -62, 54, 95, -24, -6, 87, 46};
  // {10000000 01000000 00000010 00000000 00110011 00010000 01000100 00000000 10010000 01000100 00000000 00001001 01100010 00010000 10000000 00011000 0001}
  public static final byte[] GRPSPLIT28 = new byte[] {1, 2, 64, 0, -52, 8, 34, 0, 9, 34, 0, -112, 70, 8, 1, 24, 8};
  // {00000110 00100000 11000000 00000000 00000110 00010100 00000001 00000010 01001010 01001100 00001010 00010001 11000010 01000000 00100111 00101000 0000}
  public static final byte[] GRPSPLIT29 = new byte[] {96, 4, 3, 0, 96, 40, -128, 64, 82, 50, 80, -120, 67, 2, -28, 20, 0};
}


class gbm_pojo_test_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_18_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.14250757f : 
                        -0.09001397f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.08014231f : 
                        -0.038151965f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.06220408f : 
                        -0.013557154f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.022343494f : 
                        0.048950925f))) : 
             (data[3 /* FlightNum */] <1369.5f ? 
                 (data[4 /* TailNum */] <2144.0f ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(133, 0, data[6]) || (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 133, 0, data[6])) ? 
                        -0.050646003f : 
                        0.11602908f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 133, 0, data[6])) ? 
                        -0.056405973f : 
                        0.01656542f)) : 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT11, 1012, 1370, data[3])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 1012, 1370, data[3])) ? 
                        -0.10774265f : 
                        -0.025141083f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(1012, 1370, data[3]) || (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 1012, 1370, data[3])) ? 
                        0.039772153f : 
                        0.11204098f)))) : 
         (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1798.5f ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.032382954f : 
                        0.002734092f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        0.02061519f : 
                        0.09523849f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.027853092f : 
                        0.034349915f) : 
                     (data[3 /* FlightNum */] <398.0f ? 
                        0.010575849f : 
                        0.05080668f))) : 
             (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT20, 640, 1799, data[3])) ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT21, 640, 1799, data[3])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT22, 640, 1799, data[3])) ? 
                        -0.20794399f : 
                        -0.10060293f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.04325213f : 
                        0.0068297414f)) : 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT24, 640, 1799, data[3])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        0.013215569f : 
                        0.058371298f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT26, 640, 1799, data[3])) ? 
                        0.10102591f : 
                        0.20361607f)))));
    return pred;
  } // constant pool size = 1127B, number of visited nodes = 31, static init size = 6006B
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {119, 3, 0, 0};
  // {10111110 10110101 10011111 11111110 01010111 01101110 11111111 11111101 11011110 11111001 11011101 11011100 11011011 11011111 11011111 01111101 1011}
  public static final byte[] GRPSPLIT1 = new byte[] {125, -83, -7, 127, -22, 118, -1, -65, 123, -97, -69, 59, -37, -5, -5, -66, 13};
  // {01011000 10011111 00101110 10110010}
  public static final byte[] GRPSPLIT2 = new byte[] {26, -7, 116, 77};
  // {11111111 10111111 10111111 11111111 01011111 11111110 11111111 11111111 11011110 11111001 11111111 11011101 11011011 11111111 11111111 01111101 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -3, -3, -1, -6, 127, -1, -1, 123, -97, -1, -69, -37, -1, -1, -66, 15};
  // {01011010 10011111 11111111 11111110}
  public static final byte[] GRPSPLIT4 = new byte[] {90, -7, -1, 127};
  // {01111100 11011111 10111110 11111110}
  public static final byte[] GRPSPLIT5 = new byte[] {62, -5, 125, 127};
  // {01000000 01000000 01100000 00000001 00100000 00000001 00000000 00000000 00000000 00000010 00000000 00000000 00100100 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {2, 2, 6, -128, 4, -128, 0, 0, 0, 64, 0, 0, 36, 0, 0, 0, 0};
  // {01001000 00010000 00000000 00110000}
  public static final byte[] GRPSPLIT7 = new byte[] {18, 8, 0, 12};
  // {00000000 00001110 00001010 10000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 112, 80, 1};
  // {00000000 00100000 00000000 01000000 00000000 00000000 00000000 00000000 00001000 00000010 00001100 00000000 00000000 00000000 00000000 00010000 00000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 4, 0, 2, 0, 0, 0, 0, 16, 64, 48, 0, 0, 0, 0, 8, 0};
  // {11111101 11111100 01111111 11110111 11101111 11011111 11111111 11111011 11110111 11110101 11111111 11011111 11111111 11110111 01111000 11111111 11100}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 63, -2, -17, -9, -5, -1, -33, -17, -81, -1, -5, -1, -17, 30, -1, 7};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT11 = new byte[] {-5, -1, -1, 124, 123, -1, -1, -21, -35, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -1, -1, -1, -1, 87, -67, -47, -63, 19, -11, 52, -15, -1, -1, -9, 125, 58, 113, -35, 71, -97, -13, -67, 79, 110, -3, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -33, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -5, 15};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, 124, -1, -1, -1, -17, -35, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -53, -69, -9, -1, -1, -1, -1, -1, -3, -70, 125, -33, 111, -97, -1, -1, 95, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, 15};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT13 = new byte[] {8, 5, 0, 0, 0, 0, -64, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 64, -96, 1, 0, 0, 4, 0, 0, 0, 0, 0, 80, 24, 1, -119, 4, -128, 0, 16, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {00001100 00101101 11010110 11100100 11110101 10011101 10000111 10111010 11111111 11101100 01000111 11111011 11100111 10011100 11010101 10111010 0111}
  public static final byte[] GRPSPLIT14 = new byte[] {48, -76, 107, 39, -81, -71, -31, 93, -1, 55, -30, -33, -25, 57, -85, 93, 14};
  // {11101111 11011110 11001111 11011110 10111111 11111100 11111011 11111101 01100111 10111011 11111111 01111111 10100010 11110111 00111111 11101011 110001}
  public static final byte[] GRPSPLIT15 = new byte[] {-9, 123, -13, 123, -3, 63, -33, -65, -26, -35, -1, -2, 69, -17, -4, -41, 35};
  // {10001111 10100011 00000111 11101110}
  public static final byte[] GRPSPLIT16 = new byte[] {-15, -59, -32, 119};
  // {01101000 00100001 10001100 01101110}
  public static final byte[] GRPSPLIT17 = new byte[] {22, -124, 49, 118};
  // {01011100 11101011 11011011 11111011 00101110 01111011 11101101 01010101 10101111 10111101 11001000 11110111 10111111 01101101 10110110 01110100 001111}
  public static final byte[] GRPSPLIT18 = new byte[] {58, -41, -37, -33, 116, -34, -73, -86, -11, -67, 19, -17, -3, -74, 109, 46, 60};
  // {00000101 10000011 00100010 00100010}
  public static final byte[] GRPSPLIT19 = new byte[] {-96, -63, 68, 68};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT20 = new byte[] {106, 112, 91, 5, 12, 85, -118, 80, 2, 72, 69, 108, -61, 2, 90, 82, 75, -7, -25, -13, 9, -106, -119, -7, -49, -4, -79, -75, 100, 57, -126, 51, -30, 86, 64, 52, 76, 48, -113, 37, 69, -42, -118, -72, 120, 101, 70, 54, 97, 12, -120, 32, -128, -111, 5, 16, 72, 107, -36, -10, -96, 74, -84, 25, 13, 126, -50, -67, 63, 108, -59, -105, 79, 65, 118, -19, 59, -73, 27, 123};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT21 = new byte[] {106, -10, -5, -49, -35, -1, -1, -5, -13, 111, -1, 108, -45, -41, -37, -5, -1, -5, -17, -5, 29, -65, -113, -3, -33, -3, -65, -11, 125, -5, -17, 63, -25, -34, -21, -10, -36, -1, -97, -3, 85, -42, -117, -2, -4, -1, 79, 127, -21, -49, -33, -1, -40, -33, -65, 122, -21, -1, -35, -1, -22, 90, -2, 27, -83, -2, -18, -1, -65, -2, -49, -1, -33, -35, 127, -1, 59, -9, -69, -1};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT22 = new byte[] {110, -9, -5, -1, -1, -1, -1, -1, -1, -1, -1, -4, -33, -1, -33, -1, -1, -5, -17, -5, -1, -1, -113, -3, -33, -3, -1, -3, -1, -1, -1, -1, -25, -2, -1, -10, -3, -1, -33, -1, 117, -34, -5, -1, -1, -1, -1, 127, -1, -17, -1, -1, -5, -1, -1, -1, -5, -1, -1, -1, -17, 95, -2, -101, -83, -1, -18, -1, -65, -2, -1, -1, -33, -33, -1, -1, -1, -9, -69, -1};
  // {10010100 01010000 10000000 00000011 00001010 00000010 00100011 01000100 00000011 01000100 01101000 10010010 01000010 10100000 00100000 00000000 0011}
  public static final byte[] GRPSPLIT23 = new byte[] {41, 10, 1, -64, 80, 64, -60, 34, -64, 34, 22, 73, 66, 5, 4, 0, 12};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT24 = new byte[] {-65, -1, -17, -6, -1, -66, 117, -65, -3, -73, -5, -1, 62, -3, -17, -17, -10, 94, -33, -3, -10, -1, 127, -42, 51, 79, -1, -17, -65, -1, -3, -33, 125, -17, -1, -17, -65, -33, -14, -33, -6, 127, -1, -1, -105, -70, -69, -19, -1, -9, 127, -1, 127, 126, -6, -1, -1, -9, 63, -101, -1, -65, -1, -10, -9, -31, 125, -22, -3, -5, -5, 127, -77, -65, -119, -102, -49, 120, -2, -65};
  // {11010010 11011100 11000010 01011100}
  public static final byte[] GRPSPLIT25 = new byte[] {75, 59, 67, 58};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT26 = new byte[] {0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 65, 32, 2, 0, 8, 0, 0, 0, 66, 16, 0, 0, 8, -112, 2, 4, 16, 32, 0, 0, -128, 16, 64, 0, 0, 32, 0, 16, -126, 5, 64, 4, -126, 48, 0, 0, 2, 32, 0, 0, 8, 0, 0, 16, 0, 0, 0, 32, 16, 18, 32, 8, 0, 16, 0, 32, 72, 32, 1, 64, 0, 0, 0, 0, 0, 0, 9, 0, 8, 48};
}


class gbm_pojo_test_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_19_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3497.5f ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
                 (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[1])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.05753959f : 
                        -0.009054761f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.0122042885f : 
                        0.16383778f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.056655325f : 
                        -0.011935984f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[2])) ? 
                        -0.016365118f : 
                        0.012651821f))) : 
             (data[3 /* FlightNum */] <452.5f ? 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(451, 2, data[3]) || (GenModel.bitSetIsInRange(451, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT8, 451, 2, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.06970184f : 
                        -0.004294444f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.022717226f : 
                        0.09412818f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.0020687499f : 
                        0.054954126f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                        -0.0021056193f : 
                        0.06759623f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.21280342f : 
                        -0.09736166f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.16301909f : 
                        -0.010583573f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[1])) ? 
                        -0.03856995f : 
                        0.019783199f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        -0.059285495f : 
                        0.07198894f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                -0.12659018f : 
                 (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        -0.08629298f : 
                        0.03906937f) : 
                     (data[4 /* TailNum */] <1470.5f ? 
                        0.032041103f : 
                        0.07155505f)))));
    return pred;
  } // constant pool size = 487B, number of visited nodes = 28, static init size = 2238B
  // {00000000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 64, 2};
  // {01001110 00010101 00010001 11101110 01101110 10100101 11000001 00100001 00000001 01000010 00000000 01111010 00001100 11010000 00010111 00101010 1000}
  public static final byte[] GRPSPLIT1 = new byte[] {114, -88, -120, 119, 118, -91, -125, -124, -128, 66, 0, 94, 48, 11, -24, 84, 1};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {89, 0, 0, 0};
  // {01001111 01000100 00110000 01000001 00010100 00000000 10000111 00000010 11010100 01000001 11000000 10111000 11010000 00000001 01001001 01100000 101110}
  public static final byte[] GRPSPLIT3 = new byte[] {-14, 34, 12, -126, 40, 0, -31, 64, 43, -126, 3, 29, 11, -128, -110, 6, 29};
  // {01000000 00100000 10000000 00000001 00000000 01000000 00000000 00100000 10000000 00000000 10000000 00110000 10000000 10100000 00001000 00000000 001100}
  public static final byte[] GRPSPLIT4 = new byte[] {2, 4, 1, -128, 0, 2, 0, 4, 1, 0, 1, 12, 1, 5, 16, 0, 12};
  // {01100101 11111111 00110111 00110011 11011011 11111011 01011111 10011001 01110110 10111101 00111001 11000111 00111001 01010111 11110110 11010101 111001}
  public static final byte[] GRPSPLIT5 = new byte[] {-90, -1, -20, -52, -37, -33, -6, -103, 110, -67, -100, -29, -100, -22, 111, -85, 39};
  // {10101010 10111101 10000111 11111100}
  public static final byte[] GRPSPLIT6 = new byte[] {85, -67, -31, 63};
  // {01101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {-10, 3, 0, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT8 = new byte[] {1, 0, 8, 52, 4, 0, 0, 10, 72, 0, 2, -128, 64, 40, 0, -128, 0, 0, 2, 0, 32, 0, 0, 17, 1, 0, 8, 0, 0, 0, 3, -128, 1, 0, 4, 0, 0, 0, 0, 24, 0, 0, 64, 0, 19, 2, 1, 13, 100, 25, -121, 43, -116, 22, -48, 4, 1};
  // {10110011 11000010 00000001 00101110}
  public static final byte[] GRPSPLIT9 = new byte[] {-51, 67, -128, 116};
  // {00110001 10000001 00000000 10000010}
  public static final byte[] GRPSPLIT10 = new byte[] {-116, -127, 0, 65};
  // {00000001 11000001 10100100 00000101 00001001 00100000 10000000 00000000 00001010 00000100 00001001 00010000 11010001 10100011 10010001 00100000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, -125, 37, -96, -112, 4, 1, 0, 80, 32, -112, 8, -117, -59, -119, 4, 0};
  // {00010000 00010000 00001000 10010000 00100000 00000110 10100000 01000000 00000000 00100100 11000000 10000000 10000000 00010000 00001001 00000100 001000}
  public static final byte[] GRPSPLIT12 = new byte[] {8, 8, 16, 9, 4, 96, 5, 2, 0, 36, 3, 1, 1, 8, -112, 32, 4};
  // {11101101 11111111 11111111 10101111 11011011 01011111 10111111 01001101 11111111 11111011 11111111 11111111 11011110 11101111 11111111 11111011 101111}
  public static final byte[] GRPSPLIT13 = new byte[] {-73, -1, -1, -11, -37, -6, -3, -78, -1, -33, -1, -1, 123, -9, -1, -33, 61};
  // {11011100 10100001 11001101 00010110 01111111 11111000 10110111 11010110 11011111 01011101 01001000 11101111 11110011 00100111 11111001 11111001 1011}
  public static final byte[] GRPSPLIT14 = new byte[] {59, -123, -77, 104, -2, 31, -19, 107, -5, -70, 18, -9, -49, -28, -97, -97, 13};
  // {00000000 00111000 00011110 11000001 00000000 00100000 00000001 00000110 10000001 00100001 00000000 10000010 00011110 00010110 10000000 00000100 101000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 28, 120, -125, 0, 4, -128, 96, -127, -124, 0, 65, 120, 104, 1, 32, 5};
  // {00000000 00001000 00110000 01000001 00000000 00000111 00000000 00100000 00000000 00000000 00100111 00000000 00001100 10011000 00000100 00000000 0100}
  public static final byte[] GRPSPLIT16 = new byte[] {0, 16, 12, -126, 0, -32, 0, 4, 0, 0, -28, 0, 48, 25, 32, 0, 2};
  // {10111111 11111011 10111111 11111111 11111111 11111101 11111111 11110111 11110111 11111011 11111111 11111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-3, -33, -3, -1, -1, -65, -1, -17, -17, -33, -1, -1, -1, -1, -1, -1, 63};
  // {11111111 11111110 11011111 11111111 11111111 11111111 11111111 10111111 11011111 11110111 11111111 11111111 11111111 11111111 11111110 11011111 111111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 127, -5, -1, -1, -1, -1, -3, -5, -17, -1, -1, -1, -1, 127, -5, 63};
  // {00000010 00000000 00000010 10000000 10000000 00000000 00000000 00000000 00000000 10000000 00100011 00000000 00000000 01010000 00000000 00000010 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {64, 0, 64, 1, 1, 0, 0, 0, 0, 1, -60, 0, 0, 10, 0, 64, 0};
  // {01100010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT20 = new byte[] {70, 0, 0, 0};
  // {11110110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {111, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11110111 10111111 11101101 11111111 10111111 11111101 11110111 11111111 11111111 11111111 11011111 11111111 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -1, -1, -17, -3, -73, -1, -3, -65, -17, -1, -1, -1, -5, -1, 63};
  // {11110010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT23 = new byte[] {79, 0, 0, 0};
  // {10101111 11111000 11101111 10111111 01101111 11111111 11111111 10111111 11111111 11111111 11111111 11101011 11111011 11111111 01111011 11111011 111101}
  public static final byte[] GRPSPLIT24 = new byte[] {-11, 31, -9, -3, -10, -1, -1, -3, -1, -1, -1, -41, -33, -1, -34, -33, 47};
}


class gbm_pojo_test_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_20_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.1611443f : 
                        -0.1308009f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.15036058f : 
                        -0.023661096f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                    -0.06119076f : 
                    0.15028861f)) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        -0.11175649f : 
                        0.12743011f) : 
                    0.20327666f) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        0.13867562f : 
                        0.1566139f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        0.15811092f : 
                        0.18571432f)))) : 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
             (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.038637836f : 
                        0.051015f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        -0.04097891f : 
                        -0.0049427785f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.090800375f : 
                        2.0537982E-4f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        -0.0153949065f : 
                        0.0430423f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.014630849f : 
                        0.0071315547f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        -0.04714039f : 
                        0.025315825f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2700.5f ? 
                        0.044739112f : 
                        -0.03709424f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        0.046351213f : 
                        0.11610186f)))));
    return pred;
  } // constant pool size = 491B, number of visited nodes = 28, static init size = 2262B
  // {00000000 10000100 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 113, 3};
  // {10001100 00000000 00110000 10100000}
  public static final byte[] GRPSPLIT1 = new byte[] {49, 0, 12, 5};
  // {00010000 01000000 00001110 00011000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 2, 112, 24};
  // {00000000 00000000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000100 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 32, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0};
  // {11111111 11111111 11011111 10110111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -5, -19, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 00000110 10000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 96, 1};
  // {11111111 00111111 10011100 01111100}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -4, 57, 62};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111101 11111111 111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -41, -1, -65, -1, 63};
  // {10000000 00100001 00000000 00010001 00000000 00100000 00000010 01000000 00010000 00000000 10000000 00000000 00010000 10010110 01100000 00000000 000100}
  public static final byte[] GRPSPLIT9 = new byte[] {1, -124, 0, -120, 0, 4, 64, 2, 8, 0, 1, 0, 8, 105, 6, 0, 8};
  // {11111101 11111110 11111111 01111111 01101111 01111111 10111111 11111001 10111111 01111111 11111110 10111101 01011111 11001111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 127, -1, -2, -10, -2, -3, -97, -3, -2, 127, -67, -6, -13, -1, -1, 15};
  // {00000001 01000100 00000000 00000000 00000000 00000010 00000000 00000000 01000000 00001000 00000000 00000000 10000000 10000000 00000010 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {-128, 34, 0, 0, 0, 64, 0, 0, 2, 16, 0, 0, 1, 1, 64, 0, 0};
  // {11011000 01010000 00000010 01111110}
  public static final byte[] GRPSPLIT12 = new byte[] {27, 10, 64, 126};
  // {00011000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT13 = new byte[] {24, 0, 0, 0};
  // {10011110 00111001 00110111 11011111 01111101 10101111 11110111 11011111 01011101 10110110 11000001 01111111 11001101 01100100 11000011 00110001 1010}
  public static final byte[] GRPSPLIT14 = new byte[] {121, -100, -20, -5, -66, -11, -17, -5, -70, 109, -125, -2, -77, 38, -61, -116, 5};
  // {00000000 00000100 00000000 00000000 00010000 00000000 00000000 01100000 10000000 00000000 00000100 00000000 10000000 10000000 00000010 00000000 000010}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 32, 0, 0, 8, 0, 0, 6, 1, 0, 32, 0, 1, 1, 64, 0, 16};
  // {01011110 11001110 01101111 10110111 11101110 11110011 10111111 00011101 11111101 11111111 11010111 11010101 01011110 11011011 11101111 01000000 111101}
  public static final byte[] GRPSPLIT16 = new byte[] {122, 115, -10, -19, 119, -49, -3, -72, -65, -1, -21, -85, 122, -37, -9, 2, 47};
  // {01000010 01100000 11010110 01000101 00101001 00000000 01010010 01100110 11001010 00011010 10001100 01000010 10100100 10000010 01011110 00110010 0011}
  public static final byte[] GRPSPLIT17 = new byte[] {66, 6, 107, -94, -108, 0, 74, 102, 83, 88, 49, 66, 37, 65, 122, 76, 12};
  // {11111101 01111111 10111111 01100111 11101111 11111111 01011111 10011011 01011110 01111011 10110011 11101111 11111110 11111001 01111011 11111011 111011}
  public static final byte[] GRPSPLIT18 = new byte[] {-65, -2, -3, -26, -9, -1, -6, -39, 122, -34, -51, -9, 127, -97, -34, -33, 55};
  // {11111111 10111000 11011111 10111101 00111011 11111111 11100101 01111101 11111111 11111101 01010011 11111011 11011111 01101111 11111010 10111110 101110}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, 29, -5, -67, -36, -1, -89, -66, -1, -65, -54, -33, -5, -10, 95, 125, 29};
  // {00000110 00000000 10001100 00100000 00000111 10000000 01000100 00100010 10001001 01000001 00100000 10010000 00100011 00000000 00000001 00101000 0001}
  public static final byte[] GRPSPLIT20 = new byte[] {96, 0, 49, 4, -32, 1, 34, 68, -111, -126, 4, 9, -60, 0, -128, 20, 8};
  // {01101000 00101010 01011010 11000000 00001100 11001110 11101001 00100011 00100110 00110001 00101000 00101010 10110000 00000110 00011111 11100001 011100}
  public static final byte[] GRPSPLIT21 = new byte[] {22, 84, 90, 3, 48, 115, -105, -60, 100, -116, 20, 84, 13, 96, -8, -121, 14};
  // {01101000 01000101 01010010 01000111 11110000 00000100 00001011 10000100 00010110 10001100 00010000 00000001 00000000 00010011 11001110 00000010 0100}
  public static final byte[] GRPSPLIT22 = new byte[] {22, -94, 74, -30, 15, 32, -48, 33, 104, 49, 8, -128, 0, -56, 115, 64, 2};
  // {11110111 00101110 10111101 11111110 11010111 10111101 11110111 01111111 11011011 11101111 11111011 11111111 11111111 11111111 11110101 11111111 1011}
  public static final byte[] GRPSPLIT23 = new byte[] {-17, 116, -67, 127, -21, -67, -17, -2, -37, -9, -33, -1, -1, -1, -81, -1, 13};
  // {11111111 11111101 10101111 10101111 11001111 11111111 11110111 11011111 11100111 11111111 11101111 01111001 11111111 01110110 10111110 11111111 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -65, -11, -11, -13, -1, -17, -5, -25, -1, -9, -98, -1, 110, 125, -1, 63};
  // {00010001 00000000 10000001 00000001 00000001 00100000 00000000 00000001 00000001 00011100 10000000 00010000 01000000 00100100 00000100 01000100 100000}
  public static final byte[] GRPSPLIT25 = new byte[] {-120, 0, -127, -128, -128, 4, 0, -128, -128, 56, 1, 8, 2, 36, 32, 34, 1};
}


class gbm_pojo_test_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_21_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT2, 96, 0, data[3])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.16182463f : 
                        -0.07967568f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.07995261f : 
                        -0.022257108f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                        -0.118173555f : 
                        -0.02871969f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT7, 96, 0, data[3])) ? 
                        -0.06960075f : 
                        0.091252826f))) : 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT10, 96, 0, data[3])) ? 
                        -0.09536733f : 
                        -0.00882177f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        -0.03234919f : 
                        0.09443225f)) : 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 96, 0, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.0046384432f : 
                        0.07939198f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.019157698f : 
                        0.17106602f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
             (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.04653821f : 
                        -0.015893815f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        0.028538667f : 
                        0.14226219f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.08148528f : 
                        -0.013139839f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        0.009603975f : 
                        0.10184545f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.040226337f : 
                        0.05361162f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[1])) ? 
                        -0.01089962f : 
                        0.014633968f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT28, 132, 0, data[5])) ? 
                        -6.9590076E-4f : 
                        0.035212476f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT29, 132, 0, data[5])) ? 
                        -0.046801675f : 
                        0.036210455f)))));
    return pred;
  } // constant pool size = 485B, number of visited nodes = 31, static init size = 2154B
  // {11111111 10011111 01000011 11010111 01011000 00100001 10001011 00100100 01110100 10000000 00110010 01000010}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -7, -62, -21, 26, -124, -47, 36, 46, 1, 76, 66};
  // {00000011 00001011 00110000 01100000 00000000 00100010 10000100 00000010 00010001 00000010 00000000 10000000 10001000 10110001 00001001 11110000 000010}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, -48, 12, 6, 0, 68, 33, 64, -120, 64, 0, 1, 17, -115, -112, 15, 16};
  // {11111111 10011111 01011111 11110111 01111010 01101111 10111111 11111111 01111111 10010001 11111111 11111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -7, -6, -17, 94, -10, -3, -1, -2, -119, -1, -1};
  // {01101010 10111011 11000110 11000010}
  public static final byte[] GRPSPLIT3 = new byte[] {86, -35, 99, 67};
  // {11001000 10000010 00001010 10001010}
  public static final byte[] GRPSPLIT4 = new byte[] {19, 65, 80, 81};
  // {10101010 00010000 00101111 11111000}
  public static final byte[] GRPSPLIT5 = new byte[] {85, 8, -12, 31};
  // {11111111 11111100 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11111110 11111111 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, 63, -1, -5, -1, -1, -1, -1, -1, -65, -1, -1, -1, -1, 127, -1, 63};
  // {11111111 11011111 11101111 11011111 11111111 01110111 11111111 11111111 11111111 11101111 11111111 11111011}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -5, -9, -5, -1, -18, -1, -1, -1, -9, -1, -33};
  // {11111111 11011111 11111111 11111111 10001011 10111101 11101111 10111011 11100111 11111011 10111011 01111011 10111011 01110110 00111111 11111111 110011}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -5, -1, -1, -47, -67, -9, -35, -25, -33, -35, -34, -35, 110, -4, -1, 51};
  // {11000001 00101011 00101010 10100010}
  public static final byte[] GRPSPLIT9 = new byte[] {-125, -44, 84, 69};
  // {00000000 00000000 00000010 00000110 00000000 00100000 00000000 00100100 00110100 00000000 00100010 00000010}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 64, 96, 0, 4, 0, 36, 44, 0, 68, 64};
  // {11111111 11111110 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11110111 11111111 11111101 11111111 11111111 11011111 11110101 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 127, -1, -1, -3, -1, -1, -1, -1, -17, -1, -65, -1, -1, -5, -81, 15};
  // {11100100 10011000 00000000 10000000 00000000 00100001 10001000 00100000 01100000 00000000 00000010 01000000}
  public static final byte[] GRPSPLIT12 = new byte[] {39, 25, 0, 1, 0, -124, 17, 4, 6, 0, 64, 2};
  // {01010110 01011000 00100111 11001010}
  public static final byte[] GRPSPLIT13 = new byte[] {106, 26, -28, 83};
  // {11111111 10111011 11111100 11111110}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -35, 63, 127};
  // {10011110 01101001 11010110 11000111 01111111 10110100 01000111 10110110 11011011 01011100 00001111 11011011 11100111 11010010 11110011 00111010 1001}
  public static final byte[] GRPSPLIT15 = new byte[] {121, -106, 107, -29, -2, 45, -30, 109, -37, 58, -16, -37, -25, 75, -49, 92, 9};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {89, 0, 0, 0};
  // {01001000 00101100 00100000 11000000 10010000 00100000 10000001 01000001 10100100 10001001 00000000 01000000 10000000 10100000 10000001 00100000 100010}
  public static final byte[] GRPSPLIT17 = new byte[] {18, 52, 4, 3, 9, 4, -127, -126, 37, -111, 0, 2, 1, 5, -127, 4, 17};
  // {01001100 00011010 01011110 11101110}
  public static final byte[] GRPSPLIT18 = new byte[] {50, 88, 122, 119};
  // {01001111 01100101 10101000 10000100}
  public static final byte[] GRPSPLIT19 = new byte[] {-14, -90, 21, 33};
  // {10011000 11010101 00001111 01010100}
  public static final byte[] GRPSPLIT20 = new byte[] {25, -85, -16, 42};
  // {11111111 11111110 10011111 11111111 00111111 11011111 11110111 10011111 11101110 01110111 11111011 11111111 11111110 11111111 11111111 11011111 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, 127, -7, -1, -4, -5, -17, -7, 119, -18, -33, -1, 127, -1, -1, -5, 63};
  // {00000000 00100000 11000000 00010001 00000000 00100000 00000000 00100000 10000001 00000000 10000000 00111010 11000001 10101010 00000100 00100000 001110}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 4, 3, -120, 0, 4, 0, 4, -127, 0, 1, 92, -125, 85, 32, 4, 28};
  // {11000101 01110100 10000010 01111110}
  public static final byte[] GRPSPLIT23 = new byte[] {-93, 46, 65, 126};
  // {11011110 00011001 00111111 00011111 01101100 11110011 11111101 00100101 10111110 11111111 11010001 10110111 01011100 01101011 11001111 01100101 001110}
  public static final byte[] GRPSPLIT24 = new byte[] {123, -104, -4, -8, 54, -49, -65, -92, 125, -1, -117, -19, 58, -42, -13, -90, 28};
  // {00000010 01000000 00000110 00000000 00101000 00000000 00000000 00000000 00000001 00000100 00000000 00000000 00000001 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {64, 2, 96, 0, 20, 0, 0, 0, -128, 32, 0, 0, -128, 0, 8, 0, 0};
  // {00111100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {60, 0, 0, 0};
  // {11100000 11100111 11011011 10000000 00010001 00001110 10100011 00000000 00010101 01110100 01100010 00101000 11110010 00000111 01011110 01100000 011100}
  public static final byte[] GRPSPLIT27 = new byte[] {7, -25, -37, 1, -120, 112, -59, 0, -88, 46, 70, 20, 79, -32, 122, 6, 14};
  // {00010010 01000001 00000000 00000001 00101101 10110100 01000000 00000000 10000000 01001100 00000000 00010001 00100011 00000000 00000000 00001000 0001}
  public static final byte[] GRPSPLIT28 = new byte[] {72, -126, 0, -128, -76, 45, 2, 0, 1, 50, 0, -120, -60, 0, 0, 16, 8};
  // {11111101 10111111 11111111 11111110 11011111 11111111 11111111 11111111 11111111 11101111 11111110 11111111 11011111 11111111 01111101 11111111 0111}
  public static final byte[] GRPSPLIT29 = new byte[] {-65, -3, -1, 127, -5, -1, -1, -1, -1, -9, 127, -1, -5, -1, -66, -1, 14};
}


class gbm_pojo_test_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_22_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.15768479f : 
                        -0.1198696f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.14313751f : 
                        -0.025173254f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                    -0.056617696f : 
                    0.13542187f)) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        -0.1043704f : 
                        0.12417379f) : 
                    0.18637453f) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        0.1324613f : 
                        0.14667842f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        0.15011321f : 
                        0.17223567f)))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3341.5f ? 
             (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[2])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        -0.15063782f : 
                        -0.052163076f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.03361835f : 
                        -0.0022816914f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.022411047f : 
                        0.00546167f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        0.03903413f : 
                        0.12483193f))) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT19, 159, 3342, data[4])) ? 
                 (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT20, 159, 3342, data[4])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        -0.20598747f : 
                        -0.05590634f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.010283927f : 
                        0.016227197f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT24, 159, 3342, data[4])) ? 
                        -0.0257664f : 
                        0.1372224f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT25, 159, 3342, data[4])) ? 
                        0.14857769f : 
                        0.21523608f)))));
    return pred;
  } // constant pool size = 464B, number of visited nodes = 28, static init size = 2100B
  // {00000000 10000100 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 113, 3};
  // {10001100 00000000 00110000 10100000}
  public static final byte[] GRPSPLIT1 = new byte[] {49, 0, 12, 5};
  // {00010000 01000000 01001110 00011000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 2, 114, 24};
  // {00010010 01101000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {72, 22, 0, 0};
  // {00000000 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0};
  // {11111111 11111111 11011111 10110111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -5, -19, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 00000110 10000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 96, 1};
  // {11111111 00111111 10011100 01111100}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -4, 57, 62};
  // {11111111 11111011 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -33, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -41, -1, -1, -1, 63};
  // {10000000 00100001 00000000 00010000 00000000 00100000 00000010 01000000 00010000 00000000 10000000 00000000 00010000 00010110 01100000 00000000 000100}
  public static final byte[] GRPSPLIT9 = new byte[] {1, -124, 0, 8, 0, 4, 64, 2, 8, 0, 1, 0, 8, 104, 6, 0, 8};
  // {11111101 11111110 11111111 01111111 01101111 11111111 00111111 11111001 10111111 01111111 11111110 10111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 127, -1, -2, -10, -1, -4, -97, -3, -2, 127, -3, -5, -1, -1, -1, 15};
  // {00000000 00000100 00000000 00000000 00000000 00000010 00000000 00000000 01000000 00001000 00000000 00000000 10000000 10000000 00000010 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 32, 0, 0, 0, 64, 0, 0, 2, 16, 0, 0, 1, 1, 64, 0, 0};
  // {01100010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {70, 2, 0, 0};
  // {00111110 01110001 01111111 11111111 11111101 10101101 11111101 11111101 10111101 11111001 11001011 11111111 11111101 11010110 11111111 00111111 1011}
  public static final byte[] GRPSPLIT13 = new byte[] {124, -114, -2, -1, -65, -75, -65, -65, -67, -97, -45, -1, -65, 107, -1, -4, 13};
  // {11111111 11111110 11111111 11111111 11111111 11111101 11111111 11111011 11110111 11111111 11111111 01111111 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 127, -1, -1, -1, -65, -1, -33, -17, -1, -1, -2, -1, -1, -1, -1, 63};
  // {01101100 00111011 11000111 01100111 00011110 11111011 11110101 10110011 01100110 11110111 01011111 10000111 11111001 11000011 01111111 11110001 111101}
  public static final byte[] GRPSPLIT15 = new byte[] {54, -36, -29, -26, 120, -33, -81, -51, 102, -17, -6, -31, -97, -61, -2, -113, 47};
  // {00000010 00000010 00000000 00000000 01001010 00010000 00000001 00000110 00000001 01001000 00101000 00101001 00101010 00100000 10100100 10000010 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {64, 64, 0, 0, 82, 8, -128, 96, -128, 18, 20, -108, 84, 4, 37, 65, 0};
  // {11111001 11110100 10111110 10010000}
  public static final byte[] GRPSPLIT17 = new byte[] {-97, 47, 125, 9};
  // {01000001 10000001 00000001 01010110}
  public static final byte[] GRPSPLIT18 = new byte[] {-126, -127, -128, 106};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT19 = new byte[] {-69, 5, 90, 29, -122, 52, -40, 76, 5, 44, -114, 74, 0, -64, 64, -24, 0, -110, 36, 80};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT20 = new byte[] {-65, -65, -1, -97, -17, 127, -7, 126, -11, -19, -1, -33, -65, -36, 73, -20, 45, -66, -65, 123};
  // {00001000 00000100 00000000 01011000}
  public static final byte[] GRPSPLIT21 = new byte[] {16, 32, 0, 26};
  // {00010001 01000001 11100110 11000001 11010001 00100110 10010110 00000010 11001010 00011100 00000101 01010011 11100011 00100010 11000000 00011000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {-120, -126, 103, -125, -117, 100, 105, 64, 83, 56, -96, -54, -57, 68, 3, 24, 0};
  // {01000011 00000000 00100000 00000100 01001000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00011100 00000001 01000000 10000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {-62, 0, 4, 32, 18, 0, 0, 0, 0, 0, -128, 0, 56, -128, 2, 1, 0};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT24 = new byte[] {119, -1, -1, -1, -3, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT25 = new byte[] {-102, 0, 64, 20, -126, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class gbm_pojo_test_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_23_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.09145734f : 
                        -0.04058469f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                        -0.025923824f : 
                        0.021264087f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                    -0.06833551f : 
                     (data[4 /* TailNum */] <1145.5f ? 
                        -0.0290143f : 
                        0.1199433f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.10636072f : 
                        -0.03267991f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.01787517f : 
                        0.08501558f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.03012787f : 
                        0.012575526f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        -0.0034578035f : 
                        0.031562295f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.042149596f : 
                        0.0053668865f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.02390597f : 
                        0.0069620986f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.078349814f : 
                        0.011205561f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                        -0.0100101335f : 
                        0.054495398f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        -0.07368848f : 
                        -0.019276282f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        0.004682329f : 
                        0.048343956f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        -0.004786895f : 
                        0.037892256f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT28, 132, 0, data[5])) ? 
                        0.031815015f : 
                        0.07159102f)))));
    return pred;
  } // constant pool size = 527B, number of visited nodes = 30, static init size = 2430B
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {89, 0, 0, 0};
  // {10111111 01100101 00011111 11100111 01110111 10110111 11001110 00011111 00001011 01000000 01000101 01001110 11000110 01000000 11000001 00111011 1111}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, -90, -8, -25, -18, -19, 115, -8, -48, 2, -94, 114, 99, 2, -125, -36, 15};
  // {00001110 00001100 00000000 10000000 00010100 00100000 00010000 01000000 10000100 00010000 00000100 00000000 10000000 10000000 00000000 00100000 001000}
  public static final byte[] GRPSPLIT2 = new byte[] {112, 48, 0, 1, 40, 4, 8, 2, 33, 8, 32, 0, 1, 1, 0, 4, 4};
  // {01001100 01111010 00011000 01101010}
  public static final byte[] GRPSPLIT3 = new byte[] {50, 94, 24, 86};
  // {11111110 11111100 01001111 10111111 01111110 11111111 01110111 11111111 10111111 11110111 11010111 00101111 11111110 10010101 01111001 11111011 011111}
  public static final byte[] GRPSPLIT4 = new byte[] {127, 63, -14, -3, 126, -1, -18, -1, -3, -17, -21, -12, 127, -87, -98, -33, 62};
  // {00000000 00000001 00100000 00010000 01000001 00000000 10000000 00000000 00010001 00001000 01000000 00000000 01000101 00000001 00001001 00010100 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, -128, 4, 8, -126, 0, 1, 0, -120, 16, 2, 0, -94, -128, -112, 40, 0};
  // {01111101 01111101 11111101 10101110}
  public static final byte[] GRPSPLIT6 = new byte[] {-66, -66, -65, 117};
  // {01000101 00101101 00111111 00000011 11110111 00011011 11111111 00000101 01111100 10111111 11001011 11010100 10111100 01111011 10011111 01110101 110001}
  public static final byte[] GRPSPLIT7 = new byte[] {-94, -76, -4, -64, -17, -40, -1, -96, 62, -3, -45, 43, 61, -34, -7, -82, 35};
  // {01111001 01110001 11100011 11100010}
  public static final byte[] GRPSPLIT8 = new byte[] {-98, -114, -57, 71};
  // {11111111 10111110 11111110 00111010 11111111 01111111 11111111 11111101 11111101 11111111 11111111 11111111 01111011 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 125, 127, 92, -1, -2, -1, -65, -65, -1, -1, -1, -34, -1, -1, -1, 15};
  // {00000010 00000000 00000100 01000000 00000010 00000010 00001000 00000100 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000001 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {64, 0, 32, 2, 64, 64, 16, 32, 0, 2, 0, 0, 0, 0, 0, -128, 0};
  // {01110000 10111010 10100010 11110010}
  public static final byte[] GRPSPLIT11 = new byte[] {14, 93, 69, 79};
  // {11111111 11011110 11011111 11111111 11001111 11111110 11111111 11111011 11010111 11110001 10111111 11101011 11101011 11001101 11111011 11111010 111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 123, -5, -1, -13, 127, -1, -33, -21, -113, -3, -41, -41, -77, -33, 95, 63};
  // {11100110 11011110 11111111 10011111 11011001 11011101 11110111 11111000 11110111 11111111 10111010 10111011 11111101 10111111 01111111 11010101 1010}
  public static final byte[] GRPSPLIT13 = new byte[] {103, 123, -1, -7, -101, -69, -17, 31, -17, -1, 93, -35, -65, -3, -2, -85, 5};
  // {01001110 01010000 11000100 00010010 10101111 00101000 11100011 11110110 11011101 11011101 10001000 11010001 11100111 10110110 10111111 01111010 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {114, 10, 35, 72, -11, 20, -57, 111, -69, -69, 17, -117, -25, 109, -3, 94, 0};
  // {01000000 00010010 10111010 01010001 01000000 01100010 10101000 00001000 11000011 00100001 00000000 10101011 10000000 10110000 11011000 10000100 101000}
  public static final byte[] GRPSPLIT15 = new byte[] {2, 72, 93, -118, 2, 70, 21, 16, -61, -124, 0, -43, 1, 13, 27, 33, 5};
  // {11111101 01001101 10010110 01111110}
  public static final byte[] GRPSPLIT16 = new byte[] {-65, -78, 105, 126};
  // {00010000 10100000 00100011 00000100 00000000 00000100 00011000 00000000 00000010 00100010 00000101 00101100 00011000 01000000 00000000 00000001 0110}
  public static final byte[] GRPSPLIT17 = new byte[] {8, 5, -60, 32, 0, 32, 24, 0, 64, 68, -96, 52, 24, 2, 0, -128, 6};
  // {00010000 10100001 00000000 10000000 00000100 00000100 00000000 00100000 00001000 00001000 00000000 01000100 01011000 00000110 00000011 00110000 000100}
  public static final byte[] GRPSPLIT18 = new byte[] {8, -123, 0, 1, 32, 32, 0, 4, 16, 16, 0, 34, 26, 96, -64, 12, 8};
  // {10011011 11110111 01010011 01011110}
  public static final byte[] GRPSPLIT19 = new byte[] {-39, -17, -54, 122};
  // {11111111 11111111 11001101 10111111 11111111 11111101 11111111 11111111 11011101 11111111 11111111 11011111 11110111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -77, -3, -1, -65, -1, -1, -69, -1, -1, -5, -17, -1, -1, -1, 15};
  // {11101111 11111111 11111101 11111111 10111111 10111111 11111111 11111110 11011101 11111111 11111100 11111111 11110111 10111110 11111111 11111111 0010}
  public static final byte[] GRPSPLIT21 = new byte[] {-9, -1, -65, -1, -3, -3, -1, 127, -69, -1, 63, -1, -17, 125, -1, -1, 4};
  // {10100010 11000101 00100110 01011000}
  public static final byte[] GRPSPLIT22 = new byte[] {69, -93, 100, 26};
  // {11001111 11101011 01011111 11111101 01111101 11111111 11100111 00111101 11111111 11110101 11010111 11101111 01011111 11101110 01111111 11101010 101101}
  public static final byte[] GRPSPLIT23 = new byte[] {-13, -41, -6, -65, -66, -1, -25, -68, -1, -81, -21, -9, -6, 119, -2, 87, 45};
  // {01010101 00010000 00010000 10000000}
  public static final byte[] GRPSPLIT24 = new byte[] {-86, 8, 8, 1};
  // {00000110 00010000 10000100 00000000 00000101 00000000 00000000 00100000 01001000 00010001 10000000 10010000 01100100 00000000 00001101 00100000 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {96, 8, 33, 0, -96, 0, 0, 4, 18, -120, 1, 9, 38, 0, -80, 4, 0};
  // {10111000 00001001 10000000 00010000 01001100 00000010 00000101 11100111 10011101 01000100 00100000 00110010 11100100 00101011 11000100 01000001 011110}
  public static final byte[] GRPSPLIT26 = new byte[] {29, -112, 1, 8, 50, 64, -96, -25, -71, 34, 4, 76, 39, -44, 35, -126, 30};
  // {11111111 11101111 10111111 11111111 01111011 11111111 11111110 00011111 10110111 11101010 11111111 00101111 01011001 11011111 01111011 11111101 1111}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, -9, -3, -1, -34, -1, 127, -8, -19, 87, -1, -12, -102, -5, -34, -65, 15};
  // {11111101 10111111 11111011 11111111 01110111 11111111 11111111 11111001 11111110 11110111 11111111 01101110 10011011 01101111 01011101 11111101 1111}
  public static final byte[] GRPSPLIT28 = new byte[] {-65, -3, -33, -1, -18, -1, -1, -97, 127, -17, -1, 118, -39, -10, -70, -65, 15};
}


class gbm_pojo_test_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_24_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.16701704f : 
                        -0.12837198f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.13843387f : 
                        -0.018043363f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                    -0.051830035f : 
                    0.12221992f)) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                    -0.015570402f : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        0.11723958f : 
                        0.15042691f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        0.122786485f : 
                        0.13940045f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                        0.14355546f : 
                        0.16645466f)))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3341.5f ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                        -0.073718175f : 
                        -0.02342854f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                        -0.02438263f : 
                        0.004759559f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.025925951f : 
                        0.007660959f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        0.0029165947f : 
                        0.043752905f))) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT19, 159, 3342, data[4])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        -0.06950604f : 
                        9.5189305E-4f) : 
                     (data[3 /* FlightNum */] <454.5f ? 
                        -0.011079141f : 
                        0.017261578f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT23, 159, 3342, data[4])) ? 
                        -0.021512944f : 
                        0.13049294f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT24, 159, 3342, data[4])) ? 
                        0.14456724f : 
                        0.20473485f)))));
    return pred;
  } // constant pool size = 469B, number of visited nodes = 28, static init size = 2130B
  // {00000000 10000100 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 113, 3};
  // {10001100 00000000 00110000 10100000}
  public static final byte[] GRPSPLIT1 = new byte[] {49, 0, 12, 5};
  // {00010000 01000000 00001110 00011000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, 2, 112, 24};
  // {01111011 11101111 11011111 11100000}
  public static final byte[] GRPSPLIT3 = new byte[] {-34, -9, -5, 7};
  // {00000000 00000000 00000000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 0, 0};
  // {11111111 11111111 11011111 10110111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -5, -19, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {00000000 00000000 10000110 10000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 97, 1};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -2, 15};
  // {00000000 00000000 00100000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00010000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0};
  // {10000000 00100001 00000000 00010000 00000000 00100000 00000010 01000000 00010000 00000000 10000000 00000000 00010000 00010110 00100000 00000000 000100}
  public static final byte[] GRPSPLIT9 = new byte[] {1, -124, 0, 8, 0, 4, 64, 2, 8, 0, 1, 0, 8, 104, 4, 0, 8};
  // {11111101 11111110 11111111 11111111 01110111 11111111 10111111 11111001 10111111 01111111 11111110 10111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 127, -1, -1, -18, -1, -3, -97, -3, -2, 127, -3, -5, -1, -1, -1, 15};
  // {00000000 00000100 00000000 00000000 00000000 00000010 00000000 00000000 01000000 00001000 00000000 00000000 10000000 10000000 00000010 00000000 0000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, 32, 0, 0, 0, 64, 0, 0, 2, 16, 0, 0, 1, 1, 64, 0, 0};
  // {01000000 00111100 00000010 00110000}
  public static final byte[] GRPSPLIT12 = new byte[] {2, 60, 64, 12};
  // {00000110 10000000 10000000 00000011 00010000 00110010 10100100 00000010 11010000 00000111 11001010 00100110 11011000 10000011 01000110 11010000 101100}
  public static final byte[] GRPSPLIT13 = new byte[] {96, 1, 1, -64, 8, 76, 37, 64, 11, -32, 83, 100, 27, -63, 98, 11, 13};
  // {00111110 01110101 11101100 11111111 11001111 11101101 11111111 11111001 10111111 01010011 10101110 11110110 01101011 00110111 10111010 11111111 1111}
  public static final byte[] GRPSPLIT14 = new byte[] {124, -82, 55, -1, -13, -73, -1, -97, -3, -54, 117, 111, -42, -20, 93, -1, 15};
  // {11101110 00101100 00011111 11111110 01111101 00011001 11110111 10111101 10111101 01110011 11010011 00110111 11111101 11011110 10001111 10110111 0011}
  public static final byte[] GRPSPLIT15 = new byte[] {119, 52, -8, 127, -66, -104, -17, -67, -67, -50, -53, -20, -65, 123, -15, -19, 12};
  // {00000000 00010011 01100011 10000001 00101110 00110000 01000001 00000110 00000001 01101000 00101000 11111010 00000110 00000000 00100111 00101010 0100}
  public static final byte[] GRPSPLIT16 = new byte[] {0, -56, -58, -127, 116, 12, -126, 96, -128, 22, 20, 95, 96, 0, -28, 84, 2};
  // {01110101 11111110 11111111 11011011 01001111 11111101 11111011 10111001 01101111 10110011 10111111 11000011 01101011 11111111 11110000 10111011 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {-82, 127, -1, -37, -14, -65, -33, -99, -10, -51, -3, -61, -42, -1, 15, -35, 63};
  // {10011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {121, 0, 0, 0};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT19 = new byte[] {-69, 5, 90, 29, -122, 52, -40, 76, 5, 44, -114, 74, 1, -64, 64, -24, 0, -110, 36, 80};
  // {10011101 11111011 11110111 11110011 11111111 11110110 10111110 11110111 11011111 11111111 11111111 11011111 11100011 00111011 11110111 01111011 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-71, -33, -17, -49, -1, 111, 125, -17, -5, -1, -1, -5, -57, -36, -17, -34, 15};
  // {01110010 01000010 00000000 11011110}
  public static final byte[] GRPSPLIT21 = new byte[] {78, 66, 0, 123};
  // {01000011 00000000 00100000 00000000 01001000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00011100 00000001 01000000 10000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {-62, 0, 4, 0, 18, 0, 0, 0, 0, 0, -128, 0, 56, -128, 2, 1, 0};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT23 = new byte[] {119, -1, -1, -1, -3, -1, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT24 = new byte[] {-118, 0, 64, 16, 2, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
}


class gbm_pojo_test_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_25_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[2])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.11157756f : 
                        2.6660276E-4f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.06734279f : 
                        -0.028093295f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        -0.06819281f : 
                        0.08876814f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        0.0038143022f : 
                        0.052684866f))) : 
             (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1369.5f ? 
                 (data[4 /* TailNum */] <1406.5f ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(119, 6, data[5]) || (GenModel.bitSetIsInRange(119, 6, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 119, 6, data[5])) ? 
                        -0.062898785f : 
                        -0.0026192751f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(133, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 133, 0, data[6])) ? 
                        -0.063040994f : 
                        0.004066795f)) : 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT11, 1012, 1370, data[3])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 1012, 1370, data[3])) ? 
                        -0.08806951f : 
                        -0.013217546f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(1012, 1370, data[3]) || (GenModel.bitSetIsInRange(1012, 1370, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 1012, 1370, data[3])) ? 
                        0.03820882f : 
                        0.100065224f)))) : 
         (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1798.5f ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.009535091f : 
                        0.0155790765f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.019471183f : 
                        0.037599094f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.039770015f : 
                        0.070976f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        0.056784436f : 
                        0.10022497f))) : 
             (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT21, 640, 1799, data[3])) ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT22, 640, 1799, data[3])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT23, 640, 1799, data[3])) ? 
                        -0.18162885f : 
                        -0.07315591f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.05504471f : 
                        -0.0073722433f)) : 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT25, 640, 1799, data[3])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        0.013715632f : 
                        0.05980167f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[0])) ? 
                        0.098990515f : 
                        0.16990827f)))));
    return pred;
  } // constant pool size = 1093B, number of visited nodes = 31, static init size = 5802B
  // {11101110 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {119, 3, 0, 0};
  // {10111110 10110101 10011111 11111111 01011111 01101111 11111111 11111101 11011110 11111011 11011101 11011100 11011011 11011111 11111111 01111101 1011}
  public static final byte[] GRPSPLIT1 = new byte[] {125, -83, -7, -1, -6, -10, -1, -65, 123, -33, -69, 59, -37, -5, -1, -66, 13};
  // {00001000 00011110 00100110 00010010}
  public static final byte[] GRPSPLIT2 = new byte[] {16, 120, 100, 72};
  // {11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 11011110 11111111 11111111 11011101 11111011 11111111 11111111 01111101 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -3, -1, -1, -2, -1, -1, -1, 123, -1, -1, -69, -33, -1, -1, -66, 15};
  // {00000000 10000001 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, -127, -128, 0};
  // {01111100 01011110 00111110 11111110}
  public static final byte[] GRPSPLIT5 = new byte[] {62, 122, 124, 127};
  // {01000001 01000000 00100000 00000000 00100000 10000000 00000000 00000000 00000001 00000000 00000010 00000001 00000100 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {-126, 2, 4, 0, 4, 1, 0, 0, -128, 0, 64, -128, 32, 0, 0, 0, 0};
  // {00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0};
  // {00001000 00001010 00000000 00000000}
  public static final byte[] GRPSPLIT8 = new byte[] {16, 80, 0, 0};
  // {...6 0-bits... 00000000 01000100 01001000 01000000 00000000 00000000 00000001 00000000 10000000 00000000 00110000 00100000 00000000 00000000 0}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 34, 18, 2, 0, 0, -128, 0, 1, 0, 12, 4, 0, 0, 64};
  // {11111111 11111110 00111111 11110111 11101111 11011111 11111111 11111011 11111111 11111001 11111111 11011111 11111111 11111111 11111001 11111111 11101}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, 127, -4, -17, -9, -5, -1, -33, -1, -97, -1, -5, -1, -1, -97, -1, 23};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT11 = new byte[] {43, 5, 0, 0, 0, 0, -30, 0, -120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128, 32, 0, 0, 8, 0, 0, 80, -79, -111, -127, 1, -59, 32, 0, 0, 0, 0, 124, 26, 17, -39, 70, -109, 49, -99, 9, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 4, 0, 8, 0, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -1, -1, 124, -1, -1, -1, -21, -35, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -67, -1, -53, -69, -9, -1, -1, -1, -1, -1, -3, -70, 125, -33, 111, -97, -1, -3, 95, -18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, 15};
  // {...1370 0-bits... }
  public static final byte[] GRPSPLIT13 = new byte[] {8, 5, 0, 0, 0, 0, -128, 0, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 8, 0, 0, 64, -96, 1, 0, 0, 4, 0, 0, 0, 0, 0, 80, 24, 1, -119, 4, -128, 0, 16, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8};
  // {00010100 00001000 10001000 10010000 00100100 00110000 10100001 00000000 00000000 00011100 00000000 00011100 00000000 00100000 00000110 01000100 000000}
  public static final byte[] GRPSPLIT14 = new byte[] {40, 16, 17, 9, 36, 12, -123, 0, 0, 56, 0, 56, 0, 4, 96, 34, 0};
  // {00001001 00000100 11000010 01000000 11100001 10000000 10010011 10100000 10010010 11001100 00000011 01101011 00000010 10010000 10010101 00110010 0100}
  public static final byte[] GRPSPLIT15 = new byte[] {-112, 32, 67, 2, -121, 1, -55, 5, 73, 51, -64, -42, 64, 9, -87, 76, 2};
  // {10001001 11000001 00000011 11100010}
  public static final byte[] GRPSPLIT16 = new byte[] {-111, -125, -64, 71};
  // {10111100 11111101 10011111 11111011 10101110 11111111 11111111 11011111 10101111 11111111 10011011 11111101 11111111 11111101 00110110 11101111 011111}
  public static final byte[] GRPSPLIT17 = new byte[] {61, -65, -7, -33, 117, -1, -1, -5, -11, -1, -39, -65, -1, -65, 108, -9, 62};
  // {11101110 10101111 11011111 11111101 00111111 11011101 11101010 11111111 11111111 11101111 11111110 11011110 11111111 10011110 01111111 01110011 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {119, -11, -5, -65, -4, -69, 87, -1, -1, -9, 127, 123, -1, 121, -2, -50, 15};
  // {00011011 00101001 10101101 01101110}
  public static final byte[] GRPSPLIT19 = new byte[] {-40, -108, -75, 118};
  // {10100100 10101011 01110000 11011110}
  public static final byte[] GRPSPLIT20 = new byte[] {37, -43, 14, 123};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT21 = new byte[] {106, 112, 91, 5, 12, 85, -126, 80, 2, 72, 69, 108, -125, 2, 90, 82, 75, -7, -25, -13, 9, -106, -119, -15, -49, -36, -79, -75, 100, 57, -128, 51, -30, 86, 64, 52, 76, 48, -113, 37, 69, -42, -118, -72, 120, 101, 70, 38, 97, 4, -120, 32, -128, 16, 5, 16, 72, 107, -36, -10, -96, 74, -84, 25, 13, 118, 78, -71, 63, 108, -59, -105, 79, 65, 54, -83, 59, -77, 27, 59};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, -96, 74, -48, -96, 93, -87, -79, 39, -94, 0, 64, 0, -127, 41, -124, 0, 8, 0, 4, 32, 4, 12, 0, 33, 12, 64, 17, 66, 98, 12, 5, 8, -85, 66, -112, 10, 0, 72, 16, 0, 1, 68, -124, -120, 8, 81, -126, -55, 21, -33, 64, -121, -78, 106, -94, 16, 1, 1, 2, 16, 16, 2, -96, -120, -128, 4, -128, 2, 0, 104, 0, 28, 65, 80, 0, 4, 32, -64};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT23 = new byte[] {110, -9, -5, -17, -3, -1, -1, -1, -1, 127, -1, 108, -45, -1, -33, -5, -1, -5, -17, -5, -1, -1, -113, -3, -33, -3, -1, -3, -1, -1, -17, -65, -25, -2, -1, -10, -3, -1, -97, -1, 117, -42, -21, -1, -2, -1, -1, 127, -1, -17, -1, -1, -5, -33, -1, -1, -5, -1, -3, -1, -18, 95, -2, -101, -83, -1, -18, -1, -65, -2, -1, -1, -33, -33, -1, -1, -1, -9, -69, -1};
  // {11110101 11111001 11001110 11101111 11011111 01010111 01101111 01111101 10111011 01111101 11111111 10010110 11101111 11101111 00001001 01111111 1011}
  public static final byte[] GRPSPLIT24 = new byte[] {-81, -97, 115, -9, -5, -22, -10, -66, -35, -66, -1, 105, -9, -9, -112, -2, 13};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT25 = new byte[] {40, 32, 75, 0, 12, 20, 0, 16, 0, 0, 65, 44, 2, 0, 74, 66, 66, 8, -63, -79, 0, -128, 9, -112, 3, 4, -112, -91, 36, 48, -128, 18, 96, 82, 64, 32, 12, 16, -126, 5, 64, 6, -126, -80, 0, 32, 2, 32, 97, 0, 8, 0, 0, 16, 0, 16, 0, 96, 28, -110, -96, 8, -84, 16, 4, 32, 72, -95, 57, 64, -127, 23, 3, 0, 0, -128, 11, 48, 26, 57};
  // {11111111 00001000 10111110 11111111 11010101 01011101 01111101 10011100 10101101 01111011 11101011 01011111 11110100 10011111 11011101 01111111 1011}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, 16, 125, -1, -85, -70, -66, 57, -75, -34, -41, -6, 47, -7, -69, -2, 13};
  // {10110000 01001000 10000000 00011100}
  public static final byte[] GRPSPLIT27 = new byte[] {13, 18, 1, 56};
}


class gbm_pojo_test_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_26_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.12981167f : 
                        -0.015702868f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.07455417f : 
                        -0.017467251f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        -0.07760572f : 
                        -0.008172836f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        -0.04445283f : 
                        0.079371296f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.15911579f : 
                        -0.07906659f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.0373381f : 
                        0.021717988f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.013715211f : 
                        0.01333269f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                        0.005067031f : 
                        0.060128223f)))) : 
         (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        -0.12691976f : 
                        -0.044313386f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.06837884f : 
                        0.0013577865f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        -0.033439744f : 
                        9.375319E-4f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.0013714951f : 
                        0.033418022f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.03991573f : 
                        0.0016447285f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        0.011658967f : 
                        0.06085068f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT29, 134, 0, data[6])) ? 
                        0.0051613706f : 
                        0.061899595f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT30, 134, 0, data[6])) ? 
                        0.017920824f : 
                        0.10491136f)))));
    return pred;
  } // constant pool size = 567B, number of visited nodes = 31, static init size = 2646B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {00111000 00100101 00011111 01101111 01100111 00110101 11010110 00000111 01000001 01000110 00000101 10000000 11000110 11010001 11000001 10100000 0010}
  public static final byte[] GRPSPLIT1 = new byte[] {28, -92, -8, -10, -26, -84, 107, -32, -126, 98, -96, 1, 99, -117, -125, 5, 4};
  // {01100000 01011010 00010011 01011110}
  public static final byte[] GRPSPLIT2 = new byte[] {6, 90, -56, 122};
  // {11111101 11011011 01101111 10101111 01111111 11111111 11010111 10000111 11101101 11111111 10111111 01111101 01111111 11101001 11111010 11111111 110111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, -37, -10, -11, -2, -1, -21, -31, -73, -1, -3, -66, -2, -105, 95, -1, 59};
  // {00000000 00000000 00100000 00000000 00000000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10111100 11101101 00111111 11111111 11100111 11111111 11111110 11111111 01110111 01011110 11101101 11110010 11011110 11110101 11100001 11111011 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {61, -73, -4, -1, -25, -1, 127, -1, -18, 122, -73, 79, 123, -81, -121, -33, 15};
  // {10011010 00001101 10000101 00010010 11000000 00000000 10100001 00100000 00000111 00100000 01000101 00100001 11000000 01010011 00001100 01000100 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {89, -80, -95, 72, 3, 0, -123, 4, -32, 4, -94, -124, 3, -54, 48, 34, 0};
  // {10111111 01111101 10111111 00111111 11110011 11111011 11110111 11101111 01110111 11101111 11111111 11101111 11111100 11110111 10111111 11111111 010010}
  public static final byte[] GRPSPLIT7 = new byte[] {-3, -66, -3, -4, -49, -33, -17, -9, -18, -9, -1, -9, 63, -17, -3, -1, 18};
  // {10111111 11101111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11110111 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -9, -1, -1, -1, -65, -1, -1, -1, -1, -5, -1, -1, -1, -1, -17, 15};
  // {01000111 11101101 11111111 10010011 11101111 01111011 11111111 01111111 00111111 11111101 11101111 11011101 10111110 01101111 01011111 11111011 111011}
  public static final byte[] GRPSPLIT9 = new byte[] {-30, -73, -1, -55, -9, -34, -1, -2, -4, -65, -9, -69, 125, -10, -6, -33, 55};
  // {00111111 00110000 00011010 11010110}
  public static final byte[] GRPSPLIT10 = new byte[] {-4, 12, 88, 107};
  // {11001111 11111111 11111111 11111111 11111111 01111011 11111111 11111111 10111111 11111111 11111111 11111101 10111110 11101111 11111111 11111011 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-13, -1, -1, -1, -1, -34, -1, -1, -3, -1, -1, -65, 125, -9, -1, -33, 63};
  // {11111111 11111110 11111100 11111001 10111111 11111111 11101111 11111011 10111111 11111111 11111111 11111111 01111111 11111111 10111111 01111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, 127, 63, -97, -3, -1, -9, -33, -3, -1, -1, -1, -2, -1, -3, -2, 15};
  // {01000000 00100100 11000000 00000000 01000001 00001011 10011010 00100001 00100000 10011001 11000000 01010000 00000100 00001000 00000010 00000001 000000}
  public static final byte[] GRPSPLIT13 = new byte[] {2, 36, 3, 0, -126, -48, 89, -124, 4, -103, 3, 10, 32, 16, 64, -128, 0};
  // {01111101 00010000 01001110 01010110}
  public static final byte[] GRPSPLIT14 = new byte[] {-66, 8, 114, 106};
  // {11100111 11111010 11101111 11110111 10011111 11111111 01111111 11111001 11111110 11111111 11111111 11111111 10111011 11111111 01111111 01111111 1101}
  public static final byte[] GRPSPLIT15 = new byte[] {-25, 95, -9, -17, -7, -1, -2, -97, 127, -1, -1, -1, -35, -1, -2, -2, 11};
  // {00101110 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {116, 2, 0, 0};
  // {11011110 01010001 11010111 11110111 11111101 10100000 11111111 10110101 11011111 10111001 11000001 01111111 11111111 11110110 01011011 00111011 1001}
  public static final byte[] GRPSPLIT17 = new byte[] {123, -118, -21, -17, -65, 5, -1, -83, -5, -99, -125, -2, -1, 111, -38, -36, 9};
  // {00011100 11011110 00001000 01111010}
  public static final byte[] GRPSPLIT18 = new byte[] {56, 123, 16, 94};
  // {11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11011111 01111011 11111111 00111111 11111111 11111111 11111101 11111111 111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -1, -1, -1, -1, -65, -1, -1, -5, -34, -1, -4, -1, -1, -65, -1, 63};
  // {11111111 11110101 11110111 11110111 11111111 10101111 11111111 11110111 11111111 10111101 11101111 11111111 11111111 11110110 11111011 01111111 1101}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -81, -17, -17, -1, -11, -1, -17, -1, -67, -9, -1, -1, 111, -33, -2, 11};
  // {11011010 00100101 10100110 11111000}
  public static final byte[] GRPSPLIT21 = new byte[] {91, -92, 101, 31};
  // {01101110 11101001 00111111 10100101 01111110 11110111 01101111 00010001 01110110 11111110 11010100 10100111 10111110 10110111 01111110 00010001 111101}
  public static final byte[] GRPSPLIT22 = new byte[] {118, -105, -4, -91, 126, -17, -10, -120, 110, 127, 43, -27, 125, -19, 126, -120, 47};
  // {11000000 00000010 11111010 01110010 00011000 00000100 10001000 00101100 00010001 00000100 00000001 10001000 10100100 01100010 11001010 11100100 001010}
  public static final byte[] GRPSPLIT23 = new byte[] {3, 64, 95, 78, 24, 32, 17, 52, -120, 32, -128, 17, 37, 70, 83, 39, 20};
  // {00000010 00100000 00010110 10000000 00000000 00000010 00010000 01000010 01011101 01001000 00110000 00001001 00000011 00000010 10000100 00000000 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {64, 4, 104, 1, 0, 64, 8, 66, -70, 18, 12, -112, -64, 64, 33, 0, 2};
  // {10101111 11110001 10010111 01000110}
  public static final byte[] GRPSPLIT25 = new byte[] {-11, -113, -23, 98};
  // {00000000 00000001 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01011000 00000000 00000011 00100000 100001}
  public static final byte[] GRPSPLIT26 = new byte[] {0, -128, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, -64, 4, 33};
  // {00011000 00100010 10000000 00000000 00100000 00000010 10000001 01000110 10000100 00000000 00000000 00110000 11000000 00000100 10010010 00000000 000110}
  public static final byte[] GRPSPLIT27 = new byte[] {24, 68, 1, 0, 4, 64, -127, 98, 33, 0, 0, 12, 3, 32, 73, 0, 24};
  // {01111011 00001001 01000001 00101100}
  public static final byte[] GRPSPLIT28 = new byte[] {-34, -112, -126, 52};
  // {11111110 11101001 11101111 11011111 11111110 11111111 01111111 11111011 10101110 11111111 11111011 11110111 11111111 01101111 10111100 11101111 111111}
  public static final byte[] GRPSPLIT29 = new byte[] {127, -105, -9, -5, 127, -1, -2, -33, 117, -1, -33, -17, -1, -10, 61, -9, 63};
  // {11111111 11011111 11011111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111101 11111111 11111111 11111110 11111111 011111}
  public static final byte[] GRPSPLIT30 = new byte[] {-1, -5, -5, -1, -1, -1, -1, -1, -9, -1, -1, -65, -1, -1, 127, -1, 62};
}


class gbm_pojo_test_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_27_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.16947836f : 
                        -0.08648666f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.10632111f : 
                        0.014845039f)) : 
                0.053970613f) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                    0.0019238279f : 
                    0.1183778f) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        0.12357341f : 
                        0.13336137f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        0.1252086f : 
                        0.14591989f)))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3484.5f ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.061874f : 
                        -0.019075688f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        -0.020387346f : 
                        0.004003509f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.012538308f : 
                        0.044650517f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        0.02095751f : 
                        0.07409278f))) : 
             (data[3 /* FlightNum */] <454.5f ? 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(453, 2, data[3]) || (GenModel.bitSetIsInRange(453, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT17, 453, 2, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                        -0.05735856f : 
                        0.0058606747f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        0.0069028633f : 
                        0.08100044f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1940.5f ? 
                        0.016204003f : 
                        -0.013892782f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        0.012178568f : 
                        0.059513956f)))));
    return pred;
  } // constant pool size = 438B, number of visited nodes = 26, static init size = 1992B
  // {00000000 00000000 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 113, 3};
  // {10001100 00000000 00110000 00100000}
  public static final byte[] GRPSPLIT1 = new byte[] {49, 0, 12, 4};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111011 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -1, -33, -1, -1, 63};
  // {01010011 10001001 10000001 00000100}
  public static final byte[] GRPSPLIT3 = new byte[] {-54, -111, -127, 32};
  // {00000011 11010100 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-64, 43, 0, 0};
  // {11111101 11111111 11111111 11111111 11110111 11111111 11111111 11111101 11111111 10111111 11110111 01111111 11011111 11111111 11111111 01111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-65, -1, -1, -1, -17, -1, -1, -65, -1, -3, -17, -2, -5, -1, -1, -2, 15};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101011 11111111 11111111 11111011 111111}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -41, -1, -1, -33, 63};
  // {11101101 11111111 11001111 00111111 10001011 11111111 11111011 11110011 11110110 11111111 11111111 01111011 10110111 11111111 10111101 10111111 110111}
  public static final byte[] GRPSPLIT7 = new byte[] {-73, -1, -13, -4, -47, -1, -33, -49, 111, -1, -1, -34, -19, -1, -67, -3, 59};
  // {00000000 01000000 00000000 00000010 00100000 00000000 00000000 00000000 00000001 00001000 01000000 00001001 00000000 00000000 00000000 00000010 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 2, 0, 64, 4, 0, 0, 0, -128, 16, 2, -112, 0, 0, 0, 64, 0};
  // {11100100 11101110 11011101 10100110}
  public static final byte[] GRPSPLIT9 = new byte[] {39, 119, -69, 101};
  // {00000000 00110100 00000010 00110000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 44, 64, 12};
  // {00000110 00000010 10010000 00000011 00010000 00110010 00100100 00100000 11000000 00000101 11001110 00100110 11011000 10000111 01000110 11010000 101110}
  public static final byte[] GRPSPLIT11 = new byte[] {96, 64, 9, -64, 8, 76, 36, 4, 3, -96, 115, 100, 27, -31, 98, 11, 29};
  // {00111110 01100111 11101100 11111111 11001111 11101101 11111101 11011001 10111101 01010001 10001110 11110110 01101011 00010111 10110010 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {124, -26, 55, -1, -13, -73, -65, -101, -67, -118, 113, 111, -42, -24, 77, -1, 15};
  // {11101110 00101100 00011111 11111110 01111101 00011001 11110111 10111101 10111101 01110011 11010011 00111111 11111101 11011110 11011111 10110101 0011}
  public static final byte[] GRPSPLIT13 = new byte[] {119, 52, -8, 127, -66, -104, -17, -67, -67, -50, -53, -4, -65, 123, -5, -83, 12};
  // {00000000 10010001 01100010 10000001 00101010 00110100 01000001 00000110 00000001 01101000 00101001 01011010 00000010 00000001 00100101 00101010 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, -119, 70, -127, 84, 44, -126, 96, -128, 22, -108, 90, 64, -128, -92, 84, 0};
  // {01010010 01101110 01100000 01011000 00010000 01000000 10000001 00000000 00000101 00010000 10100000 10000010 00000000 00001001 10000000 00110000 001000}
  public static final byte[] GRPSPLIT15 = new byte[] {74, 118, 6, 26, 8, 2, -127, 0, -96, 8, 5, 65, 0, -112, 1, 12, 4};
  // {00001001 00100001 11000000 00100001 10011000 00000110 10000100 00001001 00000101 01011000 00000000 00100010 10010110 01010000 00001100 00000000 000100}
  public static final byte[] GRPSPLIT16 = new byte[] {-112, -124, 3, -124, 25, 96, 33, -112, -96, 26, 0, 68, 105, 10, 48, 0, 8};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT17 = new byte[] {-1, -2, -3, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -2, 127, -1, -1, -9, -1, 127, -1, -1, -1, -2, -1, -17, 127, -1, -1, -2, -3, -5, -1, -9, -17, -17, -17, -1, -5, -17, -3, -1, 29, -57, -121, -17, 110, 27, -105, 95, -67, 23, -48, 28, 13};
  // {00100011 00000010 00000000 00111110}
  public static final byte[] GRPSPLIT18 = new byte[] {-60, 64, 0, 124};
  // {00110001 10000001 00000010 11000110}
  public static final byte[] GRPSPLIT19 = new byte[] {-116, -127, 64, 99};
  // {00000001 11000001 10100100 00000101 00011001 00100000 10000000 00000000 00001010 00000100 00011001 00000010 11010001 10100011 10010011 00100000 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {-128, -125, 37, -96, -104, 4, 1, 0, 80, 32, -104, 64, -117, -59, -55, 4, 0};
  // {11000000 00000000 01010000 01000000 01000000 00000000 00100000 00000100 00010000 00000001 10000000 10000100 10001100 10000000 10000011 00000000 101000}
  public static final byte[] GRPSPLIT21 = new byte[] {3, 0, 10, 2, 2, 0, 4, 32, 8, -128, 1, 33, 49, 1, -63, 0, 5};
}


class gbm_pojo_test_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_28_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.11199031f : 
                        -0.042967513f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                        0.10664869f : 
                        0.20804197f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.043032207f : 
                        0.03024266f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.023243431f : 
                        0.116214454f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.03156152f : 
                        -0.0071832137f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        1.9228984E-4f : 
                        0.058979806f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.11000092f : 
                        -0.009181575f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        0.021390809f : 
                        0.10099633f)))) : 
         (Double.isNaN(data[2 /* UniqueCarrier */]) || !GenModel.bitSetIsInRange(32, 0, data[2]) || (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[2])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                        -0.07465005f : 
                        -0.0025987774f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        -0.01984013f : 
                        0.077277444f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.030076092f : 
                        0.0016786403f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        -0.0012552954f : 
                        0.02589777f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.04283296f : 
                        -8.4451487E-4f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.026174976f : 
                        0.021393271f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT29, 32, 0, data[0])) ? 
                        -0.042445276f : 
                        0.046323873f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT30, 134, 0, data[6])) ? 
                        -0.010488896f : 
                        0.10020704f)))));
    return pred;
  } // constant pool size = 528B, number of visited nodes = 31, static init size = 2412B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {01111101 11111010 01011011 11011110}
  public static final byte[] GRPSPLIT1 = new byte[] {-66, 95, -38, 123};
  // {10110010 01000000 00000110 00000001 01000101 00000001 01000110 01100000 00000000 01001110 00000101 00100000 01000010 11000000 10000001 10000000 0111}
  public static final byte[] GRPSPLIT2 = new byte[] {77, 2, 96, -128, -94, -128, 98, 6, 0, 114, -96, 4, 66, 3, -127, 1, 14};
  // {01000000 00000000 00000100 10000010 00000000 00000010 10010010 00000000 00000000 00000000 00000010 00000000 00100001 00001000 00000000 01110000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 0, 32, 65, 0, 64, 73, 0, 0, 0, 64, 0, -124, 16, 0, 14, 0};
  // {01011101 01111101 10101110 11101111 11111111 01111011 11111111 00000011 00111101 11111101 00011011 11101101 11111101 10111000 00011010 11111111 001111}
  public static final byte[] GRPSPLIT4 = new byte[] {-70, -66, 117, -9, -1, -34, -1, -64, -68, -65, -40, -73, -65, 29, 88, -1, 60};
  // {00000000 00000000 00000000 00000010 00000000 00000000 10000010 00000000 00000000 00000000 00000010 00000000 00000000 00001000 00000000 01100000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 0, 64, 0, 0, 65, 0, 0, 0, 64, 0, 0, 16, 0, 6, 0};
  // {00000000 00000010 00000000 01000000 01000000 00100000 00000000 00000000 00011001 00001000 01001000 01010100 00000100 00000000 10000100 00010000 100100}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 0, 2, 2, 4, 0, 0, -104, 16, 18, 42, 32, 0, 33, 8, 9};
  // {00000010 00000001 00100000 00100000}
  public static final byte[] GRPSPLIT7 = new byte[] {64, -128, 4, 4};
  // {11111111 11111011 11111111 11111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -33, -1, 127};
  // {00000000 10100101 01001101 01101111 00100011 00010101 01000000 00000010 11001000 01000100 01010100 10010100 10000101 01010001 11000001 00101001 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -91, -78, -10, -60, -88, 2, 64, 19, 34, 42, 41, -95, -118, -125, -108, 0};
  // {11011010 00010101 00001100 00000010 11000000 00001000 10000101 01000001 00000110 01100010 11000101 00011001 00000010 01000001 00001100 01000100 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {91, -88, 48, 64, 3, 16, -95, -126, 96, 70, -93, -104, 64, -126, 48, 34, 0};
  // {01000000 00011010 00001010 01010110}
  public static final byte[] GRPSPLIT11 = new byte[] {2, 88, 80, 106};
  // {00000001 00010010 00000000 10000000 10001000 10100000 00001001 00000101 00010001 00000000 00100000 00000010 00000000 10000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 72, 0, 1, 17, 5, -112, -96, -120, 0, 4, 64, 0, 1, 0, 0, 0};
  // {01000111 11101110 10011111 10111111 11101111 11111111 11111101 00111111 11101111 10111111 11100111 11010101 10111111 01111111 11111011 10101011 110011}
  public static final byte[] GRPSPLIT13 = new byte[] {-30, 119, -7, -3, -9, -1, -65, -4, -9, -3, -25, -85, -3, -2, -33, -43, 51};
  // {10111111 10011101 11101110 00100010}
  public static final byte[] GRPSPLIT14 = new byte[] {-3, -71, 119, 68};
  // {00000000 00101010 10000001 00000001 00000001 10000011 10010000 00100010 00100000 10010010 01100000 00000000 00000000 00110010 00000000 00100001 010000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 84, -127, -128, -128, -63, 9, 68, 4, 73, 6, 0, 0, 76, 0, -124, 2};
  // {00101110 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {116, 2, 0, 0};
  // {11011110 01010001 11010111 11111111 11111101 10100000 11111011 11111101 11011111 10111101 11100001 01111111 11111111 11110110 11111011 00111010 1011}
  public static final byte[] GRPSPLIT17 = new byte[] {123, -118, -21, -1, -65, 5, -33, -65, -5, -67, -121, -2, -1, 111, -33, 92, 13};
  // {00011100 11011110 10101010 01111110}
  public static final byte[] GRPSPLIT18 = new byte[] {56, 123, 85, 126};
  // {00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000100 00011000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 001000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 0, 0, 4, 0, 0, 32, 24, 0, 0, 0, 0, 0, 0, 0, 4};
  // {00000000 00000000 00000000 00000000 00010000 00100000 00000000 00100100 00010001 10000000 00000000 01000000 01000000 00000000 00000000 00000000 001000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 0, 0, 0, 8, 4, 0, 36, -120, 1, 0, 2, 2, 0, 0, 0, 4};
  // {11011010 00100101 10100100 11111000}
  public static final byte[] GRPSPLIT21 = new byte[] {91, -92, 37, 31};
  // {01111111 11101111 11101110 11110010 11101111 11111111 10111111 11110011 00111111 01110011 10011110 11110011 11000011 01111011 01011111 11111101 1101}
  public static final byte[] GRPSPLIT22 = new byte[] {-2, -9, 119, 79, -9, -1, -3, -49, -4, -50, 121, -49, -61, -34, -6, -65, 11};
  // {11010000 00000010 11111000 01110010 01010000 01000110 10101000 00101100 00000001 00000100 00001001 10001110 10100100 11100011 11001010 11100100 001010}
  public static final byte[] GRPSPLIT23 = new byte[] {11, 64, 31, 78, 10, 98, 21, 52, -128, 32, -112, 113, 37, -57, 83, 39, 20};
  // {00000010 00100000 00010110 10000000 00000000 00000010 00010000 01000010 01011101 01001000 00110000 00001001 00100011 00000000 10000100 00000000 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {64, 4, 104, 1, 0, 64, 8, 66, -70, 18, 12, -112, -60, 0, 33, 0, 2};
  // {10101111 11110001 10010111 01000110}
  public static final byte[] GRPSPLIT25 = new byte[] {-11, -113, -23, 98};
  // {11111111 11111111 11001111 11111111 10111101 11111111 01111111 11111111 11110111 11111111 11111111 01111111 11111111 11110011 11101111 11101111 111111}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -1, -13, -1, -67, -1, -2, -1, -17, -1, -1, -2, -1, -49, -9, -9, 63};
  // {10111110 11110110 10101111 11101111 11111110 11111111 11111011 11111111 11111111 10111111 01111011 11111101 11111011 11011110 10110111 10001011 010111}
  public static final byte[] GRPSPLIT27 = new byte[] {125, 111, -11, -9, 127, -1, -33, -1, -1, -3, -34, -65, -33, 123, -19, -47, 58};
  // {01111001 00001001 01000001 00001100}
  public static final byte[] GRPSPLIT28 = new byte[] {-98, -112, -126, 48};
  // {11111111 11001111 11110111 11111110}
  public static final byte[] GRPSPLIT29 = new byte[] {-1, -13, -17, 127};
  // {11111111 11011111 11011111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 111111}
  public static final byte[] GRPSPLIT30 = new byte[] {-1, -5, -5, -1, -1, -1, -1, -1, -9, -1, -1, -65, -1, -1, -1, -1, 63};
}


class gbm_pojo_test_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_29_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT2, 96, 0, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.12948431f : 
                        -0.041471604f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.060482763f : 
                        -0.010532401f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                    -0.017571043f : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                        0.13651155f : 
                        0.20717141f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[0])) ? 
                        -0.16418721f : 
                        -0.010001923f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT10, 96, 0, data[3])) ? 
                        -0.02388685f : 
                        0.08774308f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.13884613f : 
                        0.0639706f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.053420976f : 
                        0.113365546f)))) : 
         (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[2])) ? 
             (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3166.0f ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                        -0.10172593f : 
                        -0.04345141f) : 
                     (data[3 /* FlightNum */] <238.5f ? 
                        0.15896128f : 
                        -0.014753022f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(335, 3166, data[4]) && !GenModel.bitSetContains(GRPSPLIT18, 335, 3166, data[4])) ? 
                        -0.0866002f : 
                        0.0406108f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        0.08578099f : 
                        0.1573609f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                 (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1798.5f ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1014.5f ? 
                        2.79879E-4f : 
                        0.028939705f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT21, 640, 1799, data[3])) ? 
                        -0.03836775f : 
                        0.040073503f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        -0.061136253f : 
                        0.017075833f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        -0.008194299f : 
                        0.049856465f)))));
    return pred;
  } // constant pool size = 489B, number of visited nodes = 30, static init size = 2202B
  // {11101111 10011011 01000011 11000101 01010000 00100001 10000011 00100100 01010100 10000000 00110010 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -39, -62, -93, 10, -124, -63, 36, 42, 1, 76, 2};
  // {00000001 00001000 00100000 00000000 00000000 00100010 00000100 00000011 00000001 00000000 00001000 00000000 10000000 00100001 00001000 11110100 000000}
  public static final byte[] GRPSPLIT1 = new byte[] {-128, 16, 4, 0, 0, 68, 32, -64, -128, 0, 16, 0, 1, -124, 16, 47, 0};
  // {11111111 10111111 01101111 11100111 01111010 01101011 10010111 01111111 11111101 10110001 10111111 11111011}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -3, -10, -25, 94, -42, -23, -2, -65, -115, -3, -33};
  // {11100010 10101011 00000110 11000010}
  public static final byte[] GRPSPLIT3 = new byte[] {71, -43, 96, 67};
  // {11001011 00010010 10101111 10101000}
  public static final byte[] GRPSPLIT4 = new byte[] {-45, 72, -11, 21};
  // {11111110 11111110 01111100 11111100}
  public static final byte[] GRPSPLIT5 = new byte[] {127, 127, 62, 63};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00000000 00001000 00000000 00000000 00000001 00001000 10000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, -128, 0, 16, 0, 0, -128, 16, 1, 0};
  // {01110101 10111010 10101110 11110110}
  public static final byte[] GRPSPLIT7 = new byte[] {-82, 93, 117, 111};
  // {11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11110111 11111111 11111011 11111111 10111011 11011111 10111111 11111111 111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -1, -9, -1, -1, -1, -17, -1, -33, -1, -35, -5, -3, -1, 63};
  // {00001010 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {80, 2, 0, 0};
  // {00000000 00010000 00000000 00000000 00000000 00000000 00000000 00100000 01010100 10000000 00000000 01000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 8, 0, 0, 0, 0, 0, 4, 42, 1, 0, 2};
  // {11111111 11011111 11111111 11111111 11011011 11111101 11111111 10111111 11111111 11111011 10111111 11111111 10111111 11111110 11111101 11111111 110011}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -5, -1, -1, -37, -65, -1, -3, -1, -33, -3, -1, -3, 127, -65, -1, 51};
  // {00000001 00100010 00100110 11100010}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 68, 100, 71};
  // {00010001 00000100 01010000 11000010 01100000 00000000 10000000 00000000 00000100 00000000 00000010 01000010 10000000 00100000 10110000 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-120, 32, 10, 67, 6, 0, 1, 0, 32, 0, 64, 66, 1, 4, 13, 0, 0};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT14 = new byte[] {-9, 3, 0, 0};
  // {01111001 11011100 11011111 11111100}
  public static final byte[] GRPSPLIT15 = new byte[] {-98, 59, -5, 63};
  // {01111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {94, 0, 0, 0};
  // {10010100 01001011 10111010 01000100}
  public static final byte[] GRPSPLIT17 = new byte[] {41, -46, 93, 34};
  // {...3166 0-bits... }
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -37, -1, -1, -9, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {11111011 11111101 11100101 10111110}
  public static final byte[] GRPSPLIT19 = new byte[] {-33, -65, -89, 125};
  // {00000110 00000000 10000100 00000000 01000101 00010100 01000000 00000000 10001000 01000100 00000010 00010000 01000011 00000000 00000001 00100000 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {96, 0, 33, 0, -94, 40, 2, 0, 17, 34, 64, 8, -62, 0, -128, 4, 0};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT21 = new byte[] {42, 112, 91, 5, 12, 116, 10, 80, 3, 72, 69, -84, -118, 29, 74, 30, 56, -73, -63, -13, 9, -110, -51, -13, -116, -4, 55, -109, -64, -83, 10, 48, -30, 86, 64, 20, 76, 48, -113, 37, 69, -42, -118, -72, 121, 101, 2, 54, -31, 4, -120, 32, -128, -111, 5, 80, 74, 107, -36, -42, -96, 74, -84, 25, 12, 108, 78, -83, -65, 108, -59, -105, -53, 72, -10, 109, 43, -77, 25, 58};
  // {11111011 00011100 10000110 11111110}
  public static final byte[] GRPSPLIT22 = new byte[] {-33, 56, 97, 127};
  // {00000010 00000001 00000001 00100000 01010000 00000000 00001000 01000000 00000001 00000000 00000000 00100000 00011100 00000000 00000010 00000100 000100}
  public static final byte[] GRPSPLIT23 = new byte[] {64, -128, -128, 4, 10, 0, 16, 2, -128, 0, 0, 4, 56, 0, 64, 32, 8};
  // {10111101 11111110 11101111 10101110 11101011 11110111 01111011 11111111 11110111 11111110 10111111 11011111 11111011 11111111 11111110 11011011 110111}
  public static final byte[] GRPSPLIT24 = new byte[] {-67, 127, -9, 117, -41, -17, -34, -1, -17, 127, -3, -5, -33, -1, 127, -37, 59};
}


class gbm_pojo_test_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_30_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                    -0.14991711f : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.13208091f : 
                        -0.012963845f)) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.10513577f : 
                        0.0411641f) : 
                    0.13927646f)) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                    -0.031847212f : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        0.11468973f : 
                        0.12994164f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.12194845f : 
                        0.12682986f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        0.11137941f : 
                        0.15358637f)))) : 
         (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[1])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.042817067f : 
                        -0.011743899f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.0937075f : 
                        0.09215538f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.031722005f : 
                        0.005026611f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        6.8012986E-4f : 
                        0.030461887f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        -0.039057624f : 
                        0.0033422916f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        -0.026976801f : 
                        0.0127983475f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        -0.026572606f : 
                        0.009064547f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        0.014050478f : 
                        0.049645707f)))));
    return pred;
  } // constant pool size = 444B, number of visited nodes = 28, static init size = 1980B
  // {00000000 10000100 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 113, 3};
  // {10011100 01000000 00111100 10110000}
  public static final byte[] GRPSPLIT1 = new byte[] {57, 2, 60, 13};
  // {11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111011 11111111 11111111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {-1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, -1, -9, -33, -1, -1, 63};
  // {00000011 01100000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-64, 6, 0, 0};
  // {00001101 00010000 00100000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 8, 4, 0};
  // {00000000 00000000 00100000 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0};
  // {11111111 00111111 10011101 11111100}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -4, -71, 63};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, 15};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00001000 00000000 00010100 00000000 00000000 00010000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -128, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 40, 0, 0, 8, 0};
  // {00000001 10000100 10000001 00001000 00000000 00000010 00000000 00000000 01000000 00001000 00100000 00000001 10000000 10000000 00000010 00000010 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {-128, 33, -127, 16, 0, 64, 0, 0, 2, 16, 4, -128, 1, 1, 64, 64, 0};
  // {00000001 10100101 00010000 00010000 00000000 00000000 00000000 00000000 00000000 00001000 10001000 10000000 00010100 10010110 00000000 00000100 000100}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, -91, 8, 8, 0, 0, 0, 0, 0, 16, 17, 1, 40, 105, 0, 32, 8};
  // {11111101 11101110 11110110 00101110}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, 119, 111, 116};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT12 = new byte[] {89, 0, 0, 0};
  // {10111111 01100101 00011111 11101111 01110111 10110111 11011110 00011011 00001011 11000000 01000101 11001110 11001110 01000001 01000001 00111011 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-3, -90, -8, -9, -18, -19, 123, -40, -48, 3, -94, 115, 115, -126, -126, -36, 15};
  // {00001110 00000100 00000000 10000000 00010000 00100000 00010000 01000010 10000100 01010000 11000100 00111000 10000000 10000000 00001000 00000000 001100}
  public static final byte[] GRPSPLIT14 = new byte[] {112, 32, 0, 1, 8, 4, 8, 66, 33, 10, 35, 28, 1, 1, 16, 0, 12};
  // {01001100 01111010 00011000 11101010}
  public static final byte[] GRPSPLIT15 = new byte[] {50, 94, 24, 87};
  // {01111101 11111101 11111111 10101110}
  public static final byte[] GRPSPLIT16 = new byte[] {-66, -65, -1, 117};
  // {01000001 00101111 00011101 00000010 10110001 00011011 11101101 00000001 00111100 10111111 11000011 01010000 00111100 00001011 10000111 01110000 100000}
  public static final byte[] GRPSPLIT17 = new byte[] {-126, -12, -72, 64, -115, -40, -73, -128, 60, -3, -61, 10, 60, -48, -31, 14, 1};
  // {00010010 00000100 00001110 01000000 01010010 10010110 00001010 00000010 00000001 01000000 01000001 00001010 00000000 01000000 00000000 00000001 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {72, 32, 112, 2, 74, 105, 80, 64, -128, 2, -126, 80, 0, 2, 0, -128, 0};
  // {00111000 01000000 00010000 11000111 00000001 00010000 01000100 00001001 00000010 01000000 00000000 00000010 11001110 00000000 00000001 00010000 0010}
  public static final byte[] GRPSPLIT19 = new byte[] {28, 2, 8, -29, -128, 8, 34, -112, 64, 2, 0, 64, 115, 0, -128, 8, 4};
  // {11001110 10010001 11100101 00110010 10101111 00101000 11100011 11110110 11011101 11111111 10101100 11110001 11111111 10110110 11111111 01111010 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {115, -119, -89, 76, -11, 20, -57, 111, -69, -1, 53, -113, -1, 109, -1, 94, 0};
  // {01111100 11110011 10111011 11010111 00001110 11110110 11111011 10101111 11001111 00111001 00111001 11101011 11111011 11110000 01111000 10111101 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {62, -49, -35, -21, 112, 111, -33, -11, -13, -100, -100, -41, -33, 15, 30, -67, 63};
  // {00100000 00000101 10100100 00101100}
  public static final byte[] GRPSPLIT22 = new byte[] {4, -96, 37, 52};
  // {01111111 11101100 10010010 01111110}
  public static final byte[] GRPSPLIT23 = new byte[] {-2, 55, 73, 126};
  // {10001010 11011101 00000110 01010000}
  public static final byte[] GRPSPLIT24 = new byte[] {81, -69, 96, 10};
  // {11101111 10101010 00001111 11111101 01111101 11101111 00000101 00111101 11111110 11110110 11010111 11101011 01011110 11110110 11101111 11001010 101101}
  public static final byte[] GRPSPLIT25 = new byte[] {-9, 85, -16, -65, -66, -9, -96, -68, 127, 111, -21, -41, 122, 111, -9, 83, 45};
  // {10111000 01001001 11000000 01110000 01001000 11000000 10111011 01000111 10010101 01000000 00100000 00110010 10000001 00100011 11010000 00000000 001110}
  public static final byte[] GRPSPLIT26 = new byte[] {29, -110, 3, 14, 18, 3, -35, -30, -87, 2, 4, 76, -127, -60, 11, 0, 28};
}


class gbm_pojo_test_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_31_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                        -0.16221942f : 
                        -0.08092924f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.08982108f : 
                        -0.024035867f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.05680542f : 
                        0.007346308f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT7, 96, 0, data[3])) ? 
                        0.123362765f : 
                        0.20055503f))) : 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.098731205f : 
                        -0.013932836f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.05765925f : 
                        0.046764538f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                        -0.09480341f : 
                        0.032775912f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        0.0038668183f : 
                        0.14012213f)))) : 
         (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                        -0.104189895f : 
                        -0.04971156f) : 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2147.5f ? 
                        -0.033731822f : 
                        0.0726302f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2282.5f ? 
                        -0.027149137f : 
                        0.040663555f) : 
                     (data[4 /* TailNum */] <694.5f ? 
                        -5.335888E-4f : 
                        0.04137681f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                 (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1798.5f ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.009136946f : 
                        0.01609745f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(640, 1799, data[3]) || (GenModel.bitSetIsInRange(640, 1799, data[3]) && !GenModel.bitSetContains(GRPSPLIT22, 640, 1799, data[3])) ? 
                        -0.030516664f : 
                        0.045269374f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        -0.054557506f : 
                        0.035921186f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        0.0063808425f : 
                        0.047965918f)))));
    return pred;
  } // constant pool size = 504B, number of visited nodes = 31, static init size = 2268B
  // {11111111 10011111 01000011 11010111 01011010 00100001 10001011 01100101 01110101 10000000 00110010 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {-1, -7, -62, -21, 90, -124, -47, -90, -82, 1, 76, 3};
  // {01111111 11011011 01111111 11111110 10101010 11111111 11111111 11111111 01110011 11111010 01111111 01101011 10101011 11110111 11111001 11111111 110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -37, -2, 127, 85, -1, -1, -1, -50, 95, -2, -42, -43, -17, -97, -1, 59};
  // {11101011 11101011 01001111 11001010}
  public static final byte[] GRPSPLIT2 = new byte[] {-41, -41, -14, 83};
  // {00000000 00000000 00100001 00000000 01000000 00000000 00000000 00000100 00000010 00000100 00001000 00000001 00100000 00100000 11100000 10000010 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, -124, 0, 2, 0, 0, 32, 64, 32, 16, -128, 4, 4, 7, 65, 0};
  // {10011010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {89, 0, 0, 0};
  // {00000000 00010100 00000000 10000000 00000000 00000000 10000000 01000101 00000001 01001000 00001000 00000001 00100010 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 40, 0, 1, 0, 0, 1, -94, -128, 18, 16, -128, 68, 0, 32, 0, 0};
  // {10011110 10000010 10101010 11101000}
  public static final byte[] GRPSPLIT6 = new byte[] {121, 65, 85, 23};
  // {00000000 00000000 00001000 00000000 00000000 00000000 00010000 10000000 00000000 00001011 00000000 00100000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 0, 16, 0, 0, 0, 8, 1, 0, -48, 0, 4};
  // {01100001 00011010 00101100 10100000}
  public static final byte[] GRPSPLIT8 = new byte[] {-122, 88, 52, 5};
  // {11111111 11111101 11111111 11110111 10011011 10111111 11101111 10111111 11110111 11110111 11111011 11111011 10111011 11100110 10111111 11111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -65, -1, -17, -39, -3, -9, -3, -17, -17, -33, -33, -35, 103, -3, -1, 63};
  // {11111101 11111110 11111111 01111111 10111111 11111011 11111111 11111111 11111111 11111111 11111111 10111101 01111111 11111111 10111111 11110101 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 127, -1, -2, -3, -33, -1, -1, -1, -1, -1, -67, -2, -1, -3, -81, 15};
  // {11111111 01111011 10111111 11111110}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -34, -3, 127};
  // {01010001 00000000 00010000 11000001 00000000 10000100 10000000 00000000 00000001 00000000 00000000 11000010 10000000 01100000 11110000 00001000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {-118, 0, 8, -125, 0, 33, 1, 0, -128, 0, 0, 67, 1, 6, 15, 16, 0};
  // {11111111 11111111 11111111 11110111 11011111 11111111 11111111 11111111 11111111 11111011 11111111 01111111 11111011 01111111 11111101 11111111 111011}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -1, -17, -5, -1, -1, -1, -1, -33, -1, -2, -33, -2, -65, -1, 55};
  // {11111111 11011111 11111111 11011111 11111111 11111101 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 00111101 11111111 110111}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -5, -1, -5, -1, -65, -1, -1, -1, -1, -3, -1, -1, -1, -68, -1, 59};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-9, 3, 0, 0};
  // {10111111 11111111 11111111 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT16 = new byte[] {-3, -1, -1, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {01110111 10001110 10011111 10001000}
  public static final byte[] GRPSPLIT17 = new byte[] {-18, 113, -7, 17};
  // {10001010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {81, 0, 0, 0};
  // {00111001 01010100 10011000 01000100}
  public static final byte[] GRPSPLIT19 = new byte[] {-100, 42, 25, 34};
  // {00000110 00000000 10000100 00000000 01000101 00010100 01000000 10000000 10001010 01000100 00000010 00011000 01000011 00000000 00000001 00100000 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {96, 0, 33, 0, -94, 40, 2, 1, 81, 34, 64, 24, -62, 0, -128, 4, 0};
  // {11011100 11001010 01011011 11011011 00101110 11111110 11110011 00010100 10101111 10111101 11001101 01011011 10111110 11101111 00110110 01100100 001101}
  public static final byte[] GRPSPLIT21 = new byte[] {59, 83, -38, -37, 116, 127, -49, 40, -11, -67, -77, -38, 125, -9, 108, 38, 44};
  // {...1799 0-bits... }
  public static final byte[] GRPSPLIT22 = new byte[] {42, 112, 90, 4, 12, 84, 2, 80, 0, 72, 71, -84, -126, 21, 74, 30, 56, -75, -63, -13, 9, -110, -51, -13, -120, -36, 51, -109, -80, -83, 0, 48, -30, 86, 64, 20, 76, 50, -113, 37, 69, -42, -118, -72, 121, 101, 2, 54, 33, 4, -120, 32, -128, 17, 5, 16, 72, 43, -36, -42, -96, 74, -84, 17, 12, 100, 78, -87, 63, 108, -59, -105, -53, 64, -106, 45, 11, -77, 25, 58};
  // {10111101 11111111 11101111 11111111 11101111 11110111 01111011 11101111 11110111 11111110 10110111 11100111 11111111 11110111 11111110 11101011 110111}
  public static final byte[] GRPSPLIT23 = new byte[] {-67, -1, -9, -1, -9, -17, -34, -9, -17, 127, -19, -25, -1, -17, 127, -41, 59};
  // {10100001 10000000 10001010 01110000}
  public static final byte[] GRPSPLIT24 = new byte[] {-123, 1, 81, 14};
  // {11011011 00010000 00000111 11111110}
  public static final byte[] GRPSPLIT25 = new byte[] {-37, 8, -32, 127};
}


class gbm_pojo_test_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_32_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.1568555f : 
                        -0.11247784f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.06842445f : 
                        0.064554214f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                    -0.010081195f : 
                    0.10000822f)) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                    -0.06018207f : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        0.1132261f : 
                        0.12698576f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.11667734f : 
                        0.13033369f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        0.13050964f : 
                        0.15425678f)))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3484.5f ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        -0.031320695f : 
                        -0.007905173f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.0058279396f : 
                        0.026133062f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                        -0.05569564f : 
                        -0.00820763f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        0.0025053045f : 
                        0.028697088f))) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(16, 3485, data[4]) || (GenModel.bitSetIsInRange(16, 3485, data[4]) && !GenModel.bitSetContains(GRPSPLIT19, 16, 3485, data[4])) ? 
                 (data[3 /* FlightNum */] <1013.5f ? 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(1012, 2, data[3]) || (GenModel.bitSetIsInRange(1012, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT20, 1012, 2, data[3])) ? 
                        -0.035394147f : 
                        0.039051056f) : 
                     (data[3 /* FlightNum */] <1809.5f ? 
                        0.03847854f : 
                        -3.4721228E-4f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        0.12045775f : 
                        0.12886599f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        0.14134029f : 
                        0.15973204f)))));
    return pred;
  } // constant pool size = 537B, number of visited nodes = 28, static init size = 2538B
  // {00000000 00000100 10001110 10000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 32, 113, 1};
  // {10001100 00000000 00110000 00100000}
  public static final byte[] GRPSPLIT1 = new byte[] {49, 0, 12, 4};
  // {00010000 01100001 00001110 10011000}
  public static final byte[] GRPSPLIT2 = new byte[] {8, -122, 112, 25};
  // {11111110 11101111 11111111 10100000}
  public static final byte[] GRPSPLIT3 = new byte[] {127, -9, -1, 5};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00100000 00000000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0};
  // {11111111 11111111 11011111 11110111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-1, -1, -5, -17, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
  // {11111111 10111111 10011101 11111110}
  public static final byte[] GRPSPLIT6 = new byte[] {-1, -3, -71, 127};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111101 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -65, -1, -3, -1, -1, -2, -1, -1, -1, 15};
  // {00000000 00000001 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00001000 00000000 00010100 00000000 00000000 00010000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -128, 0, 0, 0, 0, 0, 16, 0, 0, 16, 0, 40, 0, 0, 8, 0};
  // {00000000 10000100 00000001 00001000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 00000001 10000000 10000000 00000010 10000000 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 33, -128, 16, 0, 64, 0, 0, 0, 0, 0, -128, 1, 1, 64, 1, 0};
  // {00000001 10100001 00000000 00010000 00000000 00000000 00000000 01000000 00000000 00001000 10000000 10000000 00010000 10010110 00000000 00000100 000100}
  public static final byte[] GRPSPLIT10 = new byte[] {-128, -123, 0, 8, 0, 0, 0, 2, 0, 16, 1, 1, 8, 105, 0, 32, 8};
  // {01111111 11111011 11111111 11111111 11111111 11111111 11111101 11111111 11101111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, -33, -1, -1, -1, -1, -65, -1, -9, -1, -1, -1, -1, -1, -65, -1, 63};
  // {01001000 00110100 10000010 01110000}
  public static final byte[] GRPSPLIT12 = new byte[] {18, 44, 65, 14};
  // {00010110 01000000 00000000 01001100 00011100 00000001 01000000 00100000 00000001 00000000 00000010 00010000 00111100 01000000 10011111 00100000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {104, 2, 0, 50, 56, -128, 2, 4, -128, 0, 64, 8, 60, 2, -7, 4, 0};
  // {00000110 10000000 10010000 00000011 00100000 00110010 00000110 00000000 11010000 00000101 11001110 00110010 11011000 00000111 01000110 11110000 101110}
  public static final byte[] GRPSPLIT14 = new byte[] {96, 1, 9, -64, 4, 76, 96, 0, 11, -96, 115, 76, 27, -32, 98, 15, 29};
  // {11011011 00111101 10000110 11111110}
  public static final byte[] GRPSPLIT15 = new byte[] {-37, -68, 97, 127};
  // {11101111 10110111 11111111 10101011 01101011 01111101 00000101 10111110 10111101 11111011 10011101 11111111 11000111 10110111 00100111 01111111 1011}
  public static final byte[] GRPSPLIT16 = new byte[] {-9, -19, -1, -43, -42, -66, -96, 125, -67, -33, -71, -1, -29, -19, -28, -2, 13};
  // {11111110 11111101 11111111 11001011 11011110 11111111 01111011 10111011 01110111 10110011 10111011 11111101 10111011 11111111 10111101 10101111 111111}
  public static final byte[] GRPSPLIT17 = new byte[] {127, -65, -1, -45, 123, -1, -34, -35, -18, -51, -35, -65, -35, -1, -67, -11, 63};
  // {11100101 01010111 01100111 01100110 00010111 11011111 11011101 10110000 01110111 11110111 01110101 11000011 11110011 01010010 11111100 11111111 111001}
  public static final byte[] GRPSPLIT18 = new byte[] {-89, -22, -26, 102, -24, -5, -69, 13, -18, -17, -82, -61, -49, 74, 63, -1, 39};
  // {...3485 0-bits... }
  public static final byte[] GRPSPLIT19 = new byte[] {73, -96};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT20 = new byte[] {1, 0, 0, 0, 0, 0, 0, 8, 64, 0, 2, 0, 64, 32, 0, 0, 0, 0, 2, 0, 32, 0, 0, 1, 1, 0, 8, 0, 0, 32, 1, 0, 0, 0, 4, 0, 0, 0, 0, 16, 0, 0, 0, 0, 1, 2, 1, 13, 108, 25, -121, 15, -116, 22, -48, 4, 41, 45, -98, -114, -81, -112, 118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -128, 64, 0, 64, 4, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 32, 16, 8, 32, 0, 0, 0, 0, 32, 0, 0, 0, 64, 0, 0, 0, 0, 0};
  // {01000001 00000000 00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00011000 00000001 01000000 00000000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {-126, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, -128, 24, -128, 2, 0, 0};
  // {00000000 00000000 00010000 00000000 01100000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000100 11000000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 8, 0, 6, 0, 0, 0, 0, 0, 0, 2, 32, 3, 0, 1, 0};
  // {01000010 00100100 00011000 10100000}
  public static final byte[] GRPSPLIT23 = new byte[] {66, 36, 24, 5};
}


class gbm_pojo_test_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_33_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.11800318f : 
                        -0.045868378f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.06956452f : 
                        -0.010779524f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                        -0.027931804f : 
                        6.002332E-4f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        -0.1209983f : 
                        0.05733045f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.19159175f : 
                        -0.053550296f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.05054452f : 
                        0.030259252f)) : 
                 (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3012.5f ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.033671826f : 
                        0.018890861f) : 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(488, 3013, data[4]) && !GenModel.bitSetContains(GRPSPLIT14, 488, 3013, data[4])) ? 
                        -0.18677665f : 
                        0.047430504f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.06355019f : 
                        -0.019631168f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.010320785f : 
                        0.0445016f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                        -0.10191497f : 
                        -0.014216913f) : 
                     (data[4 /* TailNum */] <1336.5f ? 
                        -0.006437263f : 
                        0.019058697f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                        -0.12581009f : 
                        -0.07216593f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        -0.012473868f : 
                        0.01768399f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.009424289f : 
                        0.014862638f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                        0.025113624f : 
                        0.06430996f)))));
    return pred;
  } // constant pool size = 588B, number of visited nodes = 31, static init size = 2772B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {00111000 00100100 00001111 01101111 00100011 00010101 11110110 00000010 01000000 01000110 00000101 10000000 10000110 11010001 11000001 10100000 0010}
  public static final byte[] GRPSPLIT1 = new byte[] {28, 36, -16, -10, -60, -88, 111, 64, 2, 98, -96, 1, 97, -117, -125, 5, 4};
  // {11110000 01011010 00011010 01011110}
  public static final byte[] GRPSPLIT2 = new byte[] {15, 90, 88, 122};
  // {11111101 11101010 00101110 10100111 01111111 11110011 11010111 11001111 00111111 11111111 11111011 01010101 11111111 11100001 11111111 11111111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-65, 87, 116, -27, -2, -49, -21, -13, -4, -1, -33, -86, -1, -121, -1, -1, 63};
  // {00000000 00000000 00100000 00000000 11000000 10000000 00000000 00100000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 4, 0, 3, 1, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0};
  // {10111110 01101101 00111111 11111111 11100111 11111111 11110111 11011011 01111111 01011110 10101101 11100011 11011110 11110101 11110001 11111011 1010}
  public static final byte[] GRPSPLIT5 = new byte[] {125, -74, -4, -1, -25, -1, -17, -37, -2, 122, -75, -57, 123, -81, -113, -33, 5};
  // {10011010 00010101 10101001 00010010 11010000 00001000 10000001 00000000 01000101 01100000 01001111 00101001 00000000 00010000 00000100 01000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {89, -88, -107, 72, 11, 16, -127, 0, -94, 6, -14, -108, 0, 8, 32, 2, 0};
  // {01000011 10010001 01010000 00000000 01000000 00100000 00000000 00100001 10000001 10000001 01110010 01001100 00100001 00000010 00011010 00001010 0101}
  public static final byte[] GRPSPLIT7 = new byte[] {-62, -119, 10, 0, 2, 4, 0, -124, -127, -127, 78, 50, -124, 64, 88, 80, 10};
  // {10111111 11111111 11111111 11111111 11111111 11111101 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11011111 11111111 1111}
  public static final byte[] GRPSPLIT8 = new byte[] {-3, -1, -1, -1, -1, -65, -1, -1, -1, -1, -5, -1, -1, -1, -5, -1, 15};
  // {01000101 11101110 11111111 10001011 11001111 01011111 10111111 00111111 01111110 10111001 11100011 01010101 10111110 01101111 11011011 10101111 000011}
  public static final byte[] GRPSPLIT9 = new byte[] {-94, 119, -1, -47, -13, -6, -3, -4, 126, -99, -57, -86, 125, -10, -37, -11, 48};
  // {00011101 10110000 01101010 11100010}
  public static final byte[] GRPSPLIT10 = new byte[] {-72, 13, 86, 71};
  // {11001101 11101111 11111111 11111111 11111111 01111111 11111111 01111111 11111111 11111111 11111111 11111111 11111110 11101111 11111011 11111111 011111}
  public static final byte[] GRPSPLIT11 = new byte[] {-77, -9, -1, -1, -1, -2, -1, -2, -1, -1, -1, -1, 127, -9, -33, -1, 62};
  // {11101111 11111111 11110101 11111000 11111111 11111111 01101101 11111101 10111111 11111111 11111110 11111111 11111011 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-9, -1, -81, 31, -1, -1, -74, -65, -3, -1, 127, -1, -33, -1, -1, -1, 15};
  // {01111101 10110100 10011110 01011010}
  public static final byte[] GRPSPLIT13 = new byte[] {-66, 45, 121, 90};
  // {...3013 0-bits... }
  public static final byte[] GRPSPLIT14 = new byte[] {-1, 119, -1, -33, -1, -2, -1, -1, -2, -17, -3, -3, -9, -3, -1, -5, -1, -2, -33, -1, -17, -9, -2, 126, -2, -1, -3, 127, -9, -65, -26, 127, -65, -11, -1, -3, -97, -3, -1, -1, -1, -1, -33, -2, 127, -33, -1, -70, -3, -2, 123, -65, -3, -1, -65, -73, -1, -33, -1, -1, -1};
  // {11011110 01010001 10010110 10010010 00111101 10100000 11100011 11110100 10011111 11011000 10001001 01111111 11111011 00100010 00001111 00111010 0001}
  public static final byte[] GRPSPLIT15 = new byte[] {123, -118, 105, 73, -68, 5, -57, 47, -7, 27, -111, -2, -33, 68, -16, 92, 8};
  // {11101100 11110110 11011111 11010111 10001010 11110110 11101011 11111011 10001111 00111011 10111111 10101011 11111010 10110110 11111010 10101111 111111}
  public static final byte[] GRPSPLIT16 = new byte[] {55, 111, -5, -21, 81, 111, -41, -33, -15, -36, -3, -43, 95, 109, 95, -11, 63};
  // {11001100 00101011 00100100 11101010}
  public static final byte[] GRPSPLIT17 = new byte[] {51, -44, 36, 87};
  // {00000000 00100110 00100001 00001101 10000010 00010010 00011000 00000010 01000000 00000000 00100010 10000000 00000000 00010001 11110000 00000000 0000}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 100, -124, -80, 65, 72, 24, 64, 2, 0, 68, 1, 0, -120, 15, 0, 0};
  // {00000000 10000000 00000000 01001000 00000000 00000000 00000000 00000010 00000000 00100010 01000000 10000000 00000100 00000000 10010000 00000001 0010}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 1, 0, 18, 0, 0, 0, 64, 0, 68, 2, 1, 32, 0, 9, -128, 4};
  // {11111111 11010011 10010111 01110110}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -53, -23, 110};
  // {10111111 11111111 11111111 10111111 11111111 11111111 11111111 11011111 11111111 11110111 11110011 11010111 11111111 11111101 11101111 11011011 111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-3, -1, -1, -3, -1, -1, -1, -5, -1, -17, -49, -21, -1, -65, -9, -37, 63};
  // {10101110 11110101 10100110 11111000}
  public static final byte[] GRPSPLIT22 = new byte[] {117, -81, 101, 31};
  // {11101111 01111011 01111111 11111111 11111111 11111111 01111101 01100111 11111111 11111100 11011101 11101111 11011101 10111110 11111111 11111101 101101}
  public static final byte[] GRPSPLIT23 = new byte[] {-9, -34, -2, -1, -1, -1, -66, -26, -1, 63, -69, -9, -69, 125, -1, -65, 45};
  // {11111111 01111111 01111111 11111111 11111111 11111111 01111111 01110111 11111111 11111100 11111111 11111111 11111111 10111111 11111111 11111101 111111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -2, -2, -1, -1, -1, -2, -18, -1, 63, -1, -1, -1, -3, -1, -65, 63};
  // {01000010 00010011 00001101 10000000 01010000 00000110 01100000 00000000 00000000 00100000 10000000 00000010 00001100 10110000 01000110 11000101 100001}
  public static final byte[] GRPSPLIT25 = new byte[] {66, -56, -80, 1, 10, 96, 6, 0, 0, 4, 1, 64, 48, 13, 98, -93, 33};
  // {10111110 10001000 10001010 00100001 00011000 10010000 10000100 00001001 01010110 01100110 00000001 00110000 11100010 01000011 01001001 01000000 011110}
  public static final byte[] GRPSPLIT26 = new byte[] {125, 17, 81, -124, 24, 9, 33, -112, 106, 102, -128, 12, 71, -62, -110, 2, 30};
  // {11111110 11101011 11111011 01111111 01111000 11011101 10010111 00101111 11110111 11110111 01110001 10110100 11111110 01010111 11111111 01110100 011110}
  public static final byte[] GRPSPLIT27 = new byte[] {127, -41, -33, -2, 30, -69, -23, -12, -17, -17, -114, 45, 127, -22, -1, 46, 30};
  // {11010011 10111111 01111101 10111110}
  public static final byte[] GRPSPLIT28 = new byte[] {-53, -3, -66, 125};
}


class gbm_pojo_test_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_34_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.13863957f : 
                        -0.11918631f) : 
                    -0.035928197f) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.098109044f : 
                        0.04953153f) : 
                    0.10489943f)) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                -0.009101417f : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        -0.018161245f : 
                        0.12095094f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        0.12206136f : 
                        0.14867894f)))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3484.5f ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.050020933f : 
                        -0.008137646f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        -0.05141976f : 
                        -0.0024245528f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.010242923f : 
                        0.03766512f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                        0.014382109f : 
                        0.066957615f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                 (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[1])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.06526335f : 
                        -0.009116893f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.04963078f : 
                        0.03747568f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        -0.06615141f : 
                        0.004284595f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        -0.001158571f : 
                        0.036594935f)))));
    return pred;
  } // constant pool size = 408B, number of visited nodes = 26, static init size = 1812B
  // {00000000 10000100 10001110 11000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 33, 113, 3};
  // {10011100 01000000 00111110 10110000}
  public static final byte[] GRPSPLIT1 = new byte[] {57, 2, 124, 13};
  // {00000010 01001000 00000000 00000000}
  public static final byte[] GRPSPLIT2 = new byte[] {64, 18, 0, 0};
  // {11111111 01001101 11111111 10110010}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -78, -1, 77};
  // {00001101 00010000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 8, 0, 0};
  // {00000000 00000000 00100000 10000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 4, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0};
  // {11111101 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 11011111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -1, -1, -1, -17, -1, -1, -1, -1, -3, -1, -1, -5, -1, -1, -1, 15};
  // {10000001 10100101 00000000 00110000 00000000 00000000 00000010 01000000 00000000 00001000 10001000 00000000 00010100 10010110 00100000 00010100 000100}
  public static final byte[] GRPSPLIT7 = new byte[] {-127, -91, 0, 12, 0, 0, 64, 2, 0, 16, 17, 0, 40, 105, 4, 40, 8};
  // {11111111 01111111 10011111 01111110}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -2, -7, 126};
  // {00000000 00000100 00000000 00001000 00000000 00000010 00000000 00000000 00000000 00001000 00000000 00000000 00000000 10000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 32, 0, 16, 0, 64, 0, 0, 0, 16, 0, 0, 0, 1, 0, 0, 0};
  // {00000000 00110100 00000010 00110000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 44, 64, 12};
  // {10101110 10010011 10000111 00100111 00110110 10111011 01110101 10110001 11111110 10111111 11011111 00110111 11111001 10000111 01110111 11010001 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {117, -55, -31, -28, 108, -35, -82, -115, 127, -3, -5, -20, -97, -31, -18, -117, 63};
  // {10010110 01001011 00000001 10000000}
  public static final byte[] GRPSPLIT12 = new byte[] {105, -46, -128, 1};
  // {01111111 11100111 01111111 11111111 11111101 10001001 11111111 11111101 10111101 11010011 11000011 11111111 11111101 11110110 11111111 10111111 1011}
  public static final byte[] GRPSPLIT13 = new byte[] {-2, -25, -2, -1, -65, -111, -1, -65, -67, -53, -61, -1, -65, 111, -1, -3, 13};
  // {00000000 10010001 01100010 10000001 00101010 00110100 01000001 00000010 00000001 01101000 00101000 01011010 00000010 00000001 00100101 00101010 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, -119, 70, -127, 84, 44, -126, 64, -128, 22, 20, 90, 64, -128, -92, 84, 0};
  // {00001010 01001110 01100000 01011000 00010000 01000000 10000001 01000000 00000101 00010000 10100000 10001010 00000000 00100001 00000000 00100000 001000}
  public static final byte[] GRPSPLIT15 = new byte[] {80, 114, 6, 26, 8, 2, -127, 2, -96, 8, 5, 81, 0, -124, 0, 4, 4};
  // {01010001 00100001 11000000 00100001 10011101 00000110 10000100 00001001 00000101 01011010 00000000 00000010 11010110 01010000 10000100 01000100 000000}
  public static final byte[] GRPSPLIT16 = new byte[] {-118, -124, 3, -124, -71, 96, 33, -112, -96, 90, 0, 64, 107, 10, 33, 34, 0};
  // {11110110 11010010 01000110 01001110}
  public static final byte[] GRPSPLIT17 = new byte[] {111, 75, 98, 114};
  // {00101000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {20, 0, 0, 0};
  // {11111101 00111011 11100111 11110110 11111111 11111101 11111011 11110111 11010111 00110110 01101111 11011111 11011011 10111101 11011011 11111010 1001}
  public static final byte[] GRPSPLIT19 = new byte[] {-65, -36, -25, 111, -1, -65, -33, -17, -21, 108, -10, -5, -37, -67, -37, 95, 9};
  // {01011101 11111011 01110010 11110111 11011111 11011110 11110110 11011111 01111111 11100010 10011110 11111110 10000010 00011111 11111111 01111011 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-70, -33, 78, -17, -5, 123, 111, -5, -2, 71, 121, 127, 65, -8, -1, -34, 15};
  // {10111100 11011011 10011110 01111011 11100111 01110110 10101110 10111011 11011110 11111101 10011011 10001011 11100001 11111011 11011111 11100001 1100}
  public static final byte[] GRPSPLIT21 = new byte[] {61, -37, 121, -34, -25, 110, 117, -35, 123, -65, -39, -47, -121, -33, -5, -121, 3};
  // {11111111 11111111 00101011 10111111 01111111 11111101 11110111 10011111 10111111 01111011 11111110 10111001 11111111 11111111 01111110 11111111 111111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -44, -3, -2, -65, -17, -7, -3, -34, 127, -99, -1, -1, 126, -1, 63};
  // {11111111 10001011 11011111 11111111 01101111 01110011 11101111 01101011 00101110 11111100 11101111 01111101 10111110 01000101 11101010 11101011 100100}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -47, -5, -1, -10, -50, -9, -42, 116, 63, -9, -66, 125, -94, 87, -41, 9};
}


class gbm_pojo_test_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_35_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.11396178f : 
                        -0.05113418f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                        0.0023429098f : 
                        0.15602794f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                        -0.016803015f : 
                        0.16976777f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        0.068029635f : 
                        0.1976662f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.06309898f : 
                        -0.012875023f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        0.01287415f : 
                        0.08486258f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.12793761f : 
                        -0.024062365f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        0.013658535f : 
                        0.063725404f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[2])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.04006195f : 
                        -0.005497599f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        -0.012296405f : 
                        0.014518481f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.07166596f : 
                        0.030921595f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.03678923f : 
                        0.13371216f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                        -0.052780073f : 
                        -0.011349934f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        0.0023459415f : 
                        0.058157522f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT29, 132, 0, data[5])) ? 
                        -0.035273787f : 
                        0.008204327f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT30, 132, 0, data[5])) ? 
                        0.026277201f : 
                        0.09548174f)))));
    return pred;
  } // constant pool size = 580B, number of visited nodes = 31, static init size = 2724B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {01111101 11111010 01011011 11011110}
  public static final byte[] GRPSPLIT1 = new byte[] {-66, 95, -38, 123};
  // {10110010 01000100 00000110 00100001 01000101 10000001 01000110 01100000 00000001 01001110 00101101 00100000 01000010 11000000 11000001 10000010 0111}
  public static final byte[] GRPSPLIT2 = new byte[] {77, 34, 96, -124, -94, -127, 98, 6, -128, 114, -76, 4, 66, 3, -125, 65, 14};
  // {01000000 01110000 10000100 10000010 00010100 00000010 10010010 00000010 00001000 00000100 00000010 00000000 00100001 00000000 10000010 01110001 001010}
  public static final byte[] GRPSPLIT3 = new byte[] {2, 14, 33, 65, 40, 64, 73, 64, 16, 32, 64, 0, -124, 0, 65, -114, 20};
  // {01011101 01111101 11101110 11111111 11111111 01111111 11110111 00000111 01111101 11110101 00111011 11101101 11111101 10111000 10111010 11111111 101111}
  public static final byte[] GRPSPLIT4 = new byte[] {-70, -66, 119, -1, -1, -2, -17, -32, -66, -81, -36, -73, -65, 29, 93, -1, 61};
  // {01000000 00000000 00000000 10000010 00000000 00000010 10010010 00000000 00000000 00000000 00000010 00000000 00000001 00000000 00000000 01110000 000000}
  public static final byte[] GRPSPLIT5 = new byte[] {2, 0, 0, 65, 0, 64, 73, 0, 0, 0, 64, 0, -128, 0, 0, 14, 0};
  // {00000000 00000010 00000000 01000000 01100000 00100010 00001000 00000000 00010001 00001000 01001000 01010100 00000000 00001000 00000000 01000000 000000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 64, 0, 2, 6, 68, 16, 0, -120, 16, 18, 42, 0, 16, 0, 2, 0};
  // {10110000 00000000 00000000 00000000 00000001 00000000 01000000 00000000 00000000 01000110 00000100 00000000 01000010 00000000 00000001 00000000 0011}
  public static final byte[] GRPSPLIT7 = new byte[] {13, 0, 0, 0, -128, 0, 2, 0, 0, 98, 32, 0, 66, 0, -128, 0, 12};
  // {00010000 00000000 00000000 00000001 00000100 10000000 00000000 00000000 00000000 00001000 00001000 00100000 00000000 00000000 11000000 00000000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {8, 0, 0, -128, 32, 1, 0, 0, 0, 16, 16, 4, 0, 0, 3, 0, 0};
  // {00000000 10100101 01001101 01101101 00100011 00010101 01000000 00000010 11001000 01000100 01010100 10000100 10000101 11010001 11010001 00101001 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -91, -78, -74, -60, -88, 2, 64, 19, 34, 42, 33, -95, -117, -117, -108, 0};
  // {11010010 00010101 00001100 00000010 01000000 00001000 10000101 01100001 00000110 00110010 00000101 00010001 00000010 01000001 00000100 01000000 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {75, -88, 48, 64, 2, 16, -95, -122, 96, 76, -96, -120, 64, -126, 32, 2, 0};
  // {11111111 01011101 11111111 10110111 11110111 11011011 11110111 11100101 10111111 11111111 11111111 11111111 11111111 11100111 11111111 11111111 011110}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -70, -1, -19, -17, -37, -17, -89, -3, -1, -1, -1, -1, -25, -1, -1, 30};
  // {00100001 01001000 00010010 00000110}
  public static final byte[] GRPSPLIT12 = new byte[] {-124, 18, 72, 96};
  // {11011111 11101111 11111111 10111111 10101111 11111111 11111011 01111111 11101111 11111111 11100011 11110111 10011111 01111111 11111011 10101111 110111}
  public static final byte[] GRPSPLIT13 = new byte[] {-5, -9, -1, -3, -11, -1, -33, -2, -9, -1, -57, -17, -7, -2, -33, -11, 59};
  // {00001001 01111000 01000011 00000100}
  public static final byte[] GRPSPLIT14 = new byte[] {-112, 30, -62, 32};
  // {00000001 00101010 10000001 00000001 10000101 10000011 10010000 00100010 00100100 11011010 01100000 00000000 00000100 00110010 01000000 00100001 010000}
  public static final byte[] GRPSPLIT15 = new byte[] {-128, 84, -127, -128, -95, -63, 9, 68, 36, 91, 6, 0, 32, 76, 2, -124, 2};
  // {11010110 01010000 11000110 10000000 00111101 10100000 11000011 11100100 10011111 01001000 10001001 01111010 11111011 00100010 00001111 00111010 0001}
  public static final byte[] GRPSPLIT16 = new byte[] {107, 10, 99, 1, -68, 5, -61, 39, -7, 18, -111, 94, -33, 68, -16, 92, 8};
  // {01000100 00110100 00000000 11010000 00000000 00100110 00100001 00000000 11000000 00000001 10000000 00001010 10000000 10010000 01011000 00100000 000000}
  public static final byte[] GRPSPLIT17 = new byte[] {34, 44, 0, 11, 0, 100, -124, 0, 3, -128, 1, 80, 1, 9, 26, 4, 0};
  // {01001111 01000000 00000000 00000000}
  public static final byte[] GRPSPLIT18 = new byte[] {-14, 2, 0, 0};
  // {11011111 11011001 11110111 11111110 10111101 11110101 11101111 11111101 10111111 11111111 11101011 01111111 11111111 11110110 11011111 00111011 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-5, -101, -17, 127, -67, -81, -9, -65, -3, -1, -41, -2, -1, 111, -5, -36, 15};
  // {00000001 00000011 01010000 00000000 00000000 01000000 10001000 01000000 00000000 00001000 00001000 10100000 01001100 00100000 10000010 00000000 100110}
  public static final byte[] GRPSPLIT20 = new byte[] {-128, -64, 10, 0, 0, 2, 17, 2, 0, 16, 16, 5, 50, 4, 65, 0, 25};
  // {11011001 01000010 10000100 01100100}
  public static final byte[] GRPSPLIT21 = new byte[] {-101, 66, 33, 38};
  // {11111111 11111111 11011111 11111111 10111111 10111101 11111111 11111110 11111111 11111111 11111111 11111111 11111111 00111111 10111111 11111111 1111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -1, -5, -1, -3, -67, -1, 127, -1, -1, -1, -1, -1, -4, -3, -1, 15};
  // {11111111 11101111 11111111 10111111 11111111 11111101 11011111 11111111 10111111 11111110 11111111 11111111 11111111 11111111 11111111 11011111 111111}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, -9, -1, -3, -1, -65, -5, -1, -3, 127, -1, -1, -1, -1, -1, -5, 63};
  // {00100000 01110101 10100110 11011000}
  public static final byte[] GRPSPLIT24 = new byte[] {4, -82, 101, 27};
  // {11101110 01000001 00111111 11111101 01111111 11011111 01111111 00001101 10111111 11111000 01010001 01101110 10111100 10101111 11010110 11011101 101111}
  public static final byte[] GRPSPLIT25 = new byte[] {119, -126, -4, -65, -2, -5, -2, -80, -3, 31, -118, 118, 61, -11, 107, -69, 61};
  // {00110110 11110111 10100111 11111110}
  public static final byte[] GRPSPLIT26 = new byte[] {108, -17, -27, 127};
  // {00100000 00000000 00001001 00000000 00000000 00000000 00100110 00001000 00000010 00100000 00000000 00001010 00000000 00100000 01000100 11000001 000001}
  public static final byte[] GRPSPLIT27 = new byte[] {4, 0, -112, 0, 0, 0, 100, 16, 64, 4, 0, 80, 0, 4, 34, -125, 32};
  // {11111111 10101011 11001010 00111111 00011001 11011101 10011101 00100111 01110111 11110110 01111000 11110100 11011110 01000011 11111111 01100100 101110}
  public static final byte[] GRPSPLIT28 = new byte[] {-1, -43, 83, -4, -104, -69, -71, -28, -18, 111, 30, 47, 123, -62, -1, 38, 29};
  // {11111111 11111111 01111101 11111111 11000111 11011111 11111101 01011111 11111111 11111111 11111111 11111111 01101111 11011111 11111011 11111101 1111}
  public static final byte[] GRPSPLIT29 = new byte[] {-1, -1, -66, -1, -29, -5, -65, -6, -1, -1, -1, -1, -10, -5, -33, -65, 15};
  // {10000000 00000000 10000010 00000000 00011001 00000000 00000000 00000000 10000000 00000000 00000000 00000000 00000001 00000000 00000101 00100000 0001}
  public static final byte[] GRPSPLIT30 = new byte[] {1, 0, 65, 0, -104, 0, 0, 0, 1, 0, 0, 0, -128, 0, -96, 4, 8};
}


class gbm_pojo_test_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_36_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                    -0.20789398f : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.0825324f : 
                        -0.02503754f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.05347258f : 
                        0.0058224923f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT6, 96, 0, data[3])) ? 
                        0.12248892f : 
                        0.18851756f))) : 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.07806514f : 
                        0.031164445f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT10, 96, 0, data[3])) ? 
                        -0.0036012705f : 
                        0.06615207f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 96, 0, data[3])) ? 
                        -0.04857337f : 
                        0.046055466f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 96, 0, data[3])) ? 
                        0.0400158f : 
                        0.12243379f)))) : 
         (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.013740451f : 
                        0.008151757f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.01378234f : 
                        0.008822706f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        -0.0762515f : 
                        -0.0053637335f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[1])) ? 
                        0.01020388f : 
                        0.037776496f))) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.08425314f : 
                        -0.019437147f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        -0.013774256f : 
                        0.054243624f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.015858723f : 
                        0.013051128f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT28, 132, 0, data[5])) ? 
                        0.028636623f : 
                        0.057051387f)))));
    return pred;
  } // constant pool size = 515B, number of visited nodes = 30, static init size = 2358B
  // {11101111 10011011 01000010 11010111 01011010 00100001 10000011 01100101 01110101 10000000 00110011 11000010}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -39, 66, -21, 90, -124, -63, -90, -82, 1, -52, 67};
  // {01111111 11011111 11111111 11111110 10101110 11111111 11111111 11111111 01110011 11111010 01111111 01111011 10101011 01110111 11111001 11111111 110111}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -5, -1, 127, 117, -1, -1, -1, -50, 95, -2, -34, -43, -18, -97, -1, 59};
  // {11101111 11111011 11101111 01111101 11111111 11011111 11111101 11111101 11111111 11111111 11111101 11110111 11011111 11111111 11111111 11110111 1111}
  public static final byte[] GRPSPLIT2 = new byte[] {-9, -33, -9, -66, -1, -5, -65, -65, -1, -1, -65, -17, -5, -1, -1, -17, 15};
  // {11001000 10001010 01000010 11000010}
  public static final byte[] GRPSPLIT3 = new byte[] {19, 81, 66, 67};
  // {00010000 00010100 00000000 11000000 00000000 00000000 10000000 01000001 00000001 01001000 00001000 00000001 00100010 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT4 = new byte[] {8, 40, 0, 3, 0, 0, 1, -126, -128, 18, 16, -128, 68, 0, 32, 0, 0};
  // {00000110 11001010 10101011 11101000}
  public static final byte[] GRPSPLIT5 = new byte[] {96, 83, -43, 23};
  // {00000000 00000000 00001000 00000000 00000000 00000000 00001000 10000000 00000000 00001011 00000000 00100000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 0, 16, 0, 0, 0, 16, 1, 0, -48, 0, 4};
  // {11110001 00111010 00001100 10100000}
  public static final byte[] GRPSPLIT7 = new byte[] {-113, 92, 48, 5};
  // {11111111 11111101 11111111 11110111 11011011 11111111 11101111 10111111 11110111 11111011 11111111 11111011 10111011 11110110 11111111 11111111 111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -65, -1, -17, -37, -1, -9, -3, -17, -33, -1, -33, -35, 111, -1, -1, 63};
  // {00000000 00000000 00000000 00000001 00101000 00000000 00000000 10000000 00000000 01001000 00000000 00000000 00000000 00100000 10101000 00000000 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 0, -128, 20, 0, 0, 1, 0, 18, 0, 0, 0, 4, 21, 0, 0};
  // {11111111 11111111 10111111 11101110 11110111 11111111 11111100 11111011 11011111 01111111 11011100 11111101}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -1, -3, 119, -17, -1, 63, -33, -5, -2, 59, -65};
  // {01111101 10111110 10111111 01111101 10110111 11111111 11111101 01111001 11111110 11110111 11111111 11111110 11111111 01111111 11011110 01111101 1111}
  public static final byte[] GRPSPLIT11 = new byte[] {-66, 125, -3, -66, -19, -1, -65, -98, 127, -17, -1, 127, -1, -2, 123, -66, 15};
  // {10000001 10010000 00000000 10000100 00000000 00100000 10000000 00100100 01000000 00000000 00010000 10000000}
  public static final byte[] GRPSPLIT12 = new byte[] {-127, 9, 0, 33, 0, 4, 1, 36, 2, 0, 8, 1};
  // {11111110 11111101 11111101 11111100 11111111 11111111 11111101 11111111 11111111 01111111 11001110 11111101}
  public static final byte[] GRPSPLIT13 = new byte[] {127, -65, -65, 63, -1, -1, -65, -1, -1, -2, 115, -65};
  // {11001100 01100000 10001111 10000010 00100000 10010010 10100001 00000001 00100100 10110101 01000001 01110001 11100000 00001011 01010110 01100000 001110}
  public static final byte[] GRPSPLIT14 = new byte[] {51, 6, -15, 65, 4, 73, -123, -128, 36, -83, -126, -114, 7, -48, 106, 6, 28};
  // {00011110 00000000 11000100 00000000 00111001 00110100 01110011 00000100 10010111 01000100 01000011 00011001 00001011 11000100 01010011 00101010 1010}
  public static final byte[] GRPSPLIT15 = new byte[] {120, 0, 35, 0, -100, 44, -50, 32, -23, 34, -62, -104, -48, 35, -54, 84, 5};
  // {01111100 11011100 00000010 01110000}
  public static final byte[] GRPSPLIT16 = new byte[] {62, 59, 64, 14};
  // {10100000 00010100 00010010 01001000 00000000 00000001 10000100 00101000 01000000 00000010 10110000 00100000 00100100 00000000 00101100 00010001 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {5, 40, 72, 18, 0, -128, 33, 20, 2, 64, 13, 4, 36, 0, 52, -120, 0};
  // {01000001 11100001 00001011 10100111 11000000 10000000 00000000 00000010 00000000 10100001 00001000 01000010 11010000 00110010 10000000 00000000 0001}
  public static final byte[] GRPSPLIT18 = new byte[] {-126, -121, -48, -27, 3, 1, 0, 64, 0, -123, 16, 66, 11, 76, 1, 0, 8};
  // {10000011 01110111 11111111 01011110}
  public static final byte[] GRPSPLIT19 = new byte[] {-63, -18, -1, 122};
  // {11111110 11111101 11111111 11111111 01111100 11111111 11111111 10001111 11111111 11111111 11010111 01110111 11111110 11011111 01111111 11111011 011111}
  public static final byte[] GRPSPLIT20 = new byte[] {127, -65, -1, -1, 62, -1, -1, -15, -1, -1, -21, -18, 127, -5, -2, -33, 62};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT21 = new byte[] {65, 0, 0, 0};
  // {11100101 10101111 10111111 11111111 11000111 00011110 01001100 10111110 11101010 11101111 10011010 11100111 11111111 10011111 10111011 11111001 1011}
  public static final byte[] GRPSPLIT22 = new byte[] {-89, -11, -3, -1, -29, 120, 50, 125, 87, -9, 89, -25, -1, -7, -35, -97, 13};
  // {10101110 00101010 00111110 10111110}
  public static final byte[] GRPSPLIT23 = new byte[] {117, 84, 124, 125};
  // {00001010 00000000 01000000 00000000 00000000 00000001 10010011 00000001 00000001 00000000 00000101 00001000 00000000 00100000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {80, 0, 2, 0, 0, -128, -55, -128, -128, 0, -96, 16, 0, 4, 0, 0, 0};
  // {00000000 00100000 00000000 00000000 00000000 00010000 10000000 00000001 00000000 00000000 00000000 01000000 11000000 00001001 00000000 00100000 000010}
  public static final byte[] GRPSPLIT25 = new byte[] {0, 4, 0, 0, 0, 8, 1, -128, 0, 0, 0, 2, 3, -112, 0, 4, 16};
  // {10010101 10001101 10000110 01111010}
  public static final byte[] GRPSPLIT26 = new byte[] {-87, -79, 97, 94};
  // {11111111 10011111 01111111 01111101 11111111 11111111 11111111 11111110 11111111 11111111 11111110 10101111 11011111 11111101 11111011 11011111 110101}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, -7, -2, -66, -1, -1, -1, 127, -1, -1, 127, -11, -5, -65, -33, -5, 43};
  // {00000000 00000000 00000000 01000000 11000100 00010000 00001000 00000000 01000000 00001100 00001010 11100000 00100000 00000000 00001000 10001000 0000}
  public static final byte[] GRPSPLIT28 = new byte[] {0, 0, 0, 2, 35, 8, 16, 0, 2, 48, 80, 7, 4, 0, 16, 17, 0};
}


class gbm_pojo_test_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_37_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                    -0.14284475f : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[4])) ? 
                        -0.12523362f : 
                        0.02079018f)) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.09806409f : 
                        0.039185453f) : 
                    0.113443814f)) : 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                0.016192693f : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        0.11352817f : 
                        0.119125925f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        0.12160963f : 
                        0.12801903f)))) : 
         (data[4 /* TailNum */] <811.5f ? 
             (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(784, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT10, 784, 28, data[4])) ? 
                 (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(784, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT11, 784, 28, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.21308197f : 
                        -0.11402538f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                        -0.06817703f : 
                        0.03753124f)) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(784, 28, data[4]) || (GenModel.bitSetIsInRange(784, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT14, 784, 28, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                        7.41738E-4f : 
                        0.07883527f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(784, 28, data[4]) || (GenModel.bitSetIsInRange(784, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT16, 784, 28, data[4])) ? 
                        0.105578005f : 
                        0.18024029f))) : 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT17, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.021638546f : 
                        6.401917E-4f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.0036211412f : 
                        0.0147941215f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        -0.01726137f : 
                        0.01222862f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        0.008700108f : 
                        0.03883394f)))));
    return pred;
  } // constant pool size = 745B, number of visited nodes = 26, static init size = 3834B
  // {00000000 00000000 10001110 10000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 113, 1};
  // {10011100 01101001 00111100 10110000}
  public static final byte[] GRPSPLIT1 = new byte[] {57, -106, 60, 13};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00001100 00000000 00100000 00000000 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 48, 0, 4, 0, 0};
  // {00100011 01001000 00000000 00000000}
  public static final byte[] GRPSPLIT3 = new byte[] {-60, 18, 0, 0};
  // {00001101 10010100 00000000 01000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 41, 0, 2};
  // {00000000 00000000 00100000 10000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, 4, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0};
  // {11111101 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 10111111 11110111 11111111 11111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {-65, -1, -1, -1, -17, -1, -1, -1, -1, -3, -17, -1, -1, -1, -1, -1, 15};
  // {10000000 10100101 00000000 00110000 00000000 00100000 00000010 01001000 00000000 00001000 10000000 00000000 00010100 00010110 00100000 00010100 000100}
  public static final byte[] GRPSPLIT7 = new byte[] {1, -91, 0, 12, 0, 4, 64, 18, 0, 16, 1, 0, 40, 104, 4, 40, 8};
  // {11101111 11011001 11010100 10001110}
  public static final byte[] GRPSPLIT8 = new byte[] {-9, -101, 43, 113};
  // {00000000 11000100 00000001 00001000 00000000 00000010 00000000 00000000 00000000 00001000 00000000 00000000 10000000 10000000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 35, -128, 16, 0, 64, 0, 0, 0, 16, 0, 0, 1, 1, 0, 1, 0};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT10 = new byte[] {28, -38, -33, -9, 104, 105, -113, -23, 115, -113, -65, 118, -4, -3, -68, -95, -109, -43, -18, 80, -61, 53, -123, 117, -79, -101, 95, -8, 29, 78, -33, -7, 47, -3, 78, -9, 47, -73, 124, 63, -33, -108, -7, -46, -113, 69, -82, -6, -75, 23, -3, -105, 115, 71, -15, 11, 79, 91, -19, 122, -7, 63, 35, -41, -31, -116, -2, -35, -45, -33, -35, 32, -13, -81, 58, 98, 125, -20, 82, 47, -26, -93, 79, -18, -66, -79, 117, 95, 63, 67, -17, 57, 127, 119, -127, -98, 72, -99};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {28, -6, -33, -9, -5, -3, -97, -23, 115, -49, -65, 126, -4, -1, -4, -15, -9, -11, -17, -15, -29, -75, -65, -3, -9, -5, 127, -4, 95, 95, -33, -1, -81, -3, 79, -9, 47, -9, 125, -65, -33, -66, -3, -13, -33, 101, -1, -1, -65, -65, -3, -97, -13, -41, -9, -33, 95, -37, -3, -5, -5, -1, -69, -41, -29, -2, -2, -33, -9, -1, -33, -32, -5, -1, -1, -1, -1, -1, -1, -1, -1, -9, -33, -17, -65, -1, -11, -1, -65, -1, -17, -5, -1, 119, -91, -2, -35, -1};
  // {00000001 00000000 01100010 00000000 10000000 00000000 00011000 00000011 00000001 01001000 00101000 10000000 10001100 00000001 00101000 10000000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {-128, 0, 70, 0, 1, 0, 24, -64, -128, 18, 20, 1, 49, -128, 20, 1, 0};
  // {01000001 11000000 00000000 01000010 11000100 00000000 00000001 00000011 00001101 01000011 10001000 10100010 01000000 10000000 00000100 01000000 000110}
  public static final byte[] GRPSPLIT13 = new byte[] {-126, 3, 0, 66, 35, 0, -128, -64, -80, -62, 17, 69, 2, 1, 32, 2, 24};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT14 = new byte[] {-1, -1, -17, 125, -73, -65, -5, 127, -35, -2, -41, -1, -89, -9, -1, 95, 124, 63, 127, -81, -4, -33, 122, -2, -18, 127, -73, -9, -14, -77, -65, -17, -10, -53, -1, 47, -33, -21, -65, -2, 111, -1, -17, -1, -3, -65, -1, -99, 127, -6, -117, -5, -97, -1, -18, -1, -73, -3, -74, -49, -1, -33, -1, -20, -1, -1, -13, -5, -1, 119, 46, -1, -116, 80, -57, -97, -26, -65, -81, -8, -67, 93, -79, 81, -35, 126, -6, -15, -23, -3, 92, -18, -84, -68, 126, 115, -65, 114};
  // {00010010 00000101 00010001 10000000 10001000 10010000 00011001 11000000 00000011 10000010 01101001 11000000 00000000 00010000 00011101 00000000 0000}
  public static final byte[] GRPSPLIT15 = new byte[] {72, -96, -120, 1, 17, 9, -104, 3, -64, 65, -106, 3, 0, 8, -72, 0, 0};
  // {...28 0-bits... 00111000 00011011 00000000 00000100 00000000 00000000 00000000 00000010 00001010 00000000 01000000 01000000 00000000 00000011 00111100 00000000 00001000 00000000 00110010 00000000 00000001 10000000 00000000 00100110 00000001 00011000 11100000 00000000 00000000 01000000 00000000 00010010 00100100 00000000 00010000 00000100 00010000 00000000 00010000 00111000 10010000 00001000 10000010 00000000 00000000 00000000 00100000 00000000 10001000 00000000 00010000 10001001 00000000 00000000 00000010 00010000 01000000 00000000 00000000 00000000 00000001 10000000 10000000 00100001 10000000 00010000 01001001 00000010 11000000 00000000 00100000 00000100 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000100 00000000 00010000 00000100 00100000 00000000 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {28, -40, 0, 32, 0, 0, 0, 64, 80, 0, 2, 2, 0, -64, 60, 0, 16, 0, 76, 0, -128, 1, 0, 100, -128, 24, 7, 0, 0, 2, 0, 72, 36, 0, 8, 32, 8, 0, 8, 28, 9, 16, 65, 0, 0, 0, 4, 0, 17, 0, 8, -111, 0, 0, 64, 8, 2, 0, 0, 0, -128, 1, 1, -124, 1, 8, -110, 64, 3, 0, 4, 32, -128, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 0, 8, 32, 4, 0, 0, 0, 0, 0};
  // {01001110 01000010 00001111 10000100 00000000 11110010 00010100 00100000 00110100 10110100 00000101 01001001 10101000 00101011 00011011 00100000 001010}
  public static final byte[] GRPSPLIT17 = new byte[] {114, 66, -16, 33, 0, 79, 40, 4, 44, 45, -96, -110, 21, -44, -40, 4, 20};
  // {10010101 01101100 11100110 01111001 00011111 11100100 11010111 00111111 10001011 01010100 00000101 01010011 11101011 11110111 11110010 10111110 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-87, 54, 103, -98, -8, 39, -21, -4, -47, 42, -96, -54, -41, -17, 79, 125, 15};
  // {10000110 01101000 11000000 01111110}
  public static final byte[] GRPSPLIT19 = new byte[] {97, 22, 3, 126};
  // {10110000 10100000 00100010 01000100}
  public static final byte[] GRPSPLIT20 = new byte[] {13, 5, 68, 34};
  // {11101110 10101001 11011111 10101011 11110111 10011110 11100110 00111100 11111011 11101011 10011010 00100110 11111111 10011110 00111101 01111001 0011}
  public static final byte[] GRPSPLIT21 = new byte[] {119, -107, -5, -43, -17, 121, 103, 60, -33, -41, 89, 100, -1, 121, -68, -98, 12};
  // {11100001 10000001 10001101 10111010}
  public static final byte[] GRPSPLIT22 = new byte[] {-121, -127, -79, 93};
  // {01101001 01000101 00100011 11000000}
  public static final byte[] GRPSPLIT23 = new byte[] {-106, -94, -60, 3};
}


class gbm_pojo_test_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_38_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.03509944f : 
                        -0.013887947f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.010660619f : 
                        0.020576563f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        -0.055430148f : 
                        -0.0049921293f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        0.011587879f : 
                        0.11194135f))) : 
             (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.06493889f : 
                        -0.012067245f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.020660765f : 
                        0.011297034f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.061958652f : 
                        0.0044674906f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        -0.017794622f : 
                        0.044792596f)))) : 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.20494361f : 
                        -0.025975939f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.093017444f : 
                        -0.03474293f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.10939948f : 
                        0.064894974f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.013755098f : 
                        0.10290334f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.054400705f : 
                        0.008118177f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        0.10112218f : 
                        0.22561896f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT29, 32, 0, data[0])) ? 
                        -0.09915501f : 
                        0.058511164f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT30, 134, 0, data[6])) ? 
                        0.07295909f : 
                        0.17088377f)))));
    return pred;
  } // constant pool size = 567B, number of visited nodes = 31, static init size = 2646B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
  // {11110000 00010100 00000010 01111010}
  public static final byte[] GRPSPLIT1 = new byte[] {15, 40, 64, 94};
  // {00010010 00000001 11010111 00001000 00100001 00000010 01000011 01100100 01001000 00110100 01001101 00011001 11001000 01000000 00000011 00100000 0110}
  public static final byte[] GRPSPLIT2 = new byte[] {72, -128, -21, 16, -124, 64, -62, 38, 18, 44, -78, -104, 19, 2, -64, 4, 6};
  // {10010010 10000011 00001100 10010010 01000100 00000111 00000000 01000100 10110001 10100010 00010101 10000000 10000010 01101100 01000100 01000100 000110}
  public static final byte[] GRPSPLIT3 = new byte[] {73, -63, 48, 73, 34, -32, 0, 34, -115, 69, -88, 1, 65, 54, 34, 34, 24};
  // {01011111 00111101 11110111 11111110 11111111 01101110 11111111 11111111 11011111 10111110 01011111 10111111 11011111 11110110 11111011 11101011 1110}
  public static final byte[] GRPSPLIT4 = new byte[] {-6, -68, -17, 127, -1, 118, -1, -1, -5, 125, -6, -3, -5, 111, -33, -41, 7};
  // {11111011 01011110 00100111 11111110}
  public static final byte[] GRPSPLIT5 = new byte[] {-33, 122, -28, 127};
  // {01101101 10101111 10101111 11011111 11011111 11111011 10111111 00011001 11111111 11111001 11010011 11111111 01011111 01101101 11111111 11101010 101111}
  public static final byte[] GRPSPLIT6 = new byte[] {-74, -11, -11, -5, -5, -33, -3, -104, -1, -97, -53, -1, -6, -74, -1, 87, 61};
  // {11111111 11111101 11110010 01111010}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -65, 79, 94};
  // {00000000 00000000 00000000 00000000 00000001 00000000 00000000 01000000 00000000 00000000 01000001 00000000 00000000 00000000 00000001 00000000 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, 0, 0, 0, -128, 0, 0, 2, 0, 0, -126, 0, 0, 0, -128, 0, 0};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {65, 0, 0, 0};
  // {11111101 11100110 00011011 11000111 11110111 10110101 11111101 10111110 10010111 01000001 10101101 11101011 10110011 00110000 11111001 10111010 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 103, -40, -29, -17, -83, -65, 125, -23, -126, -75, -41, -51, 12, -97, 93, 15};
  // {11111111 11110110 11111110 10011110 01111110 11111101 11110111 10111011 11110110 11110111 11111111 11111101 11111011 11111111 11111101 11111111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, 111, 127, 121, 126, -65, -17, -35, 111, -17, -1, -65, -33, -1, -65, -1, 63};
  // {01111111 01111101 11110111 01100011 01110111 01011010 10011101 00000111 01111111 01111111 11001000 11101011 10111110 10010011 00011011 01100101 101010}
  public static final byte[] GRPSPLIT12 = new byte[] {-2, -66, -17, -58, -18, 90, -71, -32, -2, -2, 19, -41, 125, -55, -40, -90, 21};
  // {11111101 11110111 11111101 10111011 01111111 11111110 10111011 11110011 11011111 10011111 10101011 01010111 11111001 11010111 11011111 01101111 0001}
  public static final byte[] GRPSPLIT13 = new byte[] {-65, -17, -65, -35, -2, 127, -35, -49, -5, -7, -43, -22, -97, -21, -5, -10, 8};
  // {10000000 00000000 00000000 01011010}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 90};
  // {00011110 01110010 11010111 11110101 01111111 11111101 11001111 00101001 11101111 11111110 00110111 01011100 01111101 00110111 01110111 10001110 111100}
  public static final byte[] GRPSPLIT15 = new byte[] {120, 78, -21, -81, -2, -65, -13, -108, -9, 127, -20, 58, -66, -20, -18, 113, 15};
  // {00111111 10101011 00001000 00100100}
  public static final byte[] GRPSPLIT16 = new byte[] {-4, -43, 16, 36};
  // {11101110 11001110 11100100 11110011 11011111 11101011 11110110 10010111 11111111 11010110 01111100 11101100 10101111 10100110 01101110 11010001 1110}
  public static final byte[] GRPSPLIT17 = new byte[] {119, 115, 39, -49, -5, -41, 111, -23, -1, 107, 62, 55, -11, 101, 118, -117, 7};
  // {11111111 11111111 00001111 10111111 11101011 11111011 11111111 11111111 01110110 11110111 10111011 11111111 11111111 11111111 01111011 11111111 111110}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -16, -3, -41, -33, -1, -1, 110, -17, -35, -1, -1, -1, -34, -1, 31};
  // {00000000 00010000 11000010 00010010}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 8, 67, 72};
  // {00000000 00000001 00000000 00000100 00100000 00010100 00001000 00000000 00000000 00000000 00000000 00010011 01010000 00001000 10010000 00000110 0000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, -128, 0, 32, 4, 40, 16, 0, 0, 0, 0, -56, 10, 16, 9, 96, 0};
  // {11101101 10101011 11011011 01111101 01111011 10011000 11111101 10101111 00001111 11111000 11111110 11000111 11111100 11001011 11011111 11011011 101101}
  public static final byte[] GRPSPLIT21 = new byte[] {-73, -43, -37, -66, -34, 25, -65, -11, -16, 31, 127, -29, 63, -45, -5, -37, 45};
  // {00000000 00000000 00100000 00000000 00000000 10000010 00000000 00000110 01000000 00000000 00000000 00100000 00000000 00100000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT22 = new byte[] {0, 0, 4, 0, 0, 65, 0, 96, 2, 0, 0, 4, 0, 4, 0, 0, 0};
  // {00000000 10000010 00001011 00111000 00000000 00001000 01010000 10000010 00000010 10100000 00000100 01000000 00100000 10000001 01000000 00010001 000000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 65, -48, 28, 0, 16, 10, 65, 64, 5, 32, 2, 4, -127, 2, -120, 0};
  // {00001111 01111001 11011101 01010111 00000011 11001100 11110110 10111011 10011111 11111011 10001010 10000101 10111110 11100111 10110011 01110111 1100}
  public static final byte[] GRPSPLIT24 = new byte[] {-16, -98, -69, -22, -64, 51, 111, -35, -7, -33, 81, -95, 125, -25, -51, -18, 3};
  // {10010000 00000000 10001000 10000000 10000000 00000110 00101000 00001000 00100000 00100100 00000000 01101010 11000000 01010011 01000000 01010100 001000}
  public static final byte[] GRPSPLIT25 = new byte[] {9, 0, 17, 1, 1, 96, 20, 16, 4, 36, 0, 86, 3, -54, 2, 42, 4};
  // {11111111 11011111 11111111 10010111 10001011 11111111 11101111 10011011 11101110 01110101 01110010 11111111 11111101 11111111 01111011 11011111 111011}
  public static final byte[] GRPSPLIT26 = new byte[] {-1, -5, -1, -23, -47, -1, -9, -39, 119, -82, 78, -1, -65, -1, -34, -5, 55};
  // {00000000 00000000 10000000 00000000 10000000 00000000 00000000 00001000 00100000 00000000 00000000 01101000 00000000 00000010 00000000 01000000 000000}
  public static final byte[] GRPSPLIT27 = new byte[] {0, 0, 1, 0, 1, 0, 0, 16, 4, 0, 0, 22, 0, 64, 0, 2, 0};
  // {11101111 10111111 11011111 10101111 01101111 11111101 11111111 01111101 11111111 11110111 10110111 01111111 11111111 11111011 11111110 11111011 001101}
  public static final byte[] GRPSPLIT28 = new byte[] {-9, -3, -5, -11, -10, -65, -1, -66, -1, -17, -19, -2, -1, -33, 127, -33, 44};
  // {00110100 00000011 00000000 00000000}
  public static final byte[] GRPSPLIT29 = new byte[] {44, -64, 0, 0};
  // {10100010 00110000 01000000 00000000 00000100 00000101 00000000 01010000 00000000 00000010 00100100 00000010 11100000 10110010 00100000 00000000 000000}
  public static final byte[] GRPSPLIT30 = new byte[] {69, 12, 2, 0, 32, -96, 0, 10, 0, 64, 36, 64, 7, 77, 4, 0, 0};
}


class gbm_pojo_test_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_39_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* TailNum */] <3497.5f ? 
         (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.061838906f : 
                        -0.033872373f) : 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3025.0f ? 
                        0.006135475f : 
                        0.16765197f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2310.0f ? 
                        -0.04471262f : 
                        0.088160284f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[1])) ? 
                        -0.016355785f : 
                        0.0048601753f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <1830.5f ? 
                        -0.013191501f : 
                        -0.08698776f) : 
                     (data[4 /* TailNum */] <1352.5f ? 
                        -0.012614993f : 
                        0.0062355814f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                        -0.040368482f : 
                        0.02984919f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.015057513f : 
                        0.046254914f)))) : 
         (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(3, 3498, data[4]) || (GenModel.bitSetIsInRange(3, 3498, data[4]) && !GenModel.bitSetContains(GRPSPLIT11, 3, 3498, data[4])) ? 
             (data[3 /* FlightNum */] <1013.5f ? 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(1012, 2, data[3]) || (GenModel.bitSetIsInRange(1012, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT12, 1012, 2, data[3])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(1012, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 1012, 2, data[3])) ? 
                        -0.060140293f : 
                        -0.008818307f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.0134730395f : 
                        0.07686295f)) : 
                 (data[3 /* FlightNum */] <1809.5f ? 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(795, 1015, data[3]) || (GenModel.bitSetIsInRange(795, 1015, data[3]) && !GenModel.bitSetContains(GRPSPLIT15, 795, 1015, data[3])) ? 
                        0.003590994f : 
                        0.08042093f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(623, 1810, data[3]) || (GenModel.bitSetIsInRange(623, 1810, data[3]) && !GenModel.bitSetContains(GRPSPLIT16, 623, 1810, data[3])) ? 
                        -0.015094031f : 
                        0.041912884f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        0.11546426f : 
                        0.12166946f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        0.11743909f : 
                        0.1259385f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                    0.13518293f : 
                    0.14993678f))));
    return pred;
  } // constant pool size = 784B, number of visited nodes = 29, static init size = 3996B
  // {01011000 00111101 10000011 11110000}
  public static final byte[] GRPSPLIT0 = new byte[] {26, -68, -63, 15};
  // {00000110 11000101 00010000 00110011 00110000 00110010 00100110 00000000 11011000 00001111 10001110 00111110 01011000 00000101 01100011 01010000 100110}
  public static final byte[] GRPSPLIT1 = new byte[] {96, -93, 8, -52, 12, 76, 100, 0, 27, -16, 113, 124, 26, -96, -58, 10, 25};
  // {00000000 01000100 01000000 01001000 00000000 00000000 01010000 00000000 00000001 00000000 00100000 00010000 00100000 00000000 00000100 10001010 1000}
  public static final byte[] GRPSPLIT2 = new byte[] {0, 34, 2, 18, 0, 0, 10, 0, -128, 0, 4, 8, 4, 0, 32, 81, 1};
  // {01111110 01111111 11000111 11111100}
  public static final byte[] GRPSPLIT3 = new byte[] {126, -2, -29, 63};
  // {11111111 11100101 00111111 11111110 01101001 10001001 11111111 11111101 10111101 01110011 11000001 01111111 11011101 11000110 11011111 10111111 0111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -89, -4, 127, -106, -111, -1, -65, -67, -50, -125, -2, -69, 99, -5, -3, 14};
  // {10101110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT5 = new byte[] {117, 0, 0, 0};
  // {00000110 00000001 10000001 10100001 10010110 00010100 01000001 00000010 00000001 11001010 00001000 01011010 00110110 00010000 00100111 00100000 0000}
  public static final byte[] GRPSPLIT6 = new byte[] {96, -128, -127, -123, 105, 40, -126, 64, -128, 83, 16, 90, 108, 8, -28, 4, 0};
  // {01111111 10110111 11111111 11101111 11111111 00111101 11111101 11111111 10111111 11111011 10111111 11111111 11111111 11110111 11101111 11110111 1011}
  public static final byte[] GRPSPLIT7 = new byte[] {-2, -19, -1, -9, -1, -68, -65, -1, -3, -33, -3, -1, -1, -17, -9, -17, 13};
  // {01101101 11110101 11000111 11101100 11110111 11011011 11011011 10111011 11111110 11111101 01110001 11101111 11111011 01010110 11111101 11111101 111111}
  public static final byte[] GRPSPLIT8 = new byte[] {-74, -81, -29, 55, -17, -37, -37, -35, 127, -65, -114, -9, -33, 106, -65, -65, 63};
  // {11111111 11111110 11111111 01111111 11111101 11111111 11111111 11111111 11111111 11110111 11111111 10101101 11011101 11101111 11011111 11111111 1111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, 127, -1, -2, -65, -1, -1, -1, -1, -17, -1, -75, -69, -9, -5, -1, 15};
  // {11111111 01011011 10111111 01111111 10011010 11111111 11111111 11110101 01110111 11111110 11111111 01110011 10100111 11111011 00111110 11101111 111101}
  public static final byte[] GRPSPLIT10 = new byte[] {-1, -38, -3, -2, 89, -1, -1, -81, -18, 127, -1, -50, -27, -33, 124, -9, 47};
  // {...3498 0-bits... }
  public static final byte[] GRPSPLIT11 = new byte[] {5};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {1, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 32, 0, 0, 0, 32, 2, 0, 0, 0, 0, 0, 1, 0, 12, 0, 0, 0, 1, 0, 0, 0, 0, 0, -128, 4, 0, 16, 0, 0, 0, 0, 8, 2, 1, 9, 96, 1, -121, 11, 4, 22, -48, 4, 41, 13, -108, -114, -85, -112, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, -128, -128, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 40, 32, 8, 0, 0, 0, 32, 0, 0, 0, 64, 0, -128, 0, 1, 0};
  // {...2 0-bits}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -1, -3, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127, -1, -1, -1, -1, -5, -1, -1, -1, -17, -1, -1, -1, -17, -3, -1, 31, -33, -81, -1, -2, 31, -41, -1, -67, -9, -42, -3, -1, -1, -33, -65, -1, -1, -10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -17, -1, -1, -1, -3, -1, 127, -65, -1, -1, -1, -2, -9, -65, -1, -1, -2, -1, -1, -17, 127, -1, -1, -1, -9, -2, -1, -1, -1, -1, -9, -9, 11};
  // {10111011 00001011 11011100 11010110}
  public static final byte[] GRPSPLIT14 = new byte[] {-35, -48, 59, 107};
  // {...1015 0-bits... }
  public static final byte[] GRPSPLIT15 = new byte[] {64, 0, 0, -120, 0, 64, 8, 8, 8, -128, 0, 0, 1, 2, -128, 64, 2, 32, 0, 64, 0, 0, 0, 0, 4, 8, 32, 0, 0, 64, 0, 0, 8, 0, 0, 16, 66, 32, 0, 0, 16, 16, 8, 2, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -112, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {...1810 0-bits... }
  public static final byte[] GRPSPLIT16 = new byte[] {0, 0, 0, 0, 64, 0, 2, 0, -128, 0, 0, 0, 0, 0, -126, 32, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 8, 64, 0, -128, 1, 64, 0, 0, 0, 0, 64, 8, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 0, -128, 0, -56, -128, 5, 0, 0, 64};
  // {01000001 00000000 00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00011000 00000001 01000000 00000000 0000}
  public static final byte[] GRPSPLIT17 = new byte[] {-126, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, -128, 24, -128, 2, 0, 0};
  // {11111001 11111111 11111101 00111000}
  public static final byte[] GRPSPLIT18 = new byte[] {-97, -1, -65, 28};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 01000000 00000100 11000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 3, 0, 0, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11001111 01011111 10111111 11111110 11111101 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -13, -6, -3, 127, -65, 15};
  // {11000010 00100100 00011000 10100000}
  public static final byte[] GRPSPLIT21 = new byte[] {67, 36, 24, 5};
}


class gbm_pojo_test_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_40_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.15420632f : 
                        -0.08814073f) : 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.12672783f : 
                        0.02578781f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[4])) ? 
                        -0.115440816f : 
                        0.10837167f) : 
                    0.16366369f)) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[4])) ? 
                        0.077067226f : 
                        0.11437085f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.117205806f : 
                        0.121922195f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        0.11789045f : 
                        0.126592f) : 
                    0.13902624f))) : 
         (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3341.5f ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
                        -0.049134083f : 
                        0.008888253f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                        -0.015548696f : 
                        0.0029602614f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                        -0.048590798f : 
                        -0.00559502f) : 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2901.5f ? 
                        0.015044394f : 
                        -0.01937654f))) : 
             (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT19, 159, 3342, data[4])) ? 
                 (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT20, 159, 3342, data[4])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        -0.18556084f : 
                        -0.071037106f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                        -0.0061225262f : 
                        0.01171575f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT24, 159, 3342, data[4])) ? 
                        -0.07274565f : 
                        0.11501748f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(159, 3342, data[4]) || (GenModel.bitSetIsInRange(159, 3342, data[4]) && !GenModel.bitSetContains(GRPSPLIT25, 159, 3342, data[4])) ? 
                        0.12433821f : 
                        0.1734659f)))));
    return pred;
  } // constant pool size = 442B, number of visited nodes = 29, static init size = 1944B
  // {00000000 00000000 10000110 10000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 97, 1};
  // {10001100 00000011 00011100 00110100}
  public static final byte[] GRPSPLIT1 = new byte[] {49, -64, 56, 44};
  // {00000001 00000000 00100000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT2 = new byte[] {-128, 0, 4, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0};
  // {11111111 00111111 11011110 00110110}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -4, 123, 108};
  // {00000010 11011100 00000001 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {64, 59, -128, 0};
  // {00000010 00000000 00000000 10000000 01000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00010000 10000000 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {64, 0, 0, 1, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 8, 1, 0};
  // {00000101 10000100 00001000 00000000}
  public static final byte[] GRPSPLIT6 = new byte[] {-96, 33, 16, 0};
  // {00000000 10000100 11000001 00001000 00000000 00000010 00000000 00000000 01000000 00001000 00000000 00100000 10000000 10000000 00000010 10000010 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {0, 33, -125, 16, 0, 64, 0, 0, 2, 16, 0, 4, 1, 1, 64, 65, 0};
  // {00000001 10100001 00000000 00010000 00000000 00000000 00000000 01001000 00000000 00001000 10001000 00000000 00010000 10010110 00000000 00010000 000100}
  public static final byte[] GRPSPLIT8 = new byte[] {-128, -123, 0, 8, 0, 0, 0, 18, 0, 16, 17, 0, 8, 105, 0, 8, 8};
  // {11111111 11111111 01111111 11110000}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -2, 15};
  // {00100000 01100000 01011101 10000000}
  public static final byte[] GRPSPLIT10 = new byte[] {4, 6, -70, 1};
  // {00000000 00000001 00000000 00100000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -128, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0};
  // {10101000 10100010 10100010 00001000}
  public static final byte[] GRPSPLIT12 = new byte[] {21, 69, 69, 16};
  // {01001001 00111101 10000011 10110000}
  public static final byte[] GRPSPLIT13 = new byte[] {-110, -68, -63, 13};
  // {00101100 00110110 11010111 00110111 01110110 10111011 11110101 10110001 11111110 10111111 11011111 00111111 01111001 10000111 01110011 11010001 111111}
  public static final byte[] GRPSPLIT14 = new byte[] {52, 108, -21, -20, 110, -35, -81, -115, 127, -3, -5, -4, -98, -31, -50, -117, 63};
  // {00000000 01000000 01000000 01001000 00000000 00100000 01011000 00000000 00000001 00000000 00100000 01000000 00000000 00000000 00010100 10000010 1000}
  public static final byte[] GRPSPLIT15 = new byte[] {0, 2, 2, 18, 0, 4, 26, 0, -128, 0, 4, 2, 0, 0, 40, 65, 1};
  // {01010111 11000000 00000000 11100100 11011100 00000001 00000000 00100100 01000001 00000010 01000001 10100011 00011100 11000000 11011011 00000000 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {-22, 3, 0, 39, 59, -128, 0, 36, -126, 64, -126, -59, 56, 3, -37, 0, 0};
  // {10100110 00110111 11111101 10001001 01101111 01111101 00010101 10111110 10101111 01111001 10111110 11011111 01101111 00110110 00100101 01110111 1011}
  public static final byte[] GRPSPLIT17 = new byte[] {101, -20, -65, -111, -10, -66, -88, 125, -11, -98, 125, -5, -10, 108, -92, -18, 13};
  // {11111110 11111101 11111111 11001111 01111111 11111111 01111111 11111011 11111111 10110111 11110011 11011001 11111111 11111111 11111001 10101111 110101}
  public static final byte[] GRPSPLIT18 = new byte[] {127, -65, -1, -13, -2, -1, -2, -33, -1, -19, -49, -101, -1, -1, -97, -11, 43};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT19 = new byte[] {-69, 5, 90, 29, -114, 116, -40, 78, 5, 45, -114, 74, 1, -64, 64, -24, 0, -110, 36, 80};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT20 = new byte[] {-65, -65, -1, -97, -17, 127, -7, 126, -11, -19, -1, -33, -65, -36, 73, -20, 45, -66, -65, 123};
  // {00001000 00100100 00000000 01011100}
  public static final byte[] GRPSPLIT21 = new byte[] {16, 36, 0, 58};
  // {11110110 11010000 01100110 01001110}
  public static final byte[] GRPSPLIT22 = new byte[] {111, 11, 102, 114};
  // {00101101 10110010 11110101 10111000}
  public static final byte[] GRPSPLIT23 = new byte[] {-76, 77, -81, 29};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT24 = new byte[] {119, -1, -1, -1, -9, -65, -1, -3, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127};
  // {...3342 0-bits... }
  public static final byte[] GRPSPLIT25 = new byte[] {-110, 1, 80, 5, -118, 64, 24, 2, 0, 1, 4, 0, 0, 0, 0, -64, 0, 0, 0, 0};
}


class gbm_pojo_test_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_41_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.10170584f : 
                        -0.022555426f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                        -0.060880728f : 
                        7.053192E-4f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                        -0.01694936f : 
                        0.018512104f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                        -0.090768956f : 
                        0.042949934f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.14144953f : 
                        -0.03353529f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.017677804f : 
                        0.089952536f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT13, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.0076053566f : 
                        0.025254961f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        0.0897901f : 
                        0.17877232f)))) : 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.08386065f : 
                        -0.013481669f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.02976615f : 
                        0.004371992f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.011987479f : 
                        0.0047561685f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        0.026501052f : 
                        0.09618638f))) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT24, 134, 0, data[6])) ? 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.042858068f : 
                        0.0020127979f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.03671186f : 
                        0.025471568f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT28, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT29, 132, 0, data[5])) ? 
                        -0.0227722f : 
                        0.011373818f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT30, 134, 0, data[6])) ? 
                        0.019629095f : 
                        0.07088326f)))));
    return pred;
  } // constant pool size = 567B, number of visited nodes = 31, static init size = 2646B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {00110000 00100100 00001100 01101111 00000011 00010101 11010110 00000011 01000000 01000110 00000100 10000000 10000110 11010001 11000001 10100000 0010}
  public static final byte[] GRPSPLIT1 = new byte[] {12, 36, 48, -10, -64, -88, 107, -64, 2, 98, 32, 1, 97, -117, -125, 5, 4};
  // {01110101 01111000 01011011 01011110}
  public static final byte[] GRPSPLIT2 = new byte[] {-82, 30, -38, 122};
  // {11101101 01101110 00101110 11100111 01111111 11110011 11010111 11000011 00101101 11111101 01111011 01010101 11111101 10110000 10111111 11111111 011111}
  public static final byte[] GRPSPLIT3 = new byte[] {-73, 118, 116, -25, -2, -49, -21, -61, -76, -65, -34, -86, -65, 13, -3, -1, 62};
  // {00000000 00000000 01100000 00000000 11000000 00000000 00000000 00100000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 0001}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 6, 0, 3, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 8};
  // {00000010 01000001 00110010 10000000 01001100 10100010 00000000 01100000 00000001 10001000 00101001 01100010 01001000 00100000 00100010 00001011 0100}
  public static final byte[] GRPSPLIT5 = new byte[] {64, -126, 76, 1, 50, 69, 0, 6, -128, 17, -108, 70, 18, 4, 68, -48, 2};
  // {10011010 00010101 10000001 00010010 01010000 00001000 10000101 00100000 00000110 01100010 01000101 10001001 00000010 01000001 00000100 01000000 100000}
  public static final byte[] GRPSPLIT6 = new byte[] {89, -88, -127, 72, 10, 16, -95, 4, 96, 70, -94, -111, 64, -126, 32, 2, 1};
  // {10000001 10000000 01000001 00000000 00100000 00000000 00000000 00000000 10000000 00000001 01110010 00011100 00100001 00000000 00010000 00001010 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {-127, 1, -126, 0, 4, 0, 0, 0, 1, -128, 78, 56, -124, 0, 8, 80, 0};
  // {11111111 11111111 11111111 11101111 11111111 11111111 11111111 00111111 11111101 11111111 11011111 11111111 11111111 11011111 11111111 11111101 1110}
  public static final byte[] GRPSPLIT8 = new byte[] {-1, -1, -1, -9, -1, -1, -1, -4, -65, -1, -5, -1, -1, -5, -1, -65, 7};
  // {01000101 11101010 11111111 10001010 10101111 01011111 10111011 00111111 01101011 10111001 11100011 01010111 10111110 01101111 11011011 10101111 000001}
  public static final byte[] GRPSPLIT9 = new byte[] {-94, 87, -1, 81, -11, -6, -35, -4, -42, -99, -57, -22, 125, -10, -37, -11, 32};
  // {00011100 00110000 01101010 11100110}
  public static final byte[] GRPSPLIT10 = new byte[] {56, 12, 86, 103};
  // {11001101 11111111 11111111 11111111 11111111 01011111 11111111 01111111 11111111 11111111 11110111 11111111 11111111 11101111 11111011 11101111 001111}
  public static final byte[] GRPSPLIT11 = new byte[] {-77, -1, -1, -1, -1, -6, -1, -2, -1, -1, -17, -1, -1, -9, -33, -9, 60};
  // {00010010 00000000 00000000 00000000 00000000 10100000 00000000 10000000 00000000 00000000 00001000 00000000 00000001 00010000 00000000 00000000 110000}
  public static final byte[] GRPSPLIT12 = new byte[] {72, 0, 0, 0, 0, 5, 0, 1, 0, 0, 16, 0, -128, 8, 0, 0, 3};
  // {00000000 00101010 10000000 00000000 00000000 00000001 10010000 00000001 00100000 10010000 00000000 01000000 00000000 00100000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT13 = new byte[] {0, 84, 1, 0, 0, -128, 9, -128, 4, 9, 0, 2, 0, 4, 0, 0, 0};
  // {00111101 11011011 11010101 11011110}
  public static final byte[] GRPSPLIT14 = new byte[] {-68, -37, -85, 123};
  // {11000000 00000010 00101000 10000000}
  public static final byte[] GRPSPLIT15 = new byte[] {3, 64, 20, 1};
  // {11010110 00010000 10000110 10000000 00011101 00100000 10000011 11101100 10011111 01011000 10000001 01111110 11010011 00100110 00101111 00111000 0001}
  public static final byte[] GRPSPLIT16 = new byte[] {107, 8, 97, 1, -72, 4, -63, 55, -7, 26, -127, 126, -53, 100, -12, 28, 8};
  // {11011111 00001111 11010110 01111110}
  public static final byte[] GRPSPLIT17 = new byte[] {-5, -16, 107, 126};
  // {11111110 11011101 01101111 01110111 11011110 11111011 11010111 11111111 10011110 01111111 10011111 10010011 10111111 10101111 11111011 00011111 111001}
  public static final byte[] GRPSPLIT18 = new byte[] {127, -69, -10, -18, 123, -33, -21, -1, 121, -2, -7, -55, -3, -11, -33, -8, 39};
  // {00000000 00101000 01100000 01000000 10100000 10000100 00010000 00000010 00000000 00000110 01011000 10000001 00100000 00010000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT19 = new byte[] {0, 20, 6, 2, 5, 33, 8, 64, 0, 96, 26, -127, 4, 8, 0, 1, 0};
  // {11111110 10111001 10110110 10111111 11111101 10111110 10111111 11111101 10111111 01111011 10100011 01111111 11011111 10110110 11101111 00111011 1101}
  public static final byte[] GRPSPLIT20 = new byte[] {127, -99, 109, -3, -65, 125, -3, -65, -3, -34, -59, -2, -5, 109, -9, -36, 11};
  // {01010000 00110110 10010000 10010000 00000000 00100100 00100001 00000000 11000000 00000001 00000000 00100010 01000000 10110010 01000000 10100000 000110}
  public static final byte[] GRPSPLIT21 = new byte[] {10, 108, 9, 9, 0, 36, -124, 0, 3, -128, 0, 68, 2, 77, 2, 5, 24};
  // {00000001 01000011 01010001 01101000 01100010 10000000 01010000 00000010 01000000 10000000 01001110 00000001 00101000 11000000 11010000 00000010 0110}
  public static final byte[] GRPSPLIT22 = new byte[] {-128, -62, -118, 22, 70, 1, 10, 64, 2, 1, 114, -128, 20, 3, 11, 64, 6};
  // {00001111 00001000 00000000 00101010}
  public static final byte[] GRPSPLIT23 = new byte[] {-16, 16, 0, 84};
  // {11101111 10001011 01011011 00111101 01111001 11011111 10111101 00001111 01110111 11110100 00010001 01111110 11011100 10000111 11011101 01000100 001110}
  public static final byte[] GRPSPLIT24 = new byte[] {-9, -47, -38, -68, -98, -5, -67, -16, -18, 47, -120, 126, 59, -31, -69, 34, 28};
  // {00100110 10100110 00100110 10000010}
  public static final byte[] GRPSPLIT25 = new byte[] {100, 101, 100, 65};
  // {00000000 00100000 00000100 11000000 00000000 00000000 01000000 00110000 00001000 00000000 00101100 00000000 00100001 00100000 00100010 10010000 100001}
  public static final byte[] GRPSPLIT26 = new byte[] {0, 4, 32, 3, 0, 0, 2, 12, 16, 0, 52, 0, -124, 4, 68, 9, 33};
  // {11111111 11111111 11111111 00111111 11111101 11111111 10111111 10001111 11111111 11111111 11010001 11111111 11111110 11010111 11011111 01100100 011110}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, -1, -1, -4, -65, -1, -3, -15, -1, -1, -117, -1, 127, -21, -5, 38, 30};
  // {10110000 11110001 10101110 10011000}
  public static final byte[] GRPSPLIT28 = new byte[] {13, -113, 117, 25};
  // {01111111 11101111 11111001 11111111 11111011 11111111 11111111 10111011 01111110 10110111 11111110 10111011 10101110 11111111 11110101 11101111 1111}
  public static final byte[] GRPSPLIT29 = new byte[] {-2, -9, -97, -1, -33, -1, -1, -35, 126, -19, 127, -35, 117, -1, -81, -9, 15};
  // {00101000 00001000 00000011 00000000 00001001 10010000 10000100 00000010 01010111 00100000 00000001 00110000 01000000 00000110 10001000 01000000 000110}
  public static final byte[] GRPSPLIT30 = new byte[] {20, 16, -64, 0, -112, 9, 33, 64, -22, 4, -128, 12, 2, 96, 17, 2, 24};
}


class gbm_pojo_test_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_42_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                        -0.11864377f : 
                        -0.037881214f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT4, 96, 0, data[3])) ? 
                        -0.10390994f : 
                        -0.009353033f)) : 
                 (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT5, 96, 0, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.038774256f : 
                        0.02276618f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                        0.07111851f : 
                        0.20358767f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        -0.053137787f : 
                        0.016726907f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.027690595f : 
                        0.0624613f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT13, 96, 0, data[3])) ? 
                        -0.057836354f : 
                        0.033240836f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        0.03405052f : 
                        0.10891681f)))) : 
         (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[2])) ? 
             (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <3166.0f ? 
                 (data[3 /* FlightNum */] <238.5f ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.010988256f : 
                        0.2572127f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.03846915f : 
                        -0.0044221366f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(33, 1, data[5]) || (GenModel.bitSetIsInRange(33, 1, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 33, 1, data[5])) ? 
                        -0.055622187f : 
                        0.07238527f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(335, 3166, data[4]) || (GenModel.bitSetIsInRange(335, 3166, data[4]) && !GenModel.bitSetContains(GRPSPLIT20, 335, 3166, data[4])) ? 
                        0.090350054f : 
                        0.17273062f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (data[3 /* FlightNum */] <1711.5f ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        -0.0019204026f : 
                        0.020732475f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(727, 1712, data[3]) && !GenModel.bitSetContains(GRPSPLIT23, 727, 1712, data[3])) ? 
                        -0.039477427f : 
                        0.02551074f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                        -0.029753372f : 
                        0.021177767f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.029247975f : 
                        0.04115778f)))));
    return pred;
  } // constant pool size = 549B, number of visited nodes = 31, static init size = 2538B
  // {11101111 10011011 01000010 11010111 01011010 00100001 10000011 01100101 01110100 10000000 00110011 11000010}
  public static final byte[] GRPSPLIT0 = new byte[] {-9, -39, 66, -21, 90, -124, -63, -90, 46, 1, -52, 67};
  // {01111111 11011111 00111111 11111110 10101110 11111111 11111111 11111111 01110011 11111010 01111111 01001011 10101011 01110111 11111001 11111111 110011}
  public static final byte[] GRPSPLIT1 = new byte[] {-2, -5, -4, 127, 117, -1, -1, -1, -50, 95, -2, -46, -43, -18, -97, -1, 51};
  // {11001011 11001010 01001011 11001010}
  public static final byte[] GRPSPLIT2 = new byte[] {-45, 83, -46, 83};
  // {00000000 00000000 00100001 00000000 00000000 00000100 10000000 00000100 00000010 00000100 00001000 01000000 00000000 00000000 10100000 10000010 0000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, -124, 0, 0, 32, 1, 32, 64, 32, 16, 2, 0, 0, 5, 65, 0};
  // {11111111 11111111 01011111 11110111 01111111 11111111 11111111 11111101 01111111 11110011 11110111 11111111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -1, -6, -17, -2, -1, -1, -65, -2, -49, -17, -1};
  // {00000000 00000000 10100001 00001000 00100000 00000000 00001000 10010000 00000000 00001111 00000000 00100000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 0, -123, 16, 4, 0, 16, 9, 0, -16, 0, 4};
  // {10000100 00000000 10101101 11101000}
  public static final byte[] GRPSPLIT6 = new byte[] {33, 0, -75, 23};
  // {00000001 00010000 00000000 10000000 01000000 00000000 00000000 01000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 8, 0, 1, 2, 0, 0, 2, 0, 0, 0, 64, 0, 0, 0, 0, 0};
  // {11110001 00110011 00011110 10000000}
  public static final byte[] GRPSPLIT8 = new byte[] {-113, -52, 120, 1};
  // {00000000 00000000 00100000 00000000 00100000 10000000 00000010 00000000 00000001 00000000 00000000 11000000 10000000 00000000 10100000 10001000 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 0, 4, 0, 4, 1, 64, 0, -128, 0, 0, 3, 1, 0, 5, 17, 0};
  // {00000000 00000000 00000000 00000000 00010000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00100000 00000010 00000000 000000}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 0, 0, 0, 8, 2, 0, 0, 0, 0, 0, 0, 16, 4, 64, 0, 0};
  // {11111111 11111011 10111110 11100010}
  public static final byte[] GRPSPLIT11 = new byte[] {-1, -33, 125, 71};
  // {01111101 10111110 11111111 01111101 10110111 11111111 11111100 01111001 11111110 10110111 11111111 11111110 11111111 01111111 11011110 01110101 1111}
  public static final byte[] GRPSPLIT12 = new byte[] {-66, 125, -1, -66, -19, -1, 63, -98, 127, -19, -1, 127, -1, -2, 123, -82, 15};
  // {10011111 11111111 11111101 11101100 11111111 11111111 11111101 10111111 11001111 11111111 11001111 01111101}
  public static final byte[] GRPSPLIT13 = new byte[] {-7, -1, -65, 55, -1, -1, -65, -3, -13, -1, -13, -66};
  // {10010000 00110001 00001000 10000000}
  public static final byte[] GRPSPLIT14 = new byte[] {9, -116, 16, 1};
  // {11101111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT15 = new byte[] {-9, 3, 0, 0};
  // {00110000 11000000 01011101 01111000}
  public static final byte[] GRPSPLIT16 = new byte[] {12, 3, -70, 30};
  // {01111001 10011100 10011111 11000100}
  public static final byte[] GRPSPLIT17 = new byte[] {-98, 57, -7, 35};
  // {10010100 01101011 10111010 01000100}
  public static final byte[] GRPSPLIT18 = new byte[] {41, -42, 93, 34};
  // {...1 0-bits... 11111011 11111101 11111111 01111111}
  public static final byte[] GRPSPLIT19 = new byte[] {-33, -65, -1, -2, 1};
  // {...3166 0-bits... }
  public static final byte[] GRPSPLIT20 = new byte[] {32, 0, -128, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  // {00000110 00000000 10000100 01000000 01000101 00010100 01000000 10000000 10001000 01000100 00000010 00010000 01000000 00000100 00000001 00100000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {96, 0, 33, 2, -94, 40, 2, 1, 17, 34, 64, 8, 2, 32, -128, 4, 0};
  // {00001000 00000100 00000010 10000000 10100000 00000000 10010011 00100000 01010010 10001000 00000001 00101001 10000010 10010000 11010100 00000010 0100}
  public static final byte[] GRPSPLIT22 = new byte[] {16, 32, 64, 1, 5, 0, -55, 4, 74, 17, -128, -108, 65, 9, 43, 64, 2};
  // {...1712 0-bits... }
  public static final byte[] GRPSPLIT23 = new byte[] {-4, -11, -19, 29, -9, -34, -46, -5, 127, 123, 126, 53, -5, -19, -126, 38, -66, 5, -87, 33, -92, 43, -41, -27, 46, 47, -85, -100, -37, -30, 121, 28, -53, -25, 121, 86, -2, -97, 121, -28, 119, 5, 24, 121, 107, 113, 58, -26, -102, -57, -46, 34, 107, 69, -36, -68, -78, -91, -101, 113, 102, -52, 87, -64, -52, 18, 44, -91, 53, 110, 107, 84, 37, -10, -116, 6, 54, -89, -42, 95, -9, -25, -53, -17, 36, -1, -9, -35, -5, -51, 61};
  // {11111011 00000100 01000110 11110110}
  public static final byte[] GRPSPLIT24 = new byte[] {-33, 32, 98, 111};
  // {00010001 00101011 01000001 00100000 01010000 00001010 00000100 01000011 00010001 01000101 00000000 00110000 00001100 00000000 01000010 01000000 000000}
  public static final byte[] GRPSPLIT25 = new byte[] {-120, -44, -126, 4, 10, 80, 32, -62, -120, -94, 0, 12, 48, 0, 66, 2, 0};
  // {11111101 11111111 11101111 11011110 11101111 11110111 11111011 11111111 11100111 11111110 10111111 11101111 11111111 11111111 11111111 11111011 110111}
  public static final byte[] GRPSPLIT26 = new byte[] {-65, -1, -9, 123, -9, -17, -33, -1, -25, 127, -3, -9, -1, -1, -1, -33, 59};
}


class gbm_pojo_test_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_43_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[1])) ? 
                        -0.01814076f : 
                        -0.0045027207f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.006438424f : 
                        0.040656265f)) : 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                        -0.04006375f : 
                        0.025378026f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        0.022156874f : 
                        0.07629824f))) : 
             (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT9, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        -0.055469505f : 
                        -0.0067365747f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                        -0.034280974f : 
                        0.010126193f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.072527744f : 
                        0.0071182954f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT15, 134, 0, data[6])) ? 
                        0.015618805f : 
                        0.07291433f)))) : 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                        -0.26055002f : 
                        -0.12589522f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.10108349f : 
                        -0.042329617f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT21, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        -0.16019933f : 
                        -0.051047903f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                        0.012799288f : 
                        0.091581546f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT26, 32, 0, data[0])) ? 
                        -0.021736274f : 
                        0.028845007f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        0.07654385f : 
                        0.16442664f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT29, 32, 0, data[0])) ? 
                        -0.11021715f : 
                        0.037528787f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT30, 134, 0, data[6])) ? 
                        0.073437504f : 
                        0.15290196f)))));
    return pred;
  } // constant pool size = 528B, number of visited nodes = 31, static init size = 2412B
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, 0, 0, 0};
  // {11100000 00010100 00000010 01111010}
  public static final byte[] GRPSPLIT1 = new byte[] {7, 40, 64, 94};
  // {00010100 00000000 10000111 00001000 00010011 00000000 01000010 01100100 00001000 00110000 01000101 00011000 01001000 01000000 00000001 00100000 0010}
  public static final byte[] GRPSPLIT2 = new byte[] {40, 0, -31, 16, -56, 0, 66, 38, 16, 12, -94, 24, 18, 2, -128, 4, 4};
  // {01100000 10000001 00001000 10010010 01000100 00000011 01010010 00000100 11100000 10101001 01010001 00000000 10000010 01100100 01100100 11000100 000010}
  public static final byte[] GRPSPLIT3 = new byte[] {6, -127, 16, 73, 34, -64, 74, 32, 7, -107, -118, 0, 65, 38, 38, 35, 16};
  // {00110100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT4 = new byte[] {44, 0, 0, 0};
  // {00011101 01000000 00100000 10000000}
  public static final byte[] GRPSPLIT5 = new byte[] {-72, 2, 4, 1};
  // {11110110 11110101 01101110 11111010}
  public static final byte[] GRPSPLIT6 = new byte[] {111, -81, 118, 95};
  // {11111111 11111110 10001111 11011111 11011111 11111111 11111111 11111111 11110110 11111111 11111111 11111011 11111011 11111111 01111111 11111111 110111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, 127, -15, -5, -5, -1, -1, -1, 111, -1, -1, -33, -33, -1, -2, -1, 59};
  // {00000000 00000001 01100000 00000000 01000000 00000000 00000000 00000000 00010000 00000000 00000000 00000100 00000100 00000000 10000000 00000000 001000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -128, 6, 0, 2, 0, 0, 0, 8, 0, 0, 32, 32, 0, 1, 0, 4};
  // {10000010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT9 = new byte[] {65, 0, 0, 0};
  // {11111101 11100010 00011010 11100111 01101111 10110100 11101101 10011110 10010111 01001101 10101100 11101011 10100011 00110001 11111001 10111010 1111}
  public static final byte[] GRPSPLIT10 = new byte[] {-65, 71, 88, -25, -10, 45, -73, 121, -23, -78, 53, -41, -59, -116, -97, 93, 15};
  // {11111101 11111110 00111110 10111110 00011110 11111111 11110011 10111011 10010110 11110011 11111111 11110101 11111011 10111111 11111101 01111011 111110}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, 127, 124, 125, 120, -1, -49, -35, 105, -49, -1, -81, -33, -3, -65, -34, 31};
  // {01111110 01111101 11110111 01100011 01110111 01011110 10011101 00000111 00111111 11111111 11001110 10111111 10011110 10011011 10011111 01100101 111011}
  public static final byte[] GRPSPLIT12 = new byte[] {126, -66, -17, -58, -18, 122, -71, -32, -4, -1, 115, -3, 121, -39, -7, -90, 55};
  // {11111111 11010111 11111101 10111011 11111111 11111111 10111011 11110011 11011111 10011111 10101011 01010111 11011001 11010111 11010111 01101111 0001}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -21, -65, -35, -1, -1, -35, -49, -5, -7, -43, -22, -101, -21, -21, -10, 8};
  // {10000000 00000000 00000000 01001010}
  public static final byte[] GRPSPLIT14 = new byte[] {1, 0, 0, 82};
  // {00010010 01010010 10010101 10100000 00011000 11100000 00000110 00100000 10001001 00100110 00100101 01011000 00100100 00100011 01110010 00000100 011100}
  public static final byte[] GRPSPLIT15 = new byte[] {72, 74, -87, 5, 24, 7, 96, 4, -111, 100, -92, 26, 36, -60, 78, 32, 14};
  // {00111111 10101011 00001000 00100100}
  public static final byte[] GRPSPLIT16 = new byte[] {-4, -43, 16, 36};
  // {11101110 11001110 11100100 11110011 11011111 11101001 11110110 10010111 11111111 11010110 01111100 11101110 10101111 10100110 11101110 11010001 1110}
  public static final byte[] GRPSPLIT17 = new byte[] {119, 115, 39, -49, -5, -105, 111, -23, -1, 107, 62, 119, -11, 101, 119, -117, 7};
  // {11111111 11111111 10001111 10111111 11111111 11111011 11111111 11111111 11110111 11111111 11111111 11111101 11111111 11111111 01111111 11111111 110110}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, -1, -15, -3, -1, -33, -1, -1, -17, -1, -1, -65, -1, -1, -2, -1, 27};
  // {10000000 00010000 10000110 00000010}
  public static final byte[] GRPSPLIT19 = new byte[] {1, 8, 97, 64};
  // {11111111 11111111 11101100 11110100}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, 55, 47};
  // {11001101 10101011 11011011 00111101 01111011 10011000 01011101 10101111 00001111 11110000 11111110 11010111 01111100 11001001 11011111 11011011 101101}
  public static final byte[] GRPSPLIT21 = new byte[] {-77, -43, -37, -68, -34, 25, -70, -11, -16, 15, 127, -21, 62, -109, -5, -37, 45};
  // {11111111 11101011 11111011 11111101 01111111 10111010 11111101 11101111 00111111 11111101 11111110 11011111 11111100 11101011 11011111 11011111 111101}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -41, -33, -65, -2, 93, -65, -9, -4, -65, 127, -5, 63, -41, -5, -5, 47};
  // {00000000 10000010 00001011 00111000 00000000 00001000 01010000 10000010 00000010 10100000 00000100 01000011 00100000 10000001 01000000 00010001 001000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 65, -48, 28, 0, 16, 10, 65, 64, 5, 32, -62, 4, -127, 2, -120, 4};
  // {00000011 01110001 11000101 01000101 00000001 10000000 01010010 00100010 10001011 11111011 00000010 00000001 10110100 00100011 10110010 00110000 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {-64, -114, -93, -94, -128, 1, 74, 68, -47, -33, 64, -128, 45, -60, 77, 12, 2};
  // {10010000 00010001 10001000 10000000 10000000 00000110 00101000 00001000 00100000 00100000 00000000 01101010 11000000 01010011 01000000 01010100 001000}
  public static final byte[] GRPSPLIT25 = new byte[] {9, -120, 17, 1, 1, 96, 20, 16, 4, 4, 0, 86, 3, -54, 2, 42, 4};
  // {00001010 00101001 00001000 00000000}
  public static final byte[] GRPSPLIT26 = new byte[] {80, -108, 16, 0};
  // {00000000 00000000 00010010 00000000 11000000 00000001 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 0000}
  public static final byte[] GRPSPLIT27 = new byte[] {0, 0, 72, 0, 3, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0};
  // {11101111 10111011 11111111 10101111 01101111 11111101 11111111 01111001 11111111 11110111 10110111 01111111 11111111 11111011 11111110 11111011 101101}
  public static final byte[] GRPSPLIT28 = new byte[] {-9, -35, -1, -11, -10, -65, -1, -98, -1, -17, -19, -2, -1, -33, 127, -33, 45};
  // {11111110 01111111 11110111 11011010}
  public static final byte[] GRPSPLIT29 = new byte[] {127, -2, -17, 91};
  // {10100010 00100000 01000000 00000000 00100100 00000001 00000000 01010000 01000000 00000110 00100100 00000010 01100000 10100010 00100000 00000000 000000}
  public static final byte[] GRPSPLIT30 = new byte[] {69, 4, 2, 0, 36, -128, 0, 10, 2, 96, 36, 64, 6, 69, 4, 0, 0};
}


class gbm_pojo_test_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_44_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT1, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[4])) ? 
                    -0.1405536f : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.11723011f : 
                        -0.019266676f)) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                        -0.115568355f : 
                        -3.2219337E-5f) : 
                    0.07774265f)) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                    -0.033005334f : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                        0.10846218f : 
                        0.117258094f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT9, 132, 0, data[5])) ? 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT10, 134, 0, data[6])) ? 
                        0.11328015f : 
                        0.11922244f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                        0.12238819f : 
                        0.13997109f)))) : 
         (data[4 /* TailNum */] <1493.5f ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT14, 32, 0, data[0])) ? 
                        -0.033494346f : 
                        -0.010688508f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                        -0.004861228f : 
                        0.039593536f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT17, 132, 0, data[5])) ? 
                        -0.09924571f : 
                        0.008434925f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        0.028378136f : 
                        0.10073502f))) : 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT19, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        -0.038667094f : 
                        -0.0065590427f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                        -0.023844168f : 
                        0.004591379f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        -0.043554734f : 
                        3.2456088E-4f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                        0.003494178f : 
                        0.020827413f)))));
    return pred;
  } // constant pool size = 426B, number of visited nodes = 28, static init size = 1872B
  // {00000000 00000100 10001110 10000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 32, 113, 1};
  // {10011100 01100001 00111110 10110000}
  public static final byte[] GRPSPLIT1 = new byte[] {57, -122, 124, 13};
  // {11111011 01101111 11111111 10100000}
  public static final byte[] GRPSPLIT2 = new byte[] {-33, -10, -1, 5};
  // {00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00100000 00000000 00000000 00000000 00100000 00000000 000000}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0};
  // {00001101 10010000 00000000 01000000}
  public static final byte[] GRPSPLIT4 = new byte[] {-80, 9, 0, 2};
  // {01111111 10011111 11111111 01011110}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, -7, -1, 122};
  // {11111110 10111111 10011101 10111100}
  public static final byte[] GRPSPLIT6 = new byte[] {127, -3, -71, 61};
  // {11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 10111111 11111111 11111111 01111111 11111111 11111111 11111111 1111}
  public static final byte[] GRPSPLIT7 = new byte[] {-1, -1, -1, -1, -17, -1, -1, -1, -1, -3, -1, -1, -2, -1, -1, -1, 15};
  // {00000000 00000001 00000000 00100000 00000000 00000000 00000000 00001000 00000000 00000000 00001000 00000000 00010100 00010000 00000000 01010000 000000}
  public static final byte[] GRPSPLIT8 = new byte[] {0, -128, 0, 4, 0, 0, 0, 16, 0, 0, 16, 0, 40, 8, 0, 10, 0};
  // {00000000 10000100 00000000 00001000 00001000 00000010 00000000 00000000 01000000 00001000 00000000 00100001 10000000 10000000 01000000 10000010 0000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, 33, 0, 16, 16, 64, 0, 0, 2, 16, 0, -124, 1, 1, 2, 65, 0};
  // {00000000 10100000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00001000 10000000 10000000 00010000 00010110 00000000 00000100 000100}
  public static final byte[] GRPSPLIT10 = new byte[] {0, 5, 0, 0, 0, 0, 0, 0, 8, 16, 1, 1, 8, 104, 0, 32, 8};
  // {00000000 00000001 00000000 00100000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00100000 00000000 000000}
  public static final byte[] GRPSPLIT11 = new byte[] {0, -128, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 4, 0, 0};
  // {00000010 01001110 10000000 11100010 00011001 01100100 10000001 00000000 10001101 01011010 00001000 10100010 10000000 10110110 11000100 01000000 000110}
  public static final byte[] GRPSPLIT12 = new byte[] {64, 114, 1, 71, -104, 38, -127, 0, -79, 90, 16, 69, 1, 109, 35, 2, 24};
  // {00011000 00000011 00000011 00100011 00000000 10010100 00101001 10000010 00010001 11001010 00100011 00110000 00011110 00010000 00011111 00001000 1000}
  public static final byte[] GRPSPLIT13 = new byte[] {24, -64, -64, -60, 0, 41, -108, 65, -120, 83, -60, 12, 120, 8, -8, 16, 1};
  // {00011001 01111010 10110010 10000110}
  public static final byte[] GRPSPLIT14 = new byte[] {-104, 94, 77, 97};
  // {01101100 10001000 01001111 00101010}
  public static final byte[] GRPSPLIT15 = new byte[] {54, 17, -14, 84};
  // {11010100 00111100 11011100 00110000}
  public static final byte[] GRPSPLIT16 = new byte[] {43, 60, 59, 12};
  // {11111101 11111010 11101110 11111111 11111111 01111101 11111101 11111110 11111111 11110011 11111111 11101111 11111011 11110111 00111111 01110111 1111}
  public static final byte[] GRPSPLIT17 = new byte[] {-65, 95, 119, -1, -1, -66, -65, 127, -1, -49, -1, -9, -33, -17, -4, -18, 15};
  // {01010010 01010110 01000001 00000000 10001010 10110010 00000000 00000000 00000000 00000000 00000000 01000010 00001000 00000000 10000000 00000010 0100}
  public static final byte[] GRPSPLIT18 = new byte[] {74, 106, -126, 0, 81, 77, 0, 0, 0, 0, 0, 66, 16, 0, 1, 64, 2};
  // {01011101 10100000 01011111 10010100 00000000 10010010 10100100 01100111 00110000 10110101 11000101 01011001 01011010 01001001 01011011 00100000 001010}
  public static final byte[] GRPSPLIT19 = new byte[] {-70, 5, -6, 41, 0, 73, 37, -26, 12, -83, -93, -102, 90, -110, -38, 4, 20};
  // {10100110 11111101 11110110 01111101 01111101 11000110 11110110 10011101 10001111 01110111 10001101 01011111 11100011 10100110 11110010 01111100 1111}
  public static final byte[] GRPSPLIT20 = new byte[] {101, -65, 111, -66, -66, 99, 111, -71, -15, -18, -79, -6, -57, 101, 79, 62, 15};
  // {11010110 11100100 01110011 01110100}
  public static final byte[] GRPSPLIT21 = new byte[] {107, 39, -50, 46};
  // {11111111 11101001 11111111 10110111 11110100 11111111 10111110 01101111 11111111 11111101 11110111 11011101 01111110 01111011 11111111 10111011 101011}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -105, -1, -19, 47, -1, 125, -10, -1, -65, -17, -69, 126, -34, -1, -35, 53};
  // {11111111 10101100 10111111 11101110 11110111 00111100 11001110 01111111 11101111 11111011 11101010 11111111 11100111 11111111 11100101 10110011 0011}
  public static final byte[] GRPSPLIT23 = new byte[] {-1, 53, -3, 119, -17, 60, 115, -2, -9, -33, 87, -1, -25, -1, -89, -51, 12};
  // {10101110 01111111 00011010 10001100}
  public static final byte[] GRPSPLIT24 = new byte[] {117, -2, 88, 49};
  // {01100001 10000101 10100111 11011100}
  public static final byte[] GRPSPLIT25 = new byte[] {-122, -95, -27, 59};
}


class gbm_pojo_test_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_45_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[3 /* FlightNum */] <95.5f ? 
         (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT0, 96, 0, data[3])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT2, 96, 0, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.10470887f : 
                        -0.01268016f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.068205364f : 
                        -0.013902609f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT5, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT6, 96, 0, data[3])) ? 
                        -0.049279466f : 
                        0.088716134f) : 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(96, 0, data[3]) || (GenModel.bitSetIsInRange(96, 0, data[3]) && !GenModel.bitSetContains(GRPSPLIT7, 96, 0, data[3])) ? 
                        0.019245293f : 
                        0.14858004f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        -0.16008672f : 
                        -0.0015437974f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[0])) ? 
                        -0.06198233f : 
                        0.03518808f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        -0.111224204f : 
                        0.07691166f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
                        0.04589136f : 
                        0.10325692f)))) : 
         (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT15, 132, 0, data[5])) ? 
             (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[1])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.01987355f : 
                        0.00609418f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.005665316f : 
                        0.00949647f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                        -0.04231049f : 
                        0.012368791f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                        0.00871878f : 
                        0.061317813f))) : 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.2527769f : 
                        0.011911392f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT26, 134, 0, data[6])) ? 
                        -0.009898501f : 
                        0.09020467f)) : 
                 (data[4 /* TailNum */] <3218.5f ? 
                     (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <2801.0f ? 
                        0.115159996f : 
                        0.16819789f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT27, 32, 0, data[1])) ? 
                        -0.009958805f : 
                        0.11346098f)))));
    return pred;
  } // constant pool size = 441B, number of visited nodes = 31, static init size = 1890B
  // {11101110 10011011 01000010 11000101 01010000 00100001 10000011 01100101 01110100 10000000 00110000 01000000}
  public static final byte[] GRPSPLIT0 = new byte[] {119, -39, 66, -93, 10, -124, -63, -90, 46, 1, 12, 2};
  // {00000011 00001011 00110000 01010000 00000000 00100010 10010100 00100111 00000001 00001010 00001000 00000000 00000000 00100000 00000001 11110100 000010}
  public static final byte[] GRPSPLIT1 = new byte[] {-64, -48, 12, 10, 0, 68, 41, -28, -128, 80, 16, 0, 0, 4, -128, 47, 16};
  // {11111110 10011111 01111110 11110101 01111010 01101111 10111111 11111111 01111111 10010011 11111111 11111100}
  public static final byte[] GRPSPLIT2 = new byte[] {127, -7, 126, -81, 94, -10, -3, -1, -2, -55, -1, 63};
  // {00000000 00100010 11000000 11000010}
  public static final byte[] GRPSPLIT3 = new byte[] {0, 68, 3, 67};
  // {11101011 11011011 11001011 10001110}
  public static final byte[] GRPSPLIT4 = new byte[] {-41, -37, -45, 113};
  // {10101000 10110100 00101100 11101000}
  public static final byte[] GRPSPLIT5 = new byte[] {21, 45, 52, 23};
  // {00000000 00100000 10000000 00101000 00001000 01010010 00001000 00000000 00000000 00010010 00000000 00100000}
  public static final byte[] GRPSPLIT6 = new byte[] {0, 4, 1, 20, 16, 74, 16, 0, 0, 72, 0, 4};
  // {00000001 00000000 00001001 00011000 00000010 00000010 00000000 00000000 00000000 00100100 00000001 00100000}
  public static final byte[] GRPSPLIT7 = new byte[] {-128, 0, -112, 24, 64, 64, 0, 0, 0, 36, -128, 4};
  // {01110101 10111010 00101110 11110000}
  public static final byte[] GRPSPLIT8 = new byte[] {-82, 93, 116, 15};
  // {11111111 11111111 11111111 11110111 11111111 10111111 11111111 11111111 11100111 11111111 11111011 11111111 10111011 11100111 10111111 11111111 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -1, -1, -17, -1, -3, -1, -1, -25, -1, -33, -1, -35, -25, -3, -1, 63};
  // {00001010 01000100 10000000 00000010}
  public static final byte[] GRPSPLIT10 = new byte[] {80, 34, 1, 64};
  // {11111101 10111011 01111111 11111110}
  public static final byte[] GRPSPLIT11 = new byte[] {-65, -35, -2, 127};
  // {11111111 11011111 11111111 11110111 11011011 11111101 11111111 10111111 11111111 11111011 10111111 01111111 10111111 11111110 11111101 11111111 111011}
  public static final byte[] GRPSPLIT12 = new byte[] {-1, -5, -1, -17, -37, -65, -1, -3, -1, -33, -3, -2, -3, 127, -65, -1, 55};
  // {00000101 00100010 00000110 01100000}
  public static final byte[] GRPSPLIT13 = new byte[] {-96, 68, 96, 6};
  // {00000000 00000000 01010000 10000010 01100000 00000000 10000000 00000000 00000100 00000000 00000010 01000010 10100000 00100000 10110000 00000000 0000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, 0, 10, 65, 6, 0, 1, 0, 32, 0, 64, 66, 5, 4, 13, 0, 0};
  // {00000100 00000000 00000100 00000000 00000001 00010100 01000000 00001000 10001000 01000100 00000010 00000000 01000000 00000000 00000001 00100000 0000}
  public static final byte[] GRPSPLIT15 = new byte[] {32, 0, 32, 0, -128, 40, 2, 16, 17, 34, 64, 0, 2, 0, -128, 4, 0};
  // {00001000 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT16 = new byte[] {16, 0, 0, 0};
  // {11111000 01010100 11110110 01111110}
  public static final byte[] GRPSPLIT17 = new byte[] {31, 42, 111, 126};
  // {10000010 00110000 01000011 10001100 00010100 00000011 00001011 01000100 00000010 00110011 01101100 00011111 10001100 01110000 11010010 10010001 0010}
  public static final byte[] GRPSPLIT18 = new byte[] {65, 12, -62, 49, 40, -64, -48, 34, 64, -52, 54, -8, 49, 14, 75, -119, 4};
  // {10010001 00000111 10011010 01101010 11101110 00100000 00010000 10100010 01000010 10001000 10000001 01100010 10110011 10000100 00001000 00001010 1011}
  public static final byte[] GRPSPLIT19 = new byte[] {-119, -32, 89, 86, 119, 4, 8, 69, 66, 17, -127, 70, -51, 33, 16, 80, 13};
  // {00011111 10101011 00001000 00100100}
  public static final byte[] GRPSPLIT20 = new byte[] {-8, -43, 16, 36};
  // {01100010 11000000 11100000 01000001 01011100 10000001 00000110 00000100 01100001 10000010 00001000 01001000 10110111 10100010 01101110 10010001 0100}
  public static final byte[] GRPSPLIT21 = new byte[] {70, 3, 7, -126, 58, -127, 96, 32, -122, 65, 16, 18, -19, 69, 118, -119, 2};
  // {00101111 01111001 11001101 11010111 00000011 01011100 11110110 10111011 10011111 11111111 10010010 10100111 11111110 11011111 10110111 01110111 1100}
  public static final byte[] GRPSPLIT22 = new byte[] {-12, -98, -77, -21, -64, 58, 111, -35, -7, -1, 73, -27, 127, -5, -19, -18, 3};
  // {00011011 11100011 00000100 01001000}
  public static final byte[] GRPSPLIT23 = new byte[] {-40, -57, 32, 18};
  // {11111111 11111011 11001111 11111110}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -33, -13, 127};
  // {11111111 11111111 11111011 11111111 11111111 11111111 11111111 11111111 11110111 11111111 11111111 11111111 11111111 11111111 11111110 11011111 1111}
  public static final byte[] GRPSPLIT25 = new byte[] {-1, -1, -33, -1, -1, -1, -1, -1, -17, -1, -1, -1, -1, -1, 127, -5, 15};
  // {10111111 11111011 11101111 10001110 01111011 11111111 11111011 11111111 11111111 11110111 11111111 11111011 10111011 11111111 01111101 11111111 111111}
  public static final byte[] GRPSPLIT26 = new byte[] {-3, -33, -9, 113, -34, -1, -33, -1, -1, -17, -1, -33, -35, -1, -66, -1, 63};
  // {11011110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT27 = new byte[] {123, 0, 0, 0};
}


class gbm_pojo_test_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_46_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[4]) || (data[4] >= 3501) || data[4 /* TailNum */] <27.5f ? 
         (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[4])) ? 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT2, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT3, 132, 0, data[5])) ? 
                        -0.1383317f : 
                        -0.086942784f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(32, 0, data[4]) || (GenModel.bitSetIsInRange(32, 0, data[4]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[4])) ? 
                        -0.06459054f : 
                        0.044452425f)) : 
                0.07585027f) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT6, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[0])) ? 
                        0.0920447f : 
                        0.11233333f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                        0.113531135f : 
                        0.11789348f)) : 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[0])) ? 
                        0.1145746f : 
                        0.121954836f) : 
                    0.13323575f))) : 
         (data[4 /* TailNum */] <804.5f ? 
             (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(777, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT11, 777, 28, data[4])) ? 
                 (!Double.isNaN(data[4 /* TailNum */]) && (GenModel.bitSetIsInRange(777, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT12, 777, 28, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        -0.2111819f : 
                        -0.115658574f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        -0.078376226f : 
                        0.023144081f)) : 
                 (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(777, 28, data[4]) || (GenModel.bitSetIsInRange(777, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT15, 777, 28, data[4])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT16, 132, 0, data[5])) ? 
                        -0.01166403f : 
                        0.04545036f) : 
                     (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(777, 28, data[4]) || (GenModel.bitSetIsInRange(777, 28, data[4]) && !GenModel.bitSetContains(GRPSPLIT17, 777, 28, data[4])) ? 
                        0.091590405f : 
                        0.16767068f))) : 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT18, 134, 0, data[6])) ? 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT20, 134, 0, data[6])) ? 
                        -0.019714726f : 
                        -0.002963554f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                        -0.0028924167f : 
                        0.01642633f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT22, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        -0.14321996f : 
                        0.014948508f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        0.0010896187f : 
                        0.020819744f)))));
    return pred;
  } // constant pool size = 780B, number of visited nodes = 27, static init size = 4020B
  // {00000000 00000000 10000110 10000000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 0, 97, 1};
  // {00000010 00000000 00000000 00000000 01000000 00000000 00000000 00000000 00000000 00000010 00000000 00000000 00000000 00000000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT1 = new byte[] {64, 0, 0, 0, 2, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 1, 0};
  // {10011100 00101010 00110110 10101100}
  public static final byte[] GRPSPLIT2 = new byte[] {57, 84, 108, 53};
  // {11111111 11111111 11111111 00111111 11110111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 1111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -1, -1, -4, -17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, 15};
  // {00000001 10011110 00001000 00010000}
  public static final byte[] GRPSPLIT4 = new byte[] {-128, 121, 16, 8};
  // {00000000 10000100 01000001 00000000 00000000 00000010 00000000 00000000 01000000 00000000 00000000 00100000 10000000 10000000 00000010 10000010 0000}
  public static final byte[] GRPSPLIT5 = new byte[] {0, 33, -126, 0, 0, 64, 0, 0, 2, 0, 0, 4, 1, 1, 64, 65, 0};
  // {00000001 10100001 00000000 00010000 00000000 00000000 00000000 01001000 00000000 00001000 10001000 00000000 00010000 10010110 00000010 00010000 000100}
  public static final byte[] GRPSPLIT6 = new byte[] {-128, -123, 0, 8, 0, 0, 0, 18, 0, 16, 17, 0, 8, 105, 64, 8, 8};
  // {11111110 11011111 11001101 10011100}
  public static final byte[] GRPSPLIT7 = new byte[] {127, -5, -77, 57};
  // {00100000 01100000 01011101 10010000}
  public static final byte[] GRPSPLIT8 = new byte[] {4, 6, -70, 9};
  // {00000000 00000001 00000000 00100000 00000000 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000000 00000000 000000}
  public static final byte[] GRPSPLIT9 = new byte[] {0, -128, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0};
  // {01111011 11101011 11111110 11011000}
  public static final byte[] GRPSPLIT10 = new byte[] {-34, -41, 127, 27};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT11 = new byte[] {28, -38, -33, -9, 104, 105, -113, -23, 115, -113, -65, 118, -4, -3, -4, -95, -109, -43, -18, 80, -29, 53, -107, 117, -73, -5, 95, -8, 93, 78, -33, -7, 47, -3, 78, -9, 47, -73, 124, 63, -33, -108, -3, -46, -113, 69, -82, -6, -73, 55, -3, -105, 115, 71, -15, 11, 79, -37, -19, 122, -7, 63, 35, -41, -29, -116, -2, -35, -45, -33, -33, 96, -5, -65, 122, 98, 125, -20, 83, 127, -26, -77, 79, -18, -66, -79, 117, 95, -65, 71, -17, 123, 127, 119, -95, -98, 72, 1};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT12 = new byte[] {28, -6, -33, -1, -5, -3, -97, -23, 115, -17, -65, 126, -4, -1, -4, -15, -9, -11, -17, -15, -29, -75, -65, -3, -1, -5, 127, -4, 95, 95, -1, -1, -81, -3, 79, -9, 47, -9, 125, -65, -33, -65, -3, -13, -1, 101, -1, -1, -65, -65, -3, -97, -13, -9, -9, -1, 95, -37, -3, -5, -5, -1, -69, -41, -25, -2, -1, -33, -1, -1, -33, -23, -5, -1, -1, -1, -1, -1, -1, -1, -1, -9, -33, -1, -65, -1, -9, -1, -65, -1, -17, -5, -1, 119, -19, -2, -35, 1};
  // {00000001 00000000 01100010 00000000 10000000 00000000 00011000 00000011 00000000 01001000 00101000 10000000 10000100 00000001 00101000 10000010 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {-128, 0, 70, 0, 1, 0, 24, -64, 0, 18, 20, 1, 33, -128, 20, 65, 0};
  // {01000001 10000010 00000000 00000010 01000100 00000000 00000001 00000011 00001000 01000011 10001000 10100000 11000100 10100000 01000100 01000000 000100}
  public static final byte[] GRPSPLIT14 = new byte[] {-126, 65, 0, 64, 34, 0, -128, -64, 16, -62, 17, 5, 35, 5, 34, 2, 8};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -17, 125, -73, -65, -5, 127, -35, -2, -41, -1, -89, -9, -65, 95, 124, 63, 127, -81, -36, -33, 106, -2, -23, 31, -73, -9, -78, -73, -65, -17, -10, -21, -1, 47, -33, -17, -65, -2, 127, -1, -5, -1, -3, -65, -1, -67, 125, -38, -117, -1, -97, -1, -17, -1, -73, 125, -66, -49, -1, -1, -1, -18, -3, -1, -5, -5, -1, 119, 44, -65, -124, 65, -121, -97, -18, -65, -82, -86, -67, 77, -77, 81, -35, 126, -6, -15, 105, -7, 94, -68, -84, -3, 94, -9, -65, 0};
  // {00000000 00000101 00010001 11100101 10001000 10010100 00001001 11000000 00000011 11001010 00000000 11100000 00000000 00010000 00011101 00001000 0000}
  public static final byte[] GRPSPLIT16 = new byte[] {0, -96, -120, -89, 17, 41, -112, 3, -64, 83, 0, 7, 0, 8, -72, 16, 0};
  // {...28 0-bits}
  public static final byte[] GRPSPLIT17 = new byte[] {28, -40, 0, 32, 0, 0, 0, 64, 80, 0, 2, 2, 0, -64, 60, 0, 16, 0, 76, 0, -128, 1, 0, 100, -128, 24, 7, 0, 0, 2, 0, 72, 36, 0, 8, 32, 8, 0, 8, 28, 8, 16, 97, 0, 0, 0, 36, 0, 17, 0, 8, -111, 0, 0, 64, 8, 2, 0, 0, 0, -128, 1, 1, -124, 1, 0, -110, 64, 0, 0, 4, 32, -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 8, 32, 4, 0, 0, 0, 0, 0};
  // {00001110 01000010 00001011 10000101 00000000 11010010 00000000 00100000 00110100 10110000 00000101 01001001 10001010 00101001 00011011 00100000 001010}
  public static final byte[] GRPSPLIT18 = new byte[] {112, 66, -48, -95, 0, 75, 0, 4, 44, 13, -96, -110, 81, -108, -40, 4, 20};
  // {10010001 00010100 11100110 01001001 00010101 00100100 01100010 00001111 11010000 01000100 00000001 00010011 10100011 01110111 10110010 00111010 1111}
  public static final byte[] GRPSPLIT19 = new byte[] {-119, 40, 103, -110, -88, 36, 70, -16, 11, 34, -128, -56, -59, -18, 77, 92, 15};
  // {11111110 01111111 01101111 11110111 00110111 11111111 11011010 11101110 11110110 10111101 01110101 11011011 11111110 10111111 11111111 11110101 111011}
  public static final byte[] GRPSPLIT20 = new byte[] {127, -2, -10, -17, -20, -1, 91, 119, 111, -67, -82, -37, 127, -3, -1, -81, 55};
  // {10110110 11000010 00000010 01000000}
  public static final byte[] GRPSPLIT21 = new byte[] {109, 67, 64, 2};
  // {11111111 10111101 11111111 11111111 11111111 10111111 11111111 11111111 11101111 11111011 11111111 11100111 11111111 11111110 11111111 11111111 1011}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -67, -1, -1, -1, -3, -1, -1, -9, -33, -1, -25, -1, 127, -1, -1, 13};
  // {10000100 01000000 00000010 00100110}
  public static final byte[] GRPSPLIT23 = new byte[] {33, 2, 64, 100};
  // {01010100 00000000 01010001 10100010 11100010 10010000 10010010 00000001 01001111 01001000 00001000 00100000 11101010 00000000 00100100 10000000 0000}
  public static final byte[] GRPSPLIT24 = new byte[] {42, 0, -118, 69, 71, 9, 73, -128, -14, 18, 16, 4, 87, 0, 36, 1, 0};
}


class gbm_pojo_test_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_47_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* TailNum */] <3497.5f ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT1, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT2, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT3, 134, 0, data[6])) ? 
                        -0.11645399f : 
                        -0.06135176f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT4, 134, 0, data[6])) ? 
                        -0.025502566f : 
                        0.014819795f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT5, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                        -0.06425777f : 
                        -0.009792503f) : 
                     (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT7, 32, 0, data[1])) ? 
                        -0.024079977f : 
                        0.0026140732f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT8, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.056996822f : 
                        0.040472303f) : 
                     (!Double.isNaN(data[2 /* UniqueCarrier */]) && (GenModel.bitSetIsInRange(32, 0, data[2]) && !GenModel.bitSetContains(GRPSPLIT11, 32, 0, data[2])) ? 
                        -0.084769025f : 
                        0.0011367262f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT12, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        -0.05059798f : 
                        0.024858871f) : 
                     (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT14, 134, 0, data[6])) ? 
                        0.028509695f : 
                        0.07342269f)))) : 
         (data[3 /* FlightNum */] <443.5f ? 
             (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(442, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT15, 442, 2, data[3])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3 /* FlightNum */]) || !GenModel.bitSetIsInRange(442, 2, data[3]) || (GenModel.bitSetIsInRange(442, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT17, 442, 2, data[3])) ? 
                        -0.095754005f : 
                        -0.03045976f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.08253121f : 
                        0.009055976f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT19, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(442, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT20, 442, 2, data[3])) ? 
                        -0.04105945f : 
                        0.019067818f) : 
                     (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(442, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT21, 442, 2, data[3])) ? 
                        0.011034397f : 
                        0.0879367f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT23, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT24, 32, 0, data[0])) ? 
                        -0.105628826f : 
                        -0.040975943f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT25, 132, 0, data[5])) ? 
                        -0.019401355f : 
                        0.026886638f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT27, 134, 0, data[6])) ? 
                        -0.054354135f : 
                        0.012805347f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT28, 134, 0, data[6])) ? 
                        0.005738741f : 
                        0.05519591f)))));
    return pred;
  } // constant pool size = 700B, number of visited nodes = 31, static init size = 3444B
  // {00001000 00110101 10000011 11110000}
  public static final byte[] GRPSPLIT0 = new byte[] {16, -84, -63, 15};
  // {00000100 01000111 10010000 00100011 01110000 00110010 00100110 00000000 11001000 00000011 10001110 00110110 01011000 10000111 01100110 11010000 101110}
  public static final byte[] GRPSPLIT1 = new byte[] {32, -30, 9, -60, 14, 76, 100, 0, 19, -64, 113, 108, 26, -31, 102, 11, 29};
  // {10111101 01111111 11101111 11111111 11011111 01111111 11111111 11011001 11111101 11110001 10111111 01001111 01110111 10011111 11011101 11111111 1011}
  public static final byte[] GRPSPLIT2 = new byte[] {-67, -2, -9, -1, -5, -2, -1, -101, -65, -113, -3, -14, -18, -7, -69, -1, 13};
  // {11111111 11011111 11111111 11111111 11111011 11111111 11111111 11111111 11111110 11111011 11111111 11110111 01111111 11111111 11111111 11011111 111111}
  public static final byte[] GRPSPLIT3 = new byte[] {-1, -5, -1, -1, -33, -1, -1, -1, 127, -33, -1, -17, -2, -1, -1, -5, 63};
  // {00000000 00000000 00000000 00010000 00000000 00000000 00000000 00000000 00010001 00000100 00000000 10000000 00000000 00000000 00000000 00100000 000000}
  public static final byte[] GRPSPLIT4 = new byte[] {0, 0, 0, 8, 0, 0, 0, 0, -120, 32, 0, 1, 0, 0, 0, 4, 0};
  // {01111111 11100111 00111111 11111110 11111101 10001001 11101111 10111101 10111101 11010011 11000011 01111111 11111101 11110110 11111111 10111111 1111}
  public static final byte[] GRPSPLIT5 = new byte[] {-2, -25, -4, 127, -65, -111, -9, -67, -67, -53, -61, -2, -65, 111, -1, -3, 15};
  // {11000010 00000000 00111000 00001100}
  public static final byte[] GRPSPLIT6 = new byte[] {67, 0, 28, 48};
  // {10111110 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT7 = new byte[] {125, 0, 0, 0};
  // {00000010 10010001 00000001 10000001 00111100 00110100 00010000 00000000 00000000 01101010 00000000 00110010 00010010 00000000 00100101 00100010 0000}
  public static final byte[] GRPSPLIT8 = new byte[] {64, -119, -128, -127, 60, 44, 8, 0, 0, 86, 0, 76, 72, 0, -92, 68, 0};
  // {11101111 11111111 11111111 11010001 10110111 11011111 11111101 11011001 11110111 11111111 01110111 11101111 01111011 11111111 11111111 11111011 111011}
  public static final byte[] GRPSPLIT9 = new byte[] {-9, -1, -1, -117, -19, -5, -65, -101, -17, -1, -18, -9, -34, -1, -1, -33, 55};
  // {01000001 00000100 01000000 01000000 00000000 00000000 10001001 00000110 00010001 00000000 00000010 00000000 00001000 00010000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {-126, 32, 2, 2, 0, 0, -111, 96, -120, 0, 64, 0, 16, 8, 0, 0, 0};
  // {01111111 11000000 00000000 00000000}
  public static final byte[] GRPSPLIT11 = new byte[] {-2, 3, 0, 0};
  // {10101111 11111001 11000111 11101111 11011111 11011011 11011111 10111111 11111111 11110010 01111101 11111101 11111011 11010010 11111100 11101111 111111}
  public static final byte[] GRPSPLIT12 = new byte[] {-11, -97, -29, -9, -5, -37, -5, -3, -1, 79, -66, -65, -33, 75, 63, -9, 63};
  // {11111111 11101111 11111111 01111111 11100111 11111111 11101111 11111111 11111111 11111111 11111111 11001101 11111101 11111111 11011111 11111101 1111}
  public static final byte[] GRPSPLIT13 = new byte[] {-1, -9, -1, -2, -25, -1, -9, -1, -1, -1, -1, -77, -65, -1, -5, -65, 15};
  // {00000000 00000001 10000000 00100000 01010000 00000010 00000100 00101100 00001000 00000000 00000000 00001000 10000010 00010000 10000100 00000100 000000}
  public static final byte[] GRPSPLIT14 = new byte[] {0, -128, 1, 4, 10, 64, 32, 52, 16, 0, 0, 16, 65, 8, 33, 32, 0};
  // {...2 0-bits... 11111111 11111111 10111111 11111111 11111110 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11111111 11111111 11101111 11111111 11111110 11111111 11111111 11111111 01111111 11111111 11110111 11111110 11111111 11111111 01111111 11111111 11011111 11111111 11101111 11110111 11110111 11110111 11111111 11011111 11110111 10111111 11111111 10111000 11100011 11100101 11110111 01111110 11011000 11101001 11111111 10111101 11101100 00001011}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -3, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -2, -1, -1, -1, -9, -1, 127, -1, -1, -1, -2, -1, -17, 127, -1, -1, -2, -1, -5, -1, -9, -17, -17, -17, -1, -5, -17, -3, -1, 29, -57, -89, -17, 126, 27, -105, -1, -67, 55, -48, 0};
  // {00100011 11000010 00110111 10111110}
  public static final byte[] GRPSPLIT16 = new byte[] {-60, 67, -20, 125};
  // {...2 0-bits... 00000000 00000000 00000000 00000000 00000001 00000000 01000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00010000 00000000 00000001 00000000 00000000 00000000 00000000 00000000 00001000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00001000 00001000 00000000 00000000 00100000 00000000 00000000 00000000 00000011 00010000 00010000 00001000 10000000 00100000 00000000 00000000 00000000 00000011 01100100}
  public static final byte[] GRPSPLIT17 = new byte[] {0, 0, 0, 0, -128, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, -128, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 4, 0, 0, 0, -64, 8, 8, 16, 1, 4, 0, 0, 0, -64, 38, 0};
  // {11111111 01111110 11011110 11111010 11110111 11011101 11111111 11111111 11111111 11111111 11111111 11111111 11111101 11111111 11111101 01111111 1111}
  public static final byte[] GRPSPLIT18 = new byte[] {-1, 126, 123, 95, -17, -69, -1, -1, -1, -1, -1, -1, -65, -1, -65, -2, 15};
  // {00110011 10000001 00000011 11100110}
  public static final byte[] GRPSPLIT19 = new byte[] {-52, -127, -64, 103};
  // {...2 0-bits... 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 10111111 11111111 11111101 11111111 11111111 11111111 11111110 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11011111 11111111 11111111 11111111 11111111 11111111 11111110 11111111 11111101 11111111 11111111 11111101 11111111 11011011 11001111 01110111 00110111 10011110 11100110 01111011 11111101}
  public static final byte[] GRPSPLIT20 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, -1, -65, -1, -1, -1, 127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -1, -1, -1, -1, -1, 127, -1, -65, -1, -1, -65, -1, -37, -13, -18, -20, 121, 103, -34, -65, 3};
  // {...2 0-bits... 11111111 01111111 11111111 11110011 11111111 11111111 11111111 11101111 11111101 11111111 10111111 11110111 11111111 11111111 11111111 11111111 11111110 11111011 10111111 11111111 11111011 11111111 11111111 01111111 01111111 11111111 11011111 11111111 11111111 11111111 00111111 11111111 10111111 11111111 11111111 11111111 11111110 11011111 11111111 11111111 11111111 11111111 11111101 11111111 01101111 10111111 11111011 11101111 11100101 11111111 11111111 11111011 11011111 11011011 11111111}
  public static final byte[] GRPSPLIT21 = new byte[] {-1, -2, -1, -49, -1, -1, -1, -9, -65, -1, -3, -17, -1, -1, -1, -1, 127, -33, -3, -1, -33, -1, -1, -2, -2, -1, -5, -1, -1, -1, -4, -1, -3, -1, -1, -1, 127, -5, -1, -1, -1, -1, -65, -1, -10, -3, -33, -9, -89, -1, -1, -33, -5, -37, -1, 3};
  // {11110100 11011010 01101110 01001010}
  public static final byte[] GRPSPLIT22 = new byte[] {47, 91, 118, 82};
  // {01111101 11101111 11111111 10111111 01101001 11110101 10111111 01111101 11111101 11111111 00111011 11101110 11011111 11111011 11111011 11111011 011111}
  public static final byte[] GRPSPLIT23 = new byte[] {-66, -9, -1, -3, -106, -81, -3, -66, -65, -1, -36, 119, -5, -33, -33, -33, 62};
  // {11111111 11111110 11101110 11101110}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, 127, 119, 119};
  // {00010001 01000000 10110000 10001101 00011001 10000000 00011010 01000100 01000010 00000110 00101100 00110011 10000000 10100000 10010001 00000010 0000}
  public static final byte[] GRPSPLIT25 = new byte[] {-120, 2, 13, -79, -104, 1, 88, 34, 66, 96, 52, -52, 1, 5, -119, 64, 0};
  // {00000010 10000001 01101100 00000101 01000001 00100010 10000000 00001000 01000000 01010100 01001001 11000000 11110001 00110011 00100110 00101001 0010}
  public static final byte[] GRPSPLIT26 = new byte[] {64, -127, 54, -96, -126, 68, 1, 16, 2, 42, -110, 3, -113, -52, 100, -108, 4};
  // {10111111 11111011 11111111 10111111 11111011 11011101 11111111 10101111 10111111 01111011 11111111 11111011 10111110 11111100 01111111 11101111 111111}
  public static final byte[] GRPSPLIT27 = new byte[] {-3, -33, -1, -3, -33, -69, -1, -11, -3, -34, -1, -33, 125, 63, -2, -9, 63};
  // {11101111 11011011 00011111 10101111 11001111 01111111 11111111 11011111 11101111 11110011 11111111 11110101 11000110 01101111 11111111 11001011 101111}
  public static final byte[] GRPSPLIT28 = new byte[] {-9, -37, -8, -11, -13, -2, -1, -5, -9, -49, -1, -81, 99, -10, -1, -45, 61};
}


class gbm_pojo_test_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_48_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (!Double.isNaN(data[1 /* DayOfWeek */]) && (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[1])) ? 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
             (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT4, 132, 0, data[5])) ? 
                        -0.0988184f : 
                        -0.03080917f) : 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                        -0.06505322f : 
                        -0.0062874886f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT6, 32, 0, data[0])) ? 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2018.5f ? 
                        0.047940586f : 
                        -0.072832696f) : 
                    0.16317305f)) : 
             (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT7, 134, 0, data[6])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT8, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                        -0.12601864f : 
                        -0.040504918f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT10, 132, 0, data[5])) ? 
                        -0.015539858f : 
                        0.09172601f)) : 
                 (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT11, 132, 0, data[5])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT12, 32, 0, data[0])) ? 
                        -0.011248127f : 
                        0.010186879f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT13, 32, 0, data[0])) ? 
                        0.0041912934f : 
                        0.07107281f)))) : 
         (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT14, 132, 0, data[5])) ? 
             (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT15, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT16, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.12404076f : 
                        -0.0243467f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT18, 132, 0, data[5])) ? 
                        -0.03567279f : 
                        7.0679147E-4f)) : 
                 (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT20, 32, 0, data[0])) ? 
                        -0.024042474f : 
                        0.119157456f) : 
                     (data[4 /* TailNum */] <1942.0f ? 
                        -0.0020032534f : 
                        0.03575684f))) : 
             (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT21, 32, 0, data[0])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT22, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT23, 32, 0, data[0])) ? 
                        -0.13085045f : 
                        -0.038162783f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        -0.0051180143f : 
                        0.020290771f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT25, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT26, 132, 0, data[5])) ? 
                        -0.020100465f : 
                        0.028341072f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT27, 132, 0, data[5])) ? 
                        6.728571E-4f : 
                        0.019246867f)))));
    return pred;
  } // constant pool size = 483B, number of visited nodes = 30, static init size = 2166B
  // {10111010 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT0 = new byte[] {93, 0, 0, 0};
  // {10111111 10100111 01111111 11101111 11100111 11111111 11110110 10011111 01000001 01000110 00111110 11000000 11101110 11010101 11010001 11101010 1011}
  public static final byte[] GRPSPLIT1 = new byte[] {-3, -27, -2, -9, -25, -1, 111, -7, -126, 98, 124, 3, 119, -85, -117, 87, 13};
  // {00011000 00001100 10000000 00000001 01000001 00100000 00100000 00000100 00000100 00010000 11000100 00100001 01000001 01100001 10000000 00100100 000000}
  public static final byte[] GRPSPLIT2 = new byte[] {24, 48, 1, -128, -126, 4, 4, 32, 32, 8, 35, -124, -126, -122, 1, 36, 0};
  // {01001110 01111000 00011011 11111110}
  public static final byte[] GRPSPLIT3 = new byte[] {114, 30, -40, 127};
  // {11111111 11101111 11111111 11111111 11111111 11111111 11110110 11111111 11110111 11110110 11111111 11100001 11111110 11111101 11010001 11111011 1111}
  public static final byte[] GRPSPLIT4 = new byte[] {-1, -9, -1, -1, -1, -1, 111, -1, -17, 111, -1, -121, 127, -65, -117, -33, 15};
  // {10111111 11111111 10111111 10101111 11111111 11111101 11110111 10101111 01111111 11111010 11111111 11111101 11110111 11111111 11111010 10111111 111010}
  public static final byte[] GRPSPLIT5 = new byte[] {-3, -1, -3, -11, -1, -65, -17, -11, -2, 95, -1, -65, -17, -1, 95, -3, 23};
  // {01010100 00001000 00001000 00001000}
  public static final byte[] GRPSPLIT6 = new byte[] {42, 16, 16, 16};
  // {01000111 01100101 00110111 10000010 11110111 01011011 11011111 01110011 10111101 11111101 01111111 11010101 00111101 01101011 00111111 11111011 010101}
  public static final byte[] GRPSPLIT7 = new byte[] {-30, -90, -20, 65, -17, -38, -5, -50, -67, -65, -2, -85, -68, -42, -4, -33, 42};
  // {10110101 01110010 11111001 11010110}
  public static final byte[] GRPSPLIT8 = new byte[] {-83, 78, -97, 107};
  // {00010000 10010010 11000000 01101000 00000000 00000000 00000000 00000100 00000000 00000000 00000000 00000010 11000000 10000000 10000000 00000000 101000}
  public static final byte[] GRPSPLIT9 = new byte[] {8, 73, 3, 22, 0, 0, 0, 32, 0, 0, 0, 64, 3, 1, 1, 0, 5};
  // {00010010 00000000 01001000 00000000 00000010 00000010 00000000 00000010 00000000 00000000 00110000 00000000 00000000 10000000 00010000 00000000 0000}
  public static final byte[] GRPSPLIT10 = new byte[] {72, 0, 18, 0, 64, 64, 0, 64, 0, 0, 12, 0, 0, 1, 8, 0, 0};
  // {00101000 00100000 00000110 10000101 00000001 00010101 01000100 00000001 01000000 01000110 00000100 10000000 00000110 01010001 00000001 00000000 0010}
  public static final byte[] GRPSPLIT11 = new byte[] {20, 4, 96, -95, -128, -88, 34, -128, 2, 98, 32, 1, 96, -118, -128, 0, 4};
  // {01111101 10111000 01000010 01100110}
  public static final byte[] GRPSPLIT12 = new byte[] {-66, 29, 66, 102};
  // {00000011 01001011 00111000 10011010}
  public static final byte[] GRPSPLIT13 = new byte[] {-64, -46, 28, 89};
  // {11011111 01010001 11110111 11110011 11111101 10100000 10111011 11111110 11011111 11111001 10101001 11111111 11111011 00100110 01111111 00111010 0101}
  public static final byte[] GRPSPLIT14 = new byte[] {-5, -118, -17, -49, -65, 5, -35, 127, -5, -97, -107, -1, -33, 100, -2, 92, 10};
  // {01010110 10100011 00001000 01111110}
  public static final byte[] GRPSPLIT15 = new byte[] {106, -59, 16, 126};
  // {11111111 11110101 11111111 11111111 11111111 11111111 01110011 11111111 11011110 00111111 11111111 10111011 11111111 11111111 11111101 10111111 110111}
  public static final byte[] GRPSPLIT16 = new byte[] {-1, -81, -1, -1, -1, -1, -50, -1, 123, -4, -1, -35, -1, -1, -65, -3, 59};
  // {00101000 00010000 00100101 10000000}
  public static final byte[] GRPSPLIT17 = new byte[] {20, 8, -92, 1};
  // {00000000 00000100 00000000 00001000 00000000 00010010 00000100 00000000 00000000 00000000 01000010 00000000 00000100 10010000 10000000 00000000 1010}
  public static final byte[] GRPSPLIT18 = new byte[] {0, 32, 0, 16, 0, 72, 32, 0, 0, 0, 66, 0, 32, 9, 1, 0, 5};
  // {11111111 11010011 11110111 11110111 11111111 10101001 11111011 11111111 11011111 11111111 10101111 11111111 11111011 11110111 11111111 11111011 1101}
  public static final byte[] GRPSPLIT19 = new byte[] {-1, -53, -17, -17, -1, -107, -33, -1, -5, -1, -11, -1, -33, -17, -1, -33, 11};
  // {00000000 00000000 00000000 00001000}
  public static final byte[] GRPSPLIT20 = new byte[] {0, 0, 0, 16};
  // {10101001 01001111 10100110 01110000}
  public static final byte[] GRPSPLIT21 = new byte[] {-107, -14, 101, 14};
  // {11111111 01111111 11111011 11110111 11111101 11110110 10101111 01111101 11111111 11111110 11011101 11110111 11111110 10111110 11101111 11011101 101111}
  public static final byte[] GRPSPLIT22 = new byte[] {-1, -2, -33, -17, -65, 111, -11, -66, -1, 127, -69, -17, 127, 125, -9, -69, 61};
  // {10111101 11111111 10111111 01110000}
  public static final byte[] GRPSPLIT23 = new byte[] {-67, -1, -3, 14};
  // {10000100 00010000 10000110 10000000 00000101 00000000 00001010 00100100 00001010 10111001 00000001 10011000 01010000 00100000 00110011 00100000 0100}
  public static final byte[] GRPSPLIT24 = new byte[] {33, 8, 97, 1, -96, 0, 80, 36, 80, -99, -128, 25, 10, 4, -52, 4, 2};
  // {11111110 11111011 11110110 01110101 00111010 10111111 01110101 01000111 01110111 11110101 00110000 00001110 11111001 01010011 11011011 01100100 111110}
  public static final byte[] GRPSPLIT25 = new byte[] {127, -33, 111, -82, 92, -3, -82, -30, -18, -81, 12, 112, -97, -54, -37, 38, 31};
  // {00000001 00000001 00000000 00000000 10100001 10000000 00000001 00001000 10000001 01000000 10000000 00010110 00100010 00000110 00000110 00011000 0100}
  public static final byte[] GRPSPLIT26 = new byte[] {-128, -128, 0, 0, -123, 1, -128, 16, -127, 2, 1, 104, 68, 96, 96, 24, 2};
  // {11111111 11101110 01011111 10011111 01011111 11111111 11110100 01011101 11111111 01000110 11011110 01100111 11001101 11011111 10001111 11111111 1011}
  public static final byte[] GRPSPLIT27 = new byte[] {-1, 119, -6, -7, -6, -1, 47, -70, -1, 98, 123, -26, -77, -5, -15, -1, 13};
}


class gbm_pojo_test_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[1] += gbm_pojo_test_Tree_49_class_0.score0(fdata);
  }
}
class gbm_pojo_test_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[4 /* TailNum */] <3497.5f ? 
         (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT0, 32, 0, data[0])) ? 
             (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT1, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT2, 134, 0, data[6])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT3, 32, 0, data[0])) ? 
                        -0.07268769f : 
                        0.021489942f) : 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT4, 32, 0, data[0])) ? 
                        -0.02861448f : 
                        0.0053082863f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT5, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT6, 132, 0, data[5])) ? 
                        -0.038339585f : 
                        -0.001328039f) : 
                     (Double.isNaN(data[3]) || (data[3] >= 2439) || data[3 /* FlightNum */] <2246.5f ? 
                        -4.9846625E-4f : 
                        0.027582482f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT7, 132, 0, data[5])) ? 
                 (Double.isNaN(data[6 /* Dest */]) || !GenModel.bitSetIsInRange(134, 0, data[6]) || (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT8, 134, 0, data[6])) ? 
                     (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT9, 134, 0, data[6])) ? 
                        -0.046618477f : 
                        -0.006559555f) : 
                     (Double.isNaN(data[1 /* DayOfWeek */]) || !GenModel.bitSetIsInRange(32, 0, data[1]) || (GenModel.bitSetIsInRange(32, 0, data[1]) && !GenModel.bitSetContains(GRPSPLIT10, 32, 0, data[1])) ? 
                        0.056622263f : 
                        0.13306423f)) : 
                 (!Double.isNaN(data[6 /* Dest */]) && (GenModel.bitSetIsInRange(134, 0, data[6]) && !GenModel.bitSetContains(GRPSPLIT11, 134, 0, data[6])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT12, 132, 0, data[5])) ? 
                        -0.035954602f : 
                        0.07538076f) : 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT13, 132, 0, data[5])) ? 
                        0.039907604f : 
                        0.14022356f)))) : 
         (Double.isNaN(data[4 /* TailNum */]) || !GenModel.bitSetIsInRange(3, 3498, data[4]) || (GenModel.bitSetIsInRange(3, 3498, data[4]) && !GenModel.bitSetContains(GRPSPLIT14, 3, 3498, data[4])) ? 
             (data[3 /* FlightNum */] <443.5f ? 
                 (!Double.isNaN(data[3 /* FlightNum */]) && (GenModel.bitSetIsInRange(442, 2, data[3]) && !GenModel.bitSetContains(GRPSPLIT15, 442, 2, data[3])) ? 
                     (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT16, 32, 0, data[0])) ? 
                        -0.04985165f : 
                        0.013683198f) : 
                     (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT17, 32, 0, data[0])) ? 
                        -0.014397601f : 
                        0.0358715f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT18, 32, 0, data[0])) ? 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT19, 132, 0, data[5])) ? 
                        -0.016265254f : 
                        0.013386059f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT20, 132, 0, data[5])) ? 
                        -0.0086030485f : 
                        0.035248235f))) : 
             (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT21, 132, 0, data[5])) ? 
                 (!Double.isNaN(data[0 /* DayofMonth */]) && (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT22, 32, 0, data[0])) ? 
                     (Double.isNaN(data[5 /* Origin */]) || !GenModel.bitSetIsInRange(132, 0, data[5]) || (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT23, 132, 0, data[5])) ? 
                        0.110312164f : 
                        0.11392721f) : 
                     (!Double.isNaN(data[5 /* Origin */]) && (GenModel.bitSetIsInRange(132, 0, data[5]) && !GenModel.bitSetContains(GRPSPLIT24, 132, 0, data[5])) ? 
                        0.11291652f : 
                        0.11925024f)) : 
                 (Double.isNaN(data[0 /* DayofMonth */]) || !GenModel.bitSetIsInRange(32, 0, data[0]) || (GenModel.bitSetIsInRange(32, 0, data[0]) && !GenModel.bitSetContains(GRPSPLIT25, 32, 0, data[0])) ? 
                    0.1258787f : 
                    0.1368213f))));
    return pred;
  } // constant pool size = 492B, number of visited nodes = 29, static init size = 2244B
  // {00000000 00100100 10000010 00110000}
  public static final byte[] GRPSPLIT0 = new byte[] {0, 36, 65, 12};
  // {01101111 01100100 01111101 11101110 11101111 10011101 11111100 00111001 10101001 01010011 10001010 11111111 01111101 11010110 11111111 10110101 1011}
  public static final byte[] GRPSPLIT1 = new byte[] {-10, 38, -66, 119, -9, -71, 63, -100, -107, -54, 81, -1, -66, 107, -1, -83, 13};
  // {10101110 11010100 11111111 11101111 01111010 11111101 11111111 11111011 11111110 11111011 01110111 01111101 01111011 11111111 01110110 11101111 111111}
  public static final byte[] GRPSPLIT2 = new byte[] {117, 43, -1, -9, 94, -65, -1, -33, 127, -33, -18, -66, -34, -1, 110, -9, 63};
  // {00000110 01000000 00010001 00001000}
  public static final byte[] GRPSPLIT3 = new byte[] {96, 2, -120, 16};
  // {10010100 01010001 00101000 11000010}
  public static final byte[] GRPSPLIT4 = new byte[] {41, -118, 20, 67};
  // {01100111 11011111 10010111 00110011 11110111 11111011 01010111 10110001 10111111 10111111 10011111 10100111 11111001 00000111 01110111 11010101 111111}
  public static final byte[] GRPSPLIT5 = new byte[] {-26, -5, -23, -52, -17, -33, -22, -115, -3, -3, -7, -27, -97, -32, -18, -85, 63};
  // {11111110 11111111 11101111 01111101 10110111 11111111 01111111 11111111 11111110 11111111 11111111 11001100 11111111 10111111 11111101 11111111 1111}
  public static final byte[] GRPSPLIT6 = new byte[] {127, -1, -9, -66, -19, -1, -2, -1, 127, -1, -1, 51, -1, -3, -65, -1, 15};
  // {00010000 10010011 01010011 10001001 00111100 00100000 00000001 01000110 00010101 01101100 00100000 01100010 00001010 00000000 00100101 00101010 0000}
  public static final byte[] GRPSPLIT7 = new byte[] {8, -55, -54, -111, 60, 4, -128, 98, -88, 54, 4, 70, 80, 0, -92, 84, 0};
  // {10000011 01000010 01100000 01001000 01010000 00000010 00000001 00000010 00000001 01000000 01100000 00000000 00000000 00100000 00001000 00100000 000010}
  public static final byte[] GRPSPLIT8 = new byte[] {-63, 66, 6, 18, 10, 64, -128, 64, -128, 2, 6, 0, 0, 4, 16, 4, 16};
  // {11111111 11110111 11111111 11101111 11111110 11011111 11111011 10111111 11110111 11111111 11111011 11011011 11111011 01111111 11111010 11111011 111111}
  public static final byte[] GRPSPLIT9 = new byte[] {-1, -17, -1, -9, 127, -5, -33, -3, -17, -1, -33, -37, -33, -2, 95, -33, 63};
  // {10001100 00000000 00000000 00000000}
  public static final byte[] GRPSPLIT10 = new byte[] {49, 0, 0, 0};
  // {10111110 01111001 11000111 01101111 10111111 11011111 11111111 10111011 11111111 11111101 01110011 11111111 10111111 11010000 11111101 11101111 111111}
  public static final byte[] GRPSPLIT11 = new byte[] {125, -98, -29, -10, -3, -5, -1, -35, -1, -65, -50, -1, -3, 11, -65, -9, 63};
  // {00000000 00000000 00000010 00000000 00000000 00000000 00000001 01000010 00010000 01000000 00100000 00100000 00000000 00000000 00000000 00000000 0000}
  public static final byte[] GRPSPLIT12 = new byte[] {0, 0, 64, 0, 0, 0, -128, 66, 8, 2, 4, 4, 0, 0, 0, 0, 0};
  // {00010000 00000000 00000000 00000001 00010000 00100000 00000000 01000000 00000000 00100000 00000000 00000000 00000000 00000000 00000100 00000000 0000}
  public static final byte[] GRPSPLIT13 = new byte[] {8, 0, 0, -128, 8, 4, 0, 2, 0, 4, 0, 0, 0, 0, 32, 0, 0};
  // {...3498 0-bits... }
  public static final byte[] GRPSPLIT14 = new byte[] {5};
  // {...2 0-bits... 11111111 11111111 10111111 11111111 11111110 11111111 10111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11101111 11111111 11111111 11111111 11111111 11111111 01111111 11111111 11110111 11111110 11111111 11111111 01111111 11111111 11011111 11111111 11101111 11110111 11110111 11110111 11111111 11011111 11110111 10111111 11111111 10111000 11110011 11100101 11110011 01111110 11111000 11101011 11111111 10111101 11101100 00001011}
  public static final byte[] GRPSPLIT15 = new byte[] {-1, -1, -3, -1, 127, -1, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1, -1, -2, -1, -17, 127, -1, -1, -2, -1, -5, -1, -9, -17, -17, -17, -1, -5, -17, -3, -1, 29, -49, -89, -49, 126, 31, -41, -1, -67, 55, -48, 0};
  // {00100001 01000010 00000010 00101010}
  public static final byte[] GRPSPLIT16 = new byte[] {-124, 66, 64, 84};
  // {00110011 10100001 00110011 11100110}
  public static final byte[] GRPSPLIT17 = new byte[] {-52, -123, -52, 103};
  // {11000100 11011000 01001100 01001000}
  public static final byte[] GRPSPLIT18 = new byte[] {35, 27, 50, 18};
  // {00010001 01000001 11100000 11001101 00011001 10100001 00010010 01000100 00000010 01000110 10101000 10100011 10000000 00110110 11000000 10010010 0001}
  public static final byte[] GRPSPLIT19 = new byte[] {-120, -126, 7, -77, -104, -123, 72, 34, 64, 98, 21, -59, 1, 108, 3, 73, 8};
  // {00101110 10111111 11111101 00110111 11001111 11110110 10101101 10111111 11011110 11111101 01010011 10011100 11110011 00111011 11111111 01101101 1010}
  public static final byte[] GRPSPLIT20 = new byte[] {116, -3, -65, -20, -13, 111, -75, -3, 123, -65, -54, 57, -49, -36, -1, -74, 5};
  // {01000001 00000000 00100000 10000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 00011100 00000001 01000000 00000000 0000}
  public static final byte[] GRPSPLIT21 = new byte[] {-126, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, -128, 56, -128, 2, 0, 0};
  // {11111101 11111111 11111101 10111000}
  public static final byte[] GRPSPLIT22 = new byte[] {-65, -1, -65, 29};
  // {00000000 00000000 00000000 00000100 00100000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 11000000 00000000 10000000 0000}
  public static final byte[] GRPSPLIT23 = new byte[] {0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 0};
  // {11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111 11001111 01011111 10111111 11111110 11111101 1111}
  public static final byte[] GRPSPLIT24 = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -13, -6, -3, 127, -65, 15};
  // {11000100 00100100 00011000 10100000}
  public static final byte[] GRPSPLIT25 = new byte[] {35, 36, 24, 5};
}


